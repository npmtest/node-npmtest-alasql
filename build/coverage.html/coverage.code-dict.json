{"/home/travis/build/npmtest/node-npmtest-alasql/test.js":"/* istanbul instrument in package npmtest_alasql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alasql/lib.npmtest_alasql.js":"/* istanbul instrument in package npmtest_alasql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_alasql = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_alasql = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-alasql/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-alasql && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_alasql */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_alasql\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_alasql.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_alasql.rollup.js'] =\n            local.assetsDict['/assets.npmtest_alasql.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_alasql.__dirname + '/lib.npmtest_alasql.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alasql/node_modules/alasql/dist/alasql.fs.js":"//! AlaSQL v0.3.9 | © 2014-2016 Andrey Gershun & Mathias Rangel Wulff | License: MIT \n/*\n@module alasql\n@version 0.3.9\n\nAlaSQL - JavaScript SQL database\n© 2014-2016\tAndrey Gershun & Mathias Rangel Wulff\n\n@license\nThe MIT License (MIT)\n\nCopyright 2014-2016 Andrey Gershun (agershun@gmail.com) & Mathias Rangel Wulff (m@rawu.dk) \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n/**\n\t@fileoverview AlaSQL JavaScript SQL library\n\t@see http://github.com/agershun/alasql\n*/\n\n/**\n\tCallback from statement\n\t@callback statement-callback\n\t@param {object} data Result data\n*/\n\n/**\n\tUMD envelope for AlaSQL\n*/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n    \t/** alasql main function */\n        module.exports = factory();\n    } else {\n        root.alasql = factory();\n    }\n}(this, function () {\n\n/**\n\tAlaSQL - Main Alasql class\n \t@function\n \t@param {string|function|object} sql - SQL-statement or data object for fuent interface\n \t@param {object} params - SQL parameters\n \t@param {function} cb - callback function\n \t@param {object} scope - Scope for nested queries\n \t@return {any} - Result data object\n\n\t@example\n Standard sync call:\n    alasql('CREATE TABLE one');\n Query:\n \tvar res = alasql('SELECT * FROM one');\n Call with parameters:\n \tvar res = alasql('SELECT * FROM ?',[data]);\n Standard async call with callback function:\n \talasql('SELECT * FROM ?',[data],function(res){\n\t\tconsole.log(data);\n \t});\n Call with scope for subquery (to pass common values):\n    var scope = {one:{a:2,b;20}}\n    alasql('SELECT * FROM ? two WHERE two.a = one.a',[data],null,scope);\n Call for fluent interface with data object:\n    alasql(data).Where(function(x){return x.a == 10}).exec();\n Call for fluent interface without data object:\n    alasql().From(data).Where(function(x){return x.a == 10}).exec();\n */\n\nvar alasql = function(sql, params, cb, scope) {\n\n\tparams = params||[];\n\n\tif(typeof importScripts !== 'function' && alasql.webworker) {\n\t\tvar id = alasql.lastid++;\n\t\talasql.buffer[id] = cb;\n\t\talasql.webworker.postMessage({id:id,sql:sql,params:params});\n\t\treturn;\n\t} \n\n\tif(arguments.length === 0) {\n\t\t// Without arguments - Fluent interface\n\t\treturn new yy.Select({\n\t\t\tcolumns:[new yy.Column({columnid:'*'})],\n\t\t\tfrom: [new yy.ParamValue({param:0})]\n\t\t});\n\t} else if(arguments.length === 1){ \n\t\t// Access promise notation without using `.promise(...)`\n\t\tif(sql.constructor === Array){\n\t\t\treturn alasql.promise(sql);\n\t\t}\n\t} \n\t// Avoid setting params if not needed even with callback\n\tif(typeof params === 'function'){\n\t\tscope = cb;\n\t\tcb = params;\n\t\tparams = [];\n\t}\n\n\tif(typeof params !== 'object'){\n\t\t\tparams = [params];\n\t}\n\n\t// Standard interface\n\t// alasql('#sql');\n\tif(typeof sql === 'string' && sql[0]==='#' && typeof document === \"object\") {\n\t\tsql = document.querySelector(sql).textContent;\n\t} else if(typeof sql === 'object' && sql instanceof HTMLElement) {\n\t\tsql = sql.textContent;\n\t} else if(typeof sql === 'function') {\n\t\t// to run multiline functions\n\t\tsql = sql.toString().slice(14,-3);\n\t}\n\t// Run SQL\t\t\t\n\treturn alasql.exec(sql, params, cb, scope);\n};\n\n/** \n\tCurrent version of alasql \n \t@constant {string} \n*/\nalasql.version = '0.3.9';\n\n/**\n\tDebug flag\n\t@type {boolean}\n*/\nalasql.debug = undefined; // Initial debug variable\n\n/*only-for-browser/*\nvar require = function(){return null}; // as alasqlparser.js is generated, we can not \"remove\" referenses to \nvar __dirname = '';\n//*/\n\n/* parser generated by jison 0.4.17 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar alasqlparser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,13],$V1=[1,104],$V2=[1,102],$V3=[1,103],$V4=[1,6],$V5=[1,42],$V6=[1,79],$V7=[1,76],$V8=[1,94],$V9=[1,93],$Va=[1,69],$Vb=[1,101],$Vc=[1,85],$Vd=[1,64],$Ve=[1,71],$Vf=[1,84],$Vg=[1,66],$Vh=[1,70],$Vi=[1,68],$Vj=[1,61],$Vk=[1,74],$Vl=[1,62],$Vm=[1,67],$Vn=[1,83],$Vo=[1,77],$Vp=[1,86],$Vq=[1,87],$Vr=[1,81],$Vs=[1,82],$Vt=[1,80],$Vu=[1,88],$Vv=[1,89],$Vw=[1,90],$Vx=[1,91],$Vy=[1,92],$Vz=[1,98],$VA=[1,65],$VB=[1,78],$VC=[1,72],$VD=[1,96],$VE=[1,97],$VF=[1,63],$VG=[1,73],$VH=[1,108],$VI=[1,107],$VJ=[10,306,602,764],$VK=[10,306,310,602,764],$VL=[1,115],$VM=[1,116],$VN=[1,117],$VO=[1,118],$VP=[1,119],$VQ=[130,353,410],$VR=[1,127],$VS=[1,126],$VT=[1,134],$VU=[1,164],$VV=[1,175],$VW=[1,178],$VX=[1,173],$VY=[1,181],$VZ=[1,185],$V_=[1,160],$V$=[1,182],$V01=[1,169],$V11=[1,171],$V21=[1,174],$V31=[1,183],$V41=[1,166],$V51=[1,193],$V61=[1,188],$V71=[1,189],$V81=[1,194],$V91=[1,195],$Va1=[1,196],$Vb1=[1,197],$Vc1=[1,198],$Vd1=[1,199],$Ve1=[1,200],$Vf1=[1,201],$Vg1=[1,202],$Vh1=[1,176],$Vi1=[1,177],$Vj1=[1,179],$Vk1=[1,180],$Vl1=[1,186],$Vm1=[1,192],$Vn1=[1,184],$Vo1=[1,187],$Vp1=[1,172],$Vq1=[1,170],$Vr1=[1,191],$Vs1=[1,203],$Vt1=[2,4,5],$Vu1=[2,471],$Vv1=[1,206],$Vw1=[1,211],$Vx1=[1,220],$Vy1=[1,216],$Vz1=[10,72,78,93,98,118,128,162,168,169,183,198,232,245,247,306,310,602,764],$VA1=[2,4,5,10,72,76,77,78,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,183,185,187,198,280,281,282,283,284,285,286,287,288,306,310,420,424,602,764],$VB1=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$VC1=[1,249],$VD1=[1,256],$VE1=[1,265],$VF1=[1,270],$VG1=[1,269],$VH1=[2,4,5,10,72,77,78,93,98,107,118,128,131,132,137,143,145,149,152,154,156,162,168,169,179,180,181,183,198,232,245,247,265,266,270,271,273,280,281,282,283,284,285,286,287,288,290,291,292,293,294,295,296,297,298,299,302,303,306,310,312,317,420,424,602,764],$VI1=[2,162],$VJ1=[1,281],$VK1=[10,74,78,306,310,505,602,764],$VL1=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,193,198,206,208,222,223,224,225,226,227,228,229,230,231,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,297,300,302,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,343,344,356,368,369,370,373,374,386,389,396,400,401,402,403,404,405,406,408,409,417,418,420,424,426,433,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,514,515,516,517,602,764],$VM1=[2,4,5,10,53,72,89,124,146,156,189,266,267,290,306,335,338,339,396,400,401,404,406,408,409,417,418,434,436,437,439,440,441,442,443,447,448,451,452,505,507,508,517,602,764],$VN1=[1,562],$VO1=[1,564],$VP1=[2,503],$VQ1=[1,569],$VR1=[1,580],$VS1=[1,583],$VT1=[1,584],$VU1=[10,78,89,132,137,146,189,296,306,310,470,602,764],$VV1=[10,74,306,310,602,764],$VW1=[2,567],$VX1=[1,602],$VY1=[2,4,5,156],$VZ1=[1,640],$V_1=[1,612],$V$1=[1,646],$V02=[1,647],$V12=[1,620],$V22=[1,631],$V32=[1,618],$V42=[1,626],$V52=[1,619],$V62=[1,627],$V72=[1,629],$V82=[1,621],$V92=[1,622],$Va2=[1,641],$Vb2=[1,638],$Vc2=[1,639],$Vd2=[1,615],$Ve2=[1,617],$Vf2=[1,609],$Vg2=[1,610],$Vh2=[1,611],$Vi2=[1,613],$Vj2=[1,614],$Vk2=[1,616],$Vl2=[1,623],$Vm2=[1,624],$Vn2=[1,628],$Vo2=[1,630],$Vp2=[1,632],$Vq2=[1,633],$Vr2=[1,634],$Vs2=[1,635],$Vt2=[1,636],$Vu2=[1,642],$Vv2=[1,643],$Vw2=[1,644],$Vx2=[1,645],$Vy2=[2,287],$Vz2=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,230,231,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,297,300,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,343,356,368,369,373,374,396,400,401,404,406,408,409,417,418,420,424,426,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$VA2=[2,359],$VB2=[1,668],$VC2=[1,678],$VD2=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,230,231,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,426,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$VE2=[1,694],$VF2=[1,703],$VG2=[1,702],$VH2=[2,4,5,10,72,74,78,93,98,118,128,162,168,169,206,208,222,223,224,225,226,227,228,229,230,231,232,245,247,306,310,602,764],$VI2=[10,72,74,78,93,98,118,128,162,168,169,206,208,222,223,224,225,226,227,228,229,230,231,232,245,247,306,310,602,764],$VJ2=[2,202],$VK2=[1,725],$VL2=[10,72,78,93,98,118,128,162,168,169,183,232,245,247,306,310,602,764],$VM2=[2,163],$VN2=[1,728],$VO2=[2,4,5,112],$VP2=[1,741],$VQ2=[1,760],$VR2=[1,740],$VS2=[1,739],$VT2=[1,734],$VU2=[1,735],$VV2=[1,737],$VW2=[1,738],$VX2=[1,742],$VY2=[1,743],$VZ2=[1,744],$V_2=[1,745],$V$2=[1,746],$V03=[1,747],$V13=[1,748],$V23=[1,749],$V33=[1,750],$V43=[1,751],$V53=[1,752],$V63=[1,753],$V73=[1,754],$V83=[1,755],$V93=[1,756],$Va3=[1,757],$Vb3=[1,759],$Vc3=[1,761],$Vd3=[1,762],$Ve3=[1,763],$Vf3=[1,764],$Vg3=[1,765],$Vh3=[1,766],$Vi3=[1,767],$Vj3=[1,770],$Vk3=[1,771],$Vl3=[1,772],$Vm3=[1,773],$Vn3=[1,774],$Vo3=[1,775],$Vp3=[1,776],$Vq3=[1,777],$Vr3=[1,778],$Vs3=[1,779],$Vt3=[1,780],$Vu3=[1,781],$Vv3=[74,89,189],$Vw3=[10,74,78,154,187,230,297,306,310,343,356,368,369,373,374,602,764],$Vx3=[1,798],$Vy3=[10,74,78,300,306,310,602,764],$Vz3=[1,799],$VA3=[1,805],$VB3=[1,806],$VC3=[1,810],$VD3=[10,74,78,306,310,602,764],$VE3=[2,4,5,77,131,132,137,143,145,149,152,154,156,179,180,181,265,266,270,271,273,280,281,282,283,284,285,286,287,288,290,291,292,293,294,295,296,297,298,299,302,303,312,317,420,424],$VF3=[10,72,78,93,98,107,118,128,162,168,169,183,198,232,245,247,306,310,602,764],$VG3=[2,4,5,10,72,77,78,93,98,107,118,128,131,132,137,143,145,149,152,154,156,162,164,168,169,179,180,181,183,185,187,195,198,232,245,247,265,266,270,271,273,280,281,282,283,284,285,286,287,288,290,291,292,293,294,295,296,297,298,299,302,303,306,310,312,317,420,424,602,764],$VH3=[2,4,5,132,296],$VI3=[1,844],$VJ3=[10,74,76,78,306,310,602,764],$VK3=[2,738],$VL3=[10,74,76,78,132,139,141,145,152,306,310,420,424,602,764],$VM3=[2,1161],$VN3=[10,74,76,78,139,141,145,152,306,310,420,424,602,764],$VO3=[10,74,76,78,139,141,145,306,310,420,424,602,764],$VP3=[10,74,78,139,141,306,310,602,764],$VQ3=[10,78,89,132,146,189,296,306,310,470,602,764],$VR3=[335,338,339],$VS3=[2,764],$VT3=[1,869],$VU3=[1,870],$VV3=[1,871],$VW3=[1,872],$VX3=[1,881],$VY3=[1,880],$VZ3=[164,166,334],$V_3=[2,444],$V$3=[1,936],$V04=[2,4,5,77,131,156,290,291,292,293],$V14=[1,951],$V24=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,118,122,124,128,129,130,131,132,134,135,137,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,313,314,315,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$V34=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,312,313,314,315,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$V44=[2,375],$V54=[1,958],$V64=[306,308,310],$V74=[74,300],$V84=[74,300,426],$V94=[1,965],$Va4=[2,4,5,10,53,72,74,76,78,89,93,95,98,99,107,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$Vb4=[74,426],$Vc4=[1,978],$Vd4=[1,977],$Ve4=[1,984],$Vf4=[10,72,78,93,98,118,128,162,168,169,232,245,247,306,310,602,764],$Vg4=[1,1010],$Vh4=[10,72,78,306,310,602,764],$Vi4=[1,1016],$Vj4=[1,1017],$Vk4=[1,1018],$Vl4=[2,4,5,10,72,74,76,77,78,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,198,280,281,282,283,284,285,286,287,288,306,310,420,424,602,764],$Vm4=[1,1068],$Vn4=[1,1067],$Vo4=[1,1081],$Vp4=[1,1080],$Vq4=[1,1088],$Vr4=[10,72,74,78,93,98,107,118,128,162,168,169,183,198,232,245,247,306,310,602,764],$Vs4=[1,1119],$Vt4=[10,78,89,146,189,306,310,470,602,764],$Vu4=[1,1139],$Vv4=[1,1138],$Vw4=[1,1137],$Vx4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,230,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,297,300,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,343,356,368,369,373,374,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$Vy4=[1,1153],$Vz4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,118,122,124,128,129,130,131,132,134,135,137,139,140,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,313,314,315,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$VA4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,118,122,124,128,129,130,131,132,134,135,137,139,140,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,313,315,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$VB4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,118,122,124,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,313,314,315,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$VC4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,118,122,124,128,129,130,131,132,134,135,137,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,313,314,315,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$VD4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,118,122,124,128,129,130,131,132,134,135,137,139,140,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,314,320,321,322,323,324,325,326,330,331,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$VE4=[2,406],$VF4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,107,118,122,128,129,130,131,132,134,135,137,143,145,146,148,149,150,152,156,162,164,166,168,169,170,171,172,173,175,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,314,330,331,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$VG4=[2,285],$VH4=[2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,426,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$VI4=[10,78,306,310,602,764],$VJ4=[1,1189],$VK4=[10,77,78,143,145,152,181,302,306,310,420,424,602,764],$VL4=[10,74,78,306,308,310,464,602,764],$VM4=[1,1200],$VN4=[10,72,78,118,128,162,168,169,232,245,247,306,310,602,764],$VO4=[10,72,74,78,93,98,118,128,162,168,169,183,198,232,245,247,306,310,602,764],$VP4=[2,4,5,72,76,77,78,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,185,187,280,281,282,283,284,285,286,287,288,420,424],$VQ4=[2,4,5,72,74,76,77,78,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,185,187,280,281,282,283,284,285,286,287,288,420,424],$VR4=[2,1085],$VS4=[2,4,5,72,74,76,77,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,185,187,280,281,282,283,284,285,286,287,288,420,424],$VT4=[1,1252],$VU4=[10,74,78,128,306,308,310,464,602,764],$VV4=[115,116,124],$VW4=[2,584],$VX4=[1,1280],$VY4=[76,139],$VZ4=[2,724],$V_4=[1,1297],$V$4=[1,1298],$V05=[2,4,5,10,53,72,76,89,124,146,156,189,230,266,267,290,306,310,335,338,339,396,400,401,404,406,408,409,417,418,434,436,437,439,440,441,442,443,447,448,451,452,505,507,508,517,602,764],$V15=[2,330],$V25=[1,1322],$V35=[1,1336],$V45=[1,1338],$V55=[2,487],$V65=[74,78],$V75=[10,306,308,310,464,602,764],$V85=[10,72,78,118,162,168,169,232,245,247,306,310,602,764],$V95=[1,1354],$Va5=[1,1358],$Vb5=[1,1359],$Vc5=[1,1361],$Vd5=[1,1362],$Ve5=[1,1363],$Vf5=[1,1364],$Vg5=[1,1365],$Vh5=[1,1366],$Vi5=[1,1367],$Vj5=[1,1368],$Vk5=[10,72,74,78,93,98,118,128,162,168,169,206,208,222,223,224,225,226,227,228,229,232,245,247,306,310,602,764],$Vl5=[1,1393],$Vm5=[10,72,78,118,162,168,169,245,247,306,310,602,764],$Vn5=[10,72,78,93,98,118,128,162,168,169,206,208,222,223,224,225,226,227,228,229,232,245,247,306,310,602,764],$Vo5=[1,1490],$Vp5=[1,1492],$Vq5=[2,4,5,77,143,145,152,156,181,290,291,292,293,302,420,424],$Vr5=[1,1506],$Vs5=[10,72,74,78,162,168,169,245,247,306,310,602,764],$Vt5=[1,1524],$Vu5=[1,1526],$Vv5=[1,1527],$Vw5=[1,1523],$Vx5=[1,1522],$Vy5=[1,1521],$Vz5=[1,1528],$VA5=[1,1518],$VB5=[1,1519],$VC5=[1,1520],$VD5=[1,1545],$VE5=[2,4,5,10,53,72,89,124,146,156,189,266,267,290,306,310,335,338,339,396,400,401,404,406,408,409,417,418,434,436,437,439,440,441,442,443,447,448,451,452,505,507,508,517,602,764],$VF5=[1,1556],$VG5=[1,1564],$VH5=[1,1563],$VI5=[10,72,78,162,168,169,245,247,306,310,602,764],$VJ5=[10,72,78,93,98,118,128,162,168,169,206,208,222,223,224,225,226,227,228,229,230,231,232,245,247,306,310,602,764],$VK5=[2,4,5,10,72,78,93,98,118,128,162,168,169,206,208,222,223,224,225,226,227,228,229,230,231,232,245,247,306,310,602,764],$VL5=[1,1621],$VM5=[1,1623],$VN5=[1,1620],$VO5=[1,1622],$VP5=[187,193,368,369,370,373],$VQ5=[2,515],$VR5=[1,1628],$VS5=[1,1647],$VT5=[10,72,78,162,168,169,306,310,602,764],$VU5=[1,1657],$VV5=[1,1658],$VW5=[1,1659],$VX5=[1,1678],$VY5=[4,10,243,306,310,343,356,602,764],$VZ5=[1,1726],$V_5=[10,72,74,78,118,162,168,169,239,245,247,306,310,602,764],$V$5=[2,4,5,77],$V06=[1,1820],$V16=[1,1832],$V26=[1,1851],$V36=[10,72,78,162,168,169,306,310,415,602,764],$V46=[10,74,78,230,306,310,602,764];\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"Literal\":3,\"LITERAL\":4,\"BRALITERAL\":5,\"NonReserved\":6,\"LiteralWithSpaces\":7,\"main\":8,\"Statements\":9,\"EOF\":10,\"Statements_group0\":11,\"AStatement\":12,\"ExplainStatement\":13,\"EXPLAIN\":14,\"QUERY\":15,\"PLAN\":16,\"Statement\":17,\"AlterTable\":18,\"AttachDatabase\":19,\"Call\":20,\"CreateDatabase\":21,\"CreateIndex\":22,\"CreateGraph\":23,\"CreateTable\":24,\"CreateView\":25,\"CreateEdge\":26,\"CreateVertex\":27,\"Declare\":28,\"Delete\":29,\"DetachDatabase\":30,\"DropDatabase\":31,\"DropIndex\":32,\"DropTable\":33,\"DropView\":34,\"If\":35,\"Insert\":36,\"Merge\":37,\"Reindex\":38,\"RenameTable\":39,\"Select\":40,\"ShowCreateTable\":41,\"ShowColumns\":42,\"ShowDatabases\":43,\"ShowIndex\":44,\"ShowTables\":45,\"TruncateTable\":46,\"WithSelect\":47,\"CreateTrigger\":48,\"DropTrigger\":49,\"BeginTransaction\":50,\"CommitTransaction\":51,\"RollbackTransaction\":52,\"EndTransaction\":53,\"UseDatabase\":54,\"Update\":55,\"JavaScript\":56,\"Source\":57,\"Assert\":58,\"While\":59,\"Continue\":60,\"Break\":61,\"BeginEnd\":62,\"Print\":63,\"Require\":64,\"SetVariable\":65,\"ExpressionStatement\":66,\"AddRule\":67,\"Query\":68,\"Echo\":69,\"CreateFunction\":70,\"CreateAggregate\":71,\"WITH\":72,\"WithTablesList\":73,\"COMMA\":74,\"WithTable\":75,\"AS\":76,\"LPAR\":77,\"RPAR\":78,\"SelectClause\":79,\"Select_option0\":80,\"IntoClause\":81,\"FromClause\":82,\"Select_option1\":83,\"WhereClause\":84,\"GroupClause\":85,\"OrderClause\":86,\"LimitClause\":87,\"UnionClause\":88,\"SEARCH\":89,\"Select_repetition0\":90,\"Select_option2\":91,\"PivotClause\":92,\"PIVOT\":93,\"Expression\":94,\"FOR\":95,\"PivotClause_option0\":96,\"PivotClause_option1\":97,\"UNPIVOT\":98,\"IN\":99,\"ColumnsList\":100,\"PivotClause_option2\":101,\"PivotClause2\":102,\"AsList\":103,\"AsLiteral\":104,\"AsPart\":105,\"RemoveClause\":106,\"REMOVE\":107,\"RemoveClause_option0\":108,\"RemoveColumnsList\":109,\"RemoveColumn\":110,\"Column\":111,\"LIKE\":112,\"StringValue\":113,\"ArrowDot\":114,\"ARROW\":115,\"DOT\":116,\"SearchSelector\":117,\"ORDER\":118,\"BY\":119,\"OrderExpressionsList\":120,\"SearchSelector_option0\":121,\"DOTDOT\":122,\"CARET\":123,\"EQ\":124,\"SearchSelector_repetition_plus0\":125,\"SearchSelector_repetition_plus1\":126,\"SearchSelector_option1\":127,\"WHERE\":128,\"OF\":129,\"CLASS\":130,\"NUMBER\":131,\"STRING\":132,\"SLASH\":133,\"VERTEX\":134,\"EDGE\":135,\"EXCLAMATION\":136,\"SHARP\":137,\"MODULO\":138,\"GT\":139,\"LT\":140,\"GTGT\":141,\"LTLT\":142,\"DOLLAR\":143,\"Json\":144,\"AT\":145,\"SET\":146,\"SetColumnsList\":147,\"TO\":148,\"VALUE\":149,\"ROW\":150,\"ExprList\":151,\"COLON\":152,\"PlusStar\":153,\"NOT\":154,\"SearchSelector_repetition2\":155,\"IF\":156,\"SearchSelector_repetition3\":157,\"Aggregator\":158,\"SearchSelector_repetition4\":159,\"SearchSelector_group0\":160,\"SearchSelector_repetition5\":161,\"UNION\":162,\"SearchSelectorList\":163,\"ALL\":164,\"SearchSelector_repetition6\":165,\"ANY\":166,\"SearchSelector_repetition7\":167,\"INTERSECT\":168,\"EXCEPT\":169,\"AND\":170,\"OR\":171,\"PATH\":172,\"RETURN\":173,\"ResultColumns\":174,\"REPEAT\":175,\"SearchSelector_repetition8\":176,\"SearchSelectorList_repetition0\":177,\"SearchSelectorList_repetition1\":178,\"PLUS\":179,\"STAR\":180,\"QUESTION\":181,\"SearchFrom\":182,\"FROM\":183,\"SelectModifier\":184,\"DISTINCT\":185,\"TopClause\":186,\"UNIQUE\":187,\"SelectClause_option0\":188,\"SELECT\":189,\"COLUMN\":190,\"MATRIX\":191,\"TEXTSTRING\":192,\"INDEX\":193,\"RECORDSET\":194,\"TOP\":195,\"NumValue\":196,\"TopClause_option0\":197,\"INTO\":198,\"Table\":199,\"FuncValue\":200,\"ParamValue\":201,\"VarValue\":202,\"FromTablesList\":203,\"JoinTablesList\":204,\"ApplyClause\":205,\"CROSS\":206,\"APPLY\":207,\"OUTER\":208,\"FromTable\":209,\"FromTable_option0\":210,\"FromTable_option1\":211,\"INDEXED\":212,\"INSERTED\":213,\"FromString\":214,\"JoinTable\":215,\"JoinMode\":216,\"JoinTableAs\":217,\"OnClause\":218,\"JoinTableAs_option0\":219,\"JoinTableAs_option1\":220,\"JoinModeMode\":221,\"NATURAL\":222,\"JOIN\":223,\"INNER\":224,\"LEFT\":225,\"RIGHT\":226,\"FULL\":227,\"SEMI\":228,\"ANTI\":229,\"ON\":230,\"USING\":231,\"GROUP\":232,\"GroupExpressionsList\":233,\"HavingClause\":234,\"GroupExpression\":235,\"GROUPING\":236,\"ROLLUP\":237,\"CUBE\":238,\"HAVING\":239,\"CORRESPONDING\":240,\"OrderExpression\":241,\"DIRECTION\":242,\"COLLATE\":243,\"NOCASE\":244,\"LIMIT\":245,\"OffsetClause\":246,\"OFFSET\":247,\"LimitClause_option0\":248,\"FETCH\":249,\"LimitClause_option1\":250,\"LimitClause_option2\":251,\"LimitClause_option3\":252,\"ResultColumn\":253,\"Star\":254,\"AggrValue\":255,\"Op\":256,\"LogicValue\":257,\"NullValue\":258,\"ExistsValue\":259,\"CaseValue\":260,\"CastClause\":261,\"ArrayValue\":262,\"NewClause\":263,\"Expression_group0\":264,\"CURRENT_TIMESTAMP\":265,\"JAVASCRIPT\":266,\"CREATE\":267,\"FUNCTION\":268,\"AGGREGATE\":269,\"NEW\":270,\"CAST\":271,\"ColumnType\":272,\"CONVERT\":273,\"PrimitiveValue\":274,\"OverClause\":275,\"OVER\":276,\"OverPartitionClause\":277,\"OverOrderByClause\":278,\"PARTITION\":279,\"SUM\":280,\"COUNT\":281,\"MIN\":282,\"MAX\":283,\"AVG\":284,\"FIRST\":285,\"LAST\":286,\"AGGR\":287,\"ARRAY\":288,\"FuncValue_option0\":289,\"REPLACE\":290,\"DATEADD\":291,\"DATEDIFF\":292,\"INTERVAL\":293,\"TRUE\":294,\"FALSE\":295,\"NSTRING\":296,\"NULL\":297,\"EXISTS\":298,\"ARRAYLBRA\":299,\"RBRA\":300,\"ParamValue_group0\":301,\"BRAQUESTION\":302,\"CASE\":303,\"WhensList\":304,\"ElseClause\":305,\"END\":306,\"When\":307,\"WHEN\":308,\"THEN\":309,\"ELSE\":310,\"REGEXP\":311,\"TILDA\":312,\"GLOB\":313,\"ESCAPE\":314,\"NOT_LIKE\":315,\"BARBAR\":316,\"MINUS\":317,\"AMPERSAND\":318,\"BAR\":319,\"GE\":320,\"LE\":321,\"EQEQ\":322,\"EQEQEQ\":323,\"NE\":324,\"NEEQEQ\":325,\"NEEQEQEQ\":326,\"CondOp\":327,\"AllSome\":328,\"ColFunc\":329,\"BETWEEN\":330,\"NOT_BETWEEN\":331,\"IS\":332,\"DOUBLECOLON\":333,\"SOME\":334,\"UPDATE\":335,\"SetColumn\":336,\"SetColumn_group0\":337,\"DELETE\":338,\"INSERT\":339,\"Into\":340,\"Values\":341,\"ValuesListsList\":342,\"DEFAULT\":343,\"VALUES\":344,\"ValuesList\":345,\"Value\":346,\"DateValue\":347,\"TemporaryClause\":348,\"TableClass\":349,\"IfNotExists\":350,\"CreateTableDefClause\":351,\"CreateTableOptionsClause\":352,\"TABLE\":353,\"CreateTableOptions\":354,\"CreateTableOption\":355,\"IDENTITY\":356,\"TEMP\":357,\"ColumnDefsList\":358,\"ConstraintsList\":359,\"Constraint\":360,\"ConstraintName\":361,\"PrimaryKey\":362,\"ForeignKey\":363,\"UniqueKey\":364,\"IndexKey\":365,\"Check\":366,\"CONSTRAINT\":367,\"CHECK\":368,\"PRIMARY\":369,\"KEY\":370,\"PrimaryKey_option0\":371,\"ColsList\":372,\"FOREIGN\":373,\"REFERENCES\":374,\"ForeignKey_option0\":375,\"OnForeignKeyClause\":376,\"ParColsList\":377,\"OnDeleteClause\":378,\"OnUpdateClause\":379,\"NO\":380,\"ACTION\":381,\"UniqueKey_option0\":382,\"UniqueKey_option1\":383,\"ColumnDef\":384,\"ColumnConstraintsClause\":385,\"ColumnConstraints\":386,\"SingularColumnType\":387,\"NumberMax\":388,\"ENUM\":389,\"MAXNUM\":390,\"ColumnConstraintsList\":391,\"ColumnConstraint\":392,\"ParLiteral\":393,\"ColumnConstraint_option0\":394,\"ColumnConstraint_option1\":395,\"DROP\":396,\"DropTable_group0\":397,\"IfExists\":398,\"TablesList\":399,\"ALTER\":400,\"RENAME\":401,\"ADD\":402,\"MODIFY\":403,\"ATTACH\":404,\"DATABASE\":405,\"DETACH\":406,\"AsClause\":407,\"USE\":408,\"SHOW\":409,\"VIEW\":410,\"CreateView_option0\":411,\"CreateView_option1\":412,\"SubqueryRestriction\":413,\"READ\":414,\"ONLY\":415,\"OPTION\":416,\"SOURCE\":417,\"ASSERT\":418,\"JsonObject\":419,\"ATLBRA\":420,\"JsonArray\":421,\"JsonValue\":422,\"JsonPrimitiveValue\":423,\"LCUR\":424,\"JsonPropertiesList\":425,\"RCUR\":426,\"JsonElementsList\":427,\"JsonProperty\":428,\"OnOff\":429,\"SetPropsList\":430,\"AtDollar\":431,\"SetProp\":432,\"OFF\":433,\"COMMIT\":434,\"TRANSACTION\":435,\"ROLLBACK\":436,\"BEGIN\":437,\"ElseStatement\":438,\"WHILE\":439,\"CONTINUE\":440,\"BREAK\":441,\"PRINT\":442,\"REQUIRE\":443,\"StringValuesList\":444,\"PluginsList\":445,\"Plugin\":446,\"ECHO\":447,\"DECLARE\":448,\"DeclaresList\":449,\"DeclareItem\":450,\"TRUNCATE\":451,\"MERGE\":452,\"MergeInto\":453,\"MergeUsing\":454,\"MergeOn\":455,\"MergeMatchedList\":456,\"OutputClause\":457,\"MergeMatched\":458,\"MergeNotMatched\":459,\"MATCHED\":460,\"MergeMatchedAction\":461,\"MergeNotMatchedAction\":462,\"TARGET\":463,\"OUTPUT\":464,\"CreateVertex_option0\":465,\"CreateVertex_option1\":466,\"CreateVertex_option2\":467,\"CreateVertexSet\":468,\"SharpValue\":469,\"CONTENT\":470,\"CreateEdge_option0\":471,\"GRAPH\":472,\"GraphList\":473,\"GraphVertexEdge\":474,\"GraphElement\":475,\"GraphVertexEdge_option0\":476,\"GraphVertexEdge_option1\":477,\"GraphElementVar\":478,\"GraphVertexEdge_option2\":479,\"GraphVertexEdge_option3\":480,\"GraphVertexEdge_option4\":481,\"GraphVar\":482,\"GraphAsClause\":483,\"GraphAtClause\":484,\"GraphElement2\":485,\"GraphElement2_option0\":486,\"GraphElement2_option1\":487,\"GraphElement2_option2\":488,\"GraphElement2_option3\":489,\"GraphElement_option0\":490,\"GraphElement_option1\":491,\"GraphElement_option2\":492,\"SharpLiteral\":493,\"GraphElement_option3\":494,\"GraphElement_option4\":495,\"GraphElement_option5\":496,\"ColonLiteral\":497,\"DeleteVertex\":498,\"DeleteVertex_option0\":499,\"DeleteEdge\":500,\"DeleteEdge_option0\":501,\"DeleteEdge_option1\":502,\"DeleteEdge_option2\":503,\"Term\":504,\"COLONDASH\":505,\"TermsList\":506,\"QUESTIONDASH\":507,\"CALL\":508,\"TRIGGER\":509,\"BeforeAfter\":510,\"InsertDeleteUpdate\":511,\"CreateTrigger_option0\":512,\"CreateTrigger_option1\":513,\"BEFORE\":514,\"AFTER\":515,\"INSTEAD\":516,\"REINDEX\":517,\"A\":518,\"ABSENT\":519,\"ABSOLUTE\":520,\"ACCORDING\":521,\"ADA\":522,\"ADMIN\":523,\"ALWAYS\":524,\"ASC\":525,\"ASSERTION\":526,\"ASSIGNMENT\":527,\"ATTRIBUTE\":528,\"ATTRIBUTES\":529,\"BASE64\":530,\"BERNOULLI\":531,\"BLOCKED\":532,\"BOM\":533,\"BREADTH\":534,\"C\":535,\"CASCADE\":536,\"CATALOG\":537,\"CATALOG_NAME\":538,\"CHAIN\":539,\"CHARACTERISTICS\":540,\"CHARACTERS\":541,\"CHARACTER_SET_CATALOG\":542,\"CHARACTER_SET_NAME\":543,\"CHARACTER_SET_SCHEMA\":544,\"CLASS_ORIGIN\":545,\"COBOL\":546,\"COLLATION\":547,\"COLLATION_CATALOG\":548,\"COLLATION_NAME\":549,\"COLLATION_SCHEMA\":550,\"COLUMNS\":551,\"COLUMN_NAME\":552,\"COMMAND_FUNCTION\":553,\"COMMAND_FUNCTION_CODE\":554,\"COMMITTED\":555,\"CONDITION_NUMBER\":556,\"CONNECTION\":557,\"CONNECTION_NAME\":558,\"CONSTRAINTS\":559,\"CONSTRAINT_CATALOG\":560,\"CONSTRAINT_NAME\":561,\"CONSTRAINT_SCHEMA\":562,\"CONSTRUCTOR\":563,\"CONTROL\":564,\"CURSOR_NAME\":565,\"DATA\":566,\"DATETIME_INTERVAL_CODE\":567,\"DATETIME_INTERVAL_PRECISION\":568,\"DB\":569,\"DEFAULTS\":570,\"DEFERRABLE\":571,\"DEFERRED\":572,\"DEFINED\":573,\"DEFINER\":574,\"DEGREE\":575,\"DEPTH\":576,\"DERIVED\":577,\"DESC\":578,\"DESCRIPTOR\":579,\"DIAGNOSTICS\":580,\"DISPATCH\":581,\"DOCUMENT\":582,\"DOMAIN\":583,\"DYNAMIC_FUNCTION\":584,\"DYNAMIC_FUNCTION_CODE\":585,\"EMPTY\":586,\"ENCODING\":587,\"ENFORCED\":588,\"EXCLUDE\":589,\"EXCLUDING\":590,\"EXPRESSION\":591,\"FILE\":592,\"FINAL\":593,\"FLAG\":594,\"FOLLOWING\":595,\"FORTRAN\":596,\"FOUND\":597,\"FS\":598,\"G\":599,\"GENERAL\":600,\"GENERATED\":601,\"GO\":602,\"GOTO\":603,\"GRANTED\":604,\"HEX\":605,\"HIERARCHY\":606,\"ID\":607,\"IGNORE\":608,\"IMMEDIATE\":609,\"IMMEDIATELY\":610,\"IMPLEMENTATION\":611,\"INCLUDING\":612,\"INCREMENT\":613,\"INDENT\":614,\"INITIALLY\":615,\"INPUT\":616,\"INSTANCE\":617,\"INSTANTIABLE\":618,\"INTEGRITY\":619,\"INVOKER\":620,\"ISOLATION\":621,\"K\":622,\"KEY_MEMBER\":623,\"KEY_TYPE\":624,\"LENGTH\":625,\"LEVEL\":626,\"LIBRARY\":627,\"LINK\":628,\"LOCATION\":629,\"LOCATOR\":630,\"M\":631,\"MAP\":632,\"MAPPING\":633,\"MAXVALUE\":634,\"MESSAGE_LENGTH\":635,\"MESSAGE_OCTET_LENGTH\":636,\"MESSAGE_TEXT\":637,\"MINVALUE\":638,\"MORE\":639,\"MUMPS\":640,\"NAME\":641,\"NAMES\":642,\"NAMESPACE\":643,\"NESTING\":644,\"NEXT\":645,\"NFC\":646,\"NFD\":647,\"NFKC\":648,\"NFKD\":649,\"NIL\":650,\"NORMALIZED\":651,\"NULLABLE\":652,\"NULLS\":653,\"OBJECT\":654,\"OCTETS\":655,\"OPTIONS\":656,\"ORDERING\":657,\"ORDINALITY\":658,\"OTHERS\":659,\"OVERRIDING\":660,\"P\":661,\"PAD\":662,\"PARAMETER_MODE\":663,\"PARAMETER_NAME\":664,\"PARAMETER_ORDINAL_POSITION\":665,\"PARAMETER_SPECIFIC_CATALOG\":666,\"PARAMETER_SPECIFIC_NAME\":667,\"PARAMETER_SPECIFIC_SCHEMA\":668,\"PARTIAL\":669,\"PASCAL\":670,\"PASSING\":671,\"PASSTHROUGH\":672,\"PERMISSION\":673,\"PLACING\":674,\"PLI\":675,\"PRECEDING\":676,\"PRESERVE\":677,\"PRIOR\":678,\"PRIVILEGES\":679,\"PUBLIC\":680,\"RECOVERY\":681,\"RELATIVE\":682,\"REPEATABLE\":683,\"REQUIRING\":684,\"RESPECT\":685,\"RESTART\":686,\"RESTORE\":687,\"RESTRICT\":688,\"RETURNED_CARDINALITY\":689,\"RETURNED_LENGTH\":690,\"RETURNED_OCTET_LENGTH\":691,\"RETURNED_SQLSTATE\":692,\"RETURNING\":693,\"ROLE\":694,\"ROUTINE\":695,\"ROUTINE_CATALOG\":696,\"ROUTINE_NAME\":697,\"ROUTINE_SCHEMA\":698,\"ROW_COUNT\":699,\"SCALE\":700,\"SCHEMA\":701,\"SCHEMA_NAME\":702,\"SCOPE_CATALOG\":703,\"SCOPE_NAME\":704,\"SCOPE_SCHEMA\":705,\"SECTION\":706,\"SECURITY\":707,\"SELECTIVE\":708,\"SELF\":709,\"SEQUENCE\":710,\"SERIALIZABLE\":711,\"SERVER\":712,\"SERVER_NAME\":713,\"SESSION\":714,\"SETS\":715,\"SIMPLE\":716,\"SIZE\":717,\"SPACE\":718,\"SPECIFIC_NAME\":719,\"STANDALONE\":720,\"STATE\":721,\"STATEMENT\":722,\"STRIP\":723,\"STRUCTURE\":724,\"STYLE\":725,\"SUBCLASS_ORIGIN\":726,\"T\":727,\"TABLE_NAME\":728,\"TEMPORARY\":729,\"TIES\":730,\"TOKEN\":731,\"TOP_LEVEL_COUNT\":732,\"TRANSACTIONS_COMMITTED\":733,\"TRANSACTIONS_ROLLED_BACK\":734,\"TRANSACTION_ACTIVE\":735,\"TRANSFORM\":736,\"TRANSFORMS\":737,\"TRIGGER_CATALOG\":738,\"TRIGGER_NAME\":739,\"TRIGGER_SCHEMA\":740,\"TYPE\":741,\"UNBOUNDED\":742,\"UNCOMMITTED\":743,\"UNDER\":744,\"UNLINK\":745,\"UNNAMED\":746,\"UNTYPED\":747,\"URI\":748,\"USAGE\":749,\"USER_DEFINED_TYPE_CATALOG\":750,\"USER_DEFINED_TYPE_CODE\":751,\"USER_DEFINED_TYPE_NAME\":752,\"USER_DEFINED_TYPE_SCHEMA\":753,\"VALID\":754,\"VERSION\":755,\"WHITESPACE\":756,\"WORK\":757,\"WRAPPER\":758,\"WRITE\":759,\"XMLDECLARATION\":760,\"XMLSCHEMA\":761,\"YES\":762,\"ZONE\":763,\"SEMICOLON\":764,\"PERCENT\":765,\"ROWS\":766,\"FuncValue_option0_group0\":767,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",4:\"LITERAL\",5:\"BRALITERAL\",10:\"EOF\",14:\"EXPLAIN\",15:\"QUERY\",16:\"PLAN\",53:\"EndTransaction\",72:\"WITH\",74:\"COMMA\",76:\"AS\",77:\"LPAR\",78:\"RPAR\",89:\"SEARCH\",93:\"PIVOT\",95:\"FOR\",98:\"UNPIVOT\",99:\"IN\",107:\"REMOVE\",112:\"LIKE\",115:\"ARROW\",116:\"DOT\",118:\"ORDER\",119:\"BY\",122:\"DOTDOT\",123:\"CARET\",124:\"EQ\",128:\"WHERE\",129:\"OF\",130:\"CLASS\",131:\"NUMBER\",132:\"STRING\",133:\"SLASH\",134:\"VERTEX\",135:\"EDGE\",136:\"EXCLAMATION\",137:\"SHARP\",138:\"MODULO\",139:\"GT\",140:\"LT\",141:\"GTGT\",142:\"LTLT\",143:\"DOLLAR\",145:\"AT\",146:\"SET\",148:\"TO\",149:\"VALUE\",150:\"ROW\",152:\"COLON\",154:\"NOT\",156:\"IF\",162:\"UNION\",164:\"ALL\",166:\"ANY\",168:\"INTERSECT\",169:\"EXCEPT\",170:\"AND\",171:\"OR\",172:\"PATH\",173:\"RETURN\",175:\"REPEAT\",179:\"PLUS\",180:\"STAR\",181:\"QUESTION\",183:\"FROM\",185:\"DISTINCT\",187:\"UNIQUE\",189:\"SELECT\",190:\"COLUMN\",191:\"MATRIX\",192:\"TEXTSTRING\",193:\"INDEX\",194:\"RECORDSET\",195:\"TOP\",198:\"INTO\",206:\"CROSS\",207:\"APPLY\",208:\"OUTER\",212:\"INDEXED\",213:\"INSERTED\",222:\"NATURAL\",223:\"JOIN\",224:\"INNER\",225:\"LEFT\",226:\"RIGHT\",227:\"FULL\",228:\"SEMI\",229:\"ANTI\",230:\"ON\",231:\"USING\",232:\"GROUP\",236:\"GROUPING\",237:\"ROLLUP\",238:\"CUBE\",239:\"HAVING\",240:\"CORRESPONDING\",242:\"DIRECTION\",243:\"COLLATE\",244:\"NOCASE\",245:\"LIMIT\",247:\"OFFSET\",249:\"FETCH\",265:\"CURRENT_TIMESTAMP\",266:\"JAVASCRIPT\",267:\"CREATE\",268:\"FUNCTION\",269:\"AGGREGATE\",270:\"NEW\",271:\"CAST\",273:\"CONVERT\",276:\"OVER\",279:\"PARTITION\",280:\"SUM\",281:\"COUNT\",282:\"MIN\",283:\"MAX\",284:\"AVG\",285:\"FIRST\",286:\"LAST\",287:\"AGGR\",288:\"ARRAY\",290:\"REPLACE\",291:\"DATEADD\",292:\"DATEDIFF\",293:\"INTERVAL\",294:\"TRUE\",295:\"FALSE\",296:\"NSTRING\",297:\"NULL\",298:\"EXISTS\",299:\"ARRAYLBRA\",300:\"RBRA\",302:\"BRAQUESTION\",303:\"CASE\",306:\"END\",308:\"WHEN\",309:\"THEN\",310:\"ELSE\",311:\"REGEXP\",312:\"TILDA\",313:\"GLOB\",314:\"ESCAPE\",315:\"NOT_LIKE\",316:\"BARBAR\",317:\"MINUS\",318:\"AMPERSAND\",319:\"BAR\",320:\"GE\",321:\"LE\",322:\"EQEQ\",323:\"EQEQEQ\",324:\"NE\",325:\"NEEQEQ\",326:\"NEEQEQEQ\",330:\"BETWEEN\",331:\"NOT_BETWEEN\",332:\"IS\",333:\"DOUBLECOLON\",334:\"SOME\",335:\"UPDATE\",338:\"DELETE\",339:\"INSERT\",343:\"DEFAULT\",344:\"VALUES\",347:\"DateValue\",353:\"TABLE\",356:\"IDENTITY\",357:\"TEMP\",367:\"CONSTRAINT\",368:\"CHECK\",369:\"PRIMARY\",370:\"KEY\",373:\"FOREIGN\",374:\"REFERENCES\",380:\"NO\",381:\"ACTION\",386:\"ColumnConstraints\",389:\"ENUM\",390:\"MAXNUM\",396:\"DROP\",400:\"ALTER\",401:\"RENAME\",402:\"ADD\",403:\"MODIFY\",404:\"ATTACH\",405:\"DATABASE\",406:\"DETACH\",408:\"USE\",409:\"SHOW\",410:\"VIEW\",414:\"READ\",415:\"ONLY\",416:\"OPTION\",417:\"SOURCE\",418:\"ASSERT\",420:\"ATLBRA\",424:\"LCUR\",426:\"RCUR\",433:\"OFF\",434:\"COMMIT\",435:\"TRANSACTION\",436:\"ROLLBACK\",437:\"BEGIN\",439:\"WHILE\",440:\"CONTINUE\",441:\"BREAK\",442:\"PRINT\",443:\"REQUIRE\",447:\"ECHO\",448:\"DECLARE\",451:\"TRUNCATE\",452:\"MERGE\",460:\"MATCHED\",463:\"TARGET\",464:\"OUTPUT\",470:\"CONTENT\",472:\"GRAPH\",505:\"COLONDASH\",507:\"QUESTIONDASH\",508:\"CALL\",509:\"TRIGGER\",514:\"BEFORE\",515:\"AFTER\",516:\"INSTEAD\",517:\"REINDEX\",518:\"A\",519:\"ABSENT\",520:\"ABSOLUTE\",521:\"ACCORDING\",522:\"ADA\",523:\"ADMIN\",524:\"ALWAYS\",525:\"ASC\",526:\"ASSERTION\",527:\"ASSIGNMENT\",528:\"ATTRIBUTE\",529:\"ATTRIBUTES\",530:\"BASE64\",531:\"BERNOULLI\",532:\"BLOCKED\",533:\"BOM\",534:\"BREADTH\",535:\"C\",536:\"CASCADE\",537:\"CATALOG\",538:\"CATALOG_NAME\",539:\"CHAIN\",540:\"CHARACTERISTICS\",541:\"CHARACTERS\",542:\"CHARACTER_SET_CATALOG\",543:\"CHARACTER_SET_NAME\",544:\"CHARACTER_SET_SCHEMA\",545:\"CLASS_ORIGIN\",546:\"COBOL\",547:\"COLLATION\",548:\"COLLATION_CATALOG\",549:\"COLLATION_NAME\",550:\"COLLATION_SCHEMA\",551:\"COLUMNS\",552:\"COLUMN_NAME\",553:\"COMMAND_FUNCTION\",554:\"COMMAND_FUNCTION_CODE\",555:\"COMMITTED\",556:\"CONDITION_NUMBER\",557:\"CONNECTION\",558:\"CONNECTION_NAME\",559:\"CONSTRAINTS\",560:\"CONSTRAINT_CATALOG\",561:\"CONSTRAINT_NAME\",562:\"CONSTRAINT_SCHEMA\",563:\"CONSTRUCTOR\",564:\"CONTROL\",565:\"CURSOR_NAME\",566:\"DATA\",567:\"DATETIME_INTERVAL_CODE\",568:\"DATETIME_INTERVAL_PRECISION\",569:\"DB\",570:\"DEFAULTS\",571:\"DEFERRABLE\",572:\"DEFERRED\",573:\"DEFINED\",574:\"DEFINER\",575:\"DEGREE\",576:\"DEPTH\",577:\"DERIVED\",578:\"DESC\",579:\"DESCRIPTOR\",580:\"DIAGNOSTICS\",581:\"DISPATCH\",582:\"DOCUMENT\",583:\"DOMAIN\",584:\"DYNAMIC_FUNCTION\",585:\"DYNAMIC_FUNCTION_CODE\",586:\"EMPTY\",587:\"ENCODING\",588:\"ENFORCED\",589:\"EXCLUDE\",590:\"EXCLUDING\",591:\"EXPRESSION\",592:\"FILE\",593:\"FINAL\",594:\"FLAG\",595:\"FOLLOWING\",596:\"FORTRAN\",597:\"FOUND\",598:\"FS\",599:\"G\",600:\"GENERAL\",601:\"GENERATED\",602:\"GO\",603:\"GOTO\",604:\"GRANTED\",605:\"HEX\",606:\"HIERARCHY\",607:\"ID\",608:\"IGNORE\",609:\"IMMEDIATE\",610:\"IMMEDIATELY\",611:\"IMPLEMENTATION\",612:\"INCLUDING\",613:\"INCREMENT\",614:\"INDENT\",615:\"INITIALLY\",616:\"INPUT\",617:\"INSTANCE\",618:\"INSTANTIABLE\",619:\"INTEGRITY\",620:\"INVOKER\",621:\"ISOLATION\",622:\"K\",623:\"KEY_MEMBER\",624:\"KEY_TYPE\",625:\"LENGTH\",626:\"LEVEL\",627:\"LIBRARY\",628:\"LINK\",629:\"LOCATION\",630:\"LOCATOR\",631:\"M\",632:\"MAP\",633:\"MAPPING\",634:\"MAXVALUE\",635:\"MESSAGE_LENGTH\",636:\"MESSAGE_OCTET_LENGTH\",637:\"MESSAGE_TEXT\",638:\"MINVALUE\",639:\"MORE\",640:\"MUMPS\",641:\"NAME\",642:\"NAMES\",643:\"NAMESPACE\",644:\"NESTING\",645:\"NEXT\",646:\"NFC\",647:\"NFD\",648:\"NFKC\",649:\"NFKD\",650:\"NIL\",651:\"NORMALIZED\",652:\"NULLABLE\",653:\"NULLS\",654:\"OBJECT\",655:\"OCTETS\",656:\"OPTIONS\",657:\"ORDERING\",658:\"ORDINALITY\",659:\"OTHERS\",660:\"OVERRIDING\",661:\"P\",662:\"PAD\",663:\"PARAMETER_MODE\",664:\"PARAMETER_NAME\",665:\"PARAMETER_ORDINAL_POSITION\",666:\"PARAMETER_SPECIFIC_CATALOG\",667:\"PARAMETER_SPECIFIC_NAME\",668:\"PARAMETER_SPECIFIC_SCHEMA\",669:\"PARTIAL\",670:\"PASCAL\",671:\"PASSING\",672:\"PASSTHROUGH\",673:\"PERMISSION\",674:\"PLACING\",675:\"PLI\",676:\"PRECEDING\",677:\"PRESERVE\",678:\"PRIOR\",679:\"PRIVILEGES\",680:\"PUBLIC\",681:\"RECOVERY\",682:\"RELATIVE\",683:\"REPEATABLE\",684:\"REQUIRING\",685:\"RESPECT\",686:\"RESTART\",687:\"RESTORE\",688:\"RESTRICT\",689:\"RETURNED_CARDINALITY\",690:\"RETURNED_LENGTH\",691:\"RETURNED_OCTET_LENGTH\",692:\"RETURNED_SQLSTATE\",693:\"RETURNING\",694:\"ROLE\",695:\"ROUTINE\",696:\"ROUTINE_CATALOG\",697:\"ROUTINE_NAME\",698:\"ROUTINE_SCHEMA\",699:\"ROW_COUNT\",700:\"SCALE\",701:\"SCHEMA\",702:\"SCHEMA_NAME\",703:\"SCOPE_CATALOG\",704:\"SCOPE_NAME\",705:\"SCOPE_SCHEMA\",706:\"SECTION\",707:\"SECURITY\",708:\"SELECTIVE\",709:\"SELF\",710:\"SEQUENCE\",711:\"SERIALIZABLE\",712:\"SERVER\",713:\"SERVER_NAME\",714:\"SESSION\",715:\"SETS\",716:\"SIMPLE\",717:\"SIZE\",718:\"SPACE\",719:\"SPECIFIC_NAME\",720:\"STANDALONE\",721:\"STATE\",722:\"STATEMENT\",723:\"STRIP\",724:\"STRUCTURE\",725:\"STYLE\",726:\"SUBCLASS_ORIGIN\",727:\"T\",728:\"TABLE_NAME\",729:\"TEMPORARY\",730:\"TIES\",731:\"TOKEN\",732:\"TOP_LEVEL_COUNT\",733:\"TRANSACTIONS_COMMITTED\",734:\"TRANSACTIONS_ROLLED_BACK\",735:\"TRANSACTION_ACTIVE\",736:\"TRANSFORM\",737:\"TRANSFORMS\",738:\"TRIGGER_CATALOG\",739:\"TRIGGER_NAME\",740:\"TRIGGER_SCHEMA\",741:\"TYPE\",742:\"UNBOUNDED\",743:\"UNCOMMITTED\",744:\"UNDER\",745:\"UNLINK\",746:\"UNNAMED\",747:\"UNTYPED\",748:\"URI\",749:\"USAGE\",750:\"USER_DEFINED_TYPE_CATALOG\",751:\"USER_DEFINED_TYPE_CODE\",752:\"USER_DEFINED_TYPE_NAME\",753:\"USER_DEFINED_TYPE_SCHEMA\",754:\"VALID\",755:\"VERSION\",756:\"WHITESPACE\",757:\"WORK\",758:\"WRAPPER\",759:\"WRITE\",760:\"XMLDECLARATION\",761:\"XMLSCHEMA\",762:\"YES\",763:\"ZONE\",764:\"SEMICOLON\",765:\"PERCENT\",766:\"ROWS\"},\nproductions_: [0,[3,1],[3,1],[3,2],[7,1],[7,2],[8,2],[9,3],[9,1],[9,1],[13,2],[13,4],[12,1],[17,0],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[47,3],[73,3],[73,1],[75,5],[40,10],[40,4],[92,8],[92,11],[102,4],[104,2],[104,1],[103,3],[103,1],[105,1],[105,3],[106,3],[109,3],[109,1],[110,1],[110,2],[114,1],[114,1],[117,1],[117,5],[117,5],[117,1],[117,2],[117,1],[117,2],[117,2],[117,3],[117,4],[117,4],[117,4],[117,4],[117,4],[117,1],[117,1],[117,1],[117,1],[117,1],[117,1],[117,2],[117,2],[117,2],[117,1],[117,1],[117,1],[117,1],[117,1],[117,1],[117,2],[117,3],[117,4],[117,3],[117,1],[117,4],[117,2],[117,2],[117,4],[117,4],[117,4],[117,4],[117,4],[117,5],[117,4],[117,4],[117,4],[117,4],[117,4],[117,4],[117,4],[117,4],[117,6],[163,3],[163,1],[153,1],[153,1],[153,1],[182,2],[79,4],[79,4],[79,4],[79,3],[184,1],[184,2],[184,2],[184,2],[184,2],[184,2],[184,2],[184,2],[186,3],[186,4],[186,0],[81,0],[81,2],[81,2],[81,2],[81,2],[81,2],[82,2],[82,3],[82,5],[82,0],[205,6],[205,7],[205,6],[205,7],[203,1],[203,3],[209,4],[209,5],[209,3],[209,3],[209,2],[209,3],[209,1],[209,3],[209,2],[209,3],[209,1],[209,1],[209,2],[209,3],[209,1],[209,1],[209,2],[209,3],[209,1],[209,2],[209,3],[214,1],[199,3],[199,1],[204,2],[204,2],[204,1],[204,1],[215,3],[217,1],[217,2],[217,3],[217,3],[217,2],[217,3],[217,4],[217,5],[217,1],[217,2],[217,3],[217,1],[217,2],[217,3],[216,1],[216,2],[221,1],[221,2],[221,2],[221,3],[221,2],[221,3],[221,2],[221,3],[221,2],[221,2],[221,2],[218,2],[218,2],[218,0],[84,0],[84,2],[85,0],[85,4],[233,1],[233,3],[235,5],[235,4],[235,4],[235,1],[234,0],[234,2],[88,0],[88,2],[88,3],[88,2],[88,2],[88,3],[88,4],[88,3],[88,3],[86,0],[86,3],[120,1],[120,3],[241,1],[241,2],[241,3],[241,4],[87,0],[87,3],[87,8],[246,0],[246,2],[174,3],[174,1],[253,3],[253,2],[253,3],[253,2],[253,3],[253,2],[253,1],[254,5],[254,3],[254,1],[111,5],[111,3],[111,3],[111,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,3],[94,3],[94,3],[94,1],[94,1],[56,1],[70,5],[71,5],[263,2],[263,2],[261,6],[261,8],[261,6],[261,8],[274,1],[274,1],[274,1],[274,1],[274,1],[274,1],[274,1],[255,5],[255,6],[255,6],[275,0],[275,4],[275,4],[275,5],[277,3],[278,3],[158,1],[158,1],[158,1],[158,1],[158,1],[158,1],[158,1],[158,1],[158,1],[200,5],[200,3],[200,4],[200,4],[200,8],[200,8],[200,8],[200,8],[200,3],[151,1],[151,3],[196,1],[257,1],[257,1],[113,1],[113,1],[258,1],[202,2],[259,4],[262,3],[201,2],[201,2],[201,1],[201,1],[260,5],[260,4],[304,2],[304,1],[307,4],[305,2],[305,0],[256,3],[256,3],[256,3],[256,3],[256,5],[256,3],[256,5],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,5],[256,3],[256,3],[256,3],[256,5],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,3],[256,6],[256,6],[256,3],[256,3],[256,2],[256,2],[256,2],[256,2],[256,2],[256,3],[256,5],[256,6],[256,5],[256,6],[256,4],[256,5],[256,3],[256,4],[256,3],[256,4],[256,3],[256,3],[256,3],[256,3],[256,3],[329,1],[329,1],[329,4],[327,1],[327,1],[327,1],[327,1],[327,1],[327,1],[328,1],[328,1],[328,1],[55,6],[55,4],[147,1],[147,3],[336,3],[336,4],[29,5],[29,3],[36,5],[36,4],[36,7],[36,6],[36,5],[36,4],[36,5],[36,8],[36,7],[36,4],[36,6],[36,7],[341,1],[341,1],[340,0],[340,1],[342,3],[342,1],[342,1],[342,5],[342,3],[342,3],[345,1],[345,3],[346,1],[346,1],[346,1],[346,1],[346,1],[346,1],[100,1],[100,3],[24,9],[24,5],[349,1],[349,1],[352,0],[352,1],[354,2],[354,1],[355,1],[355,3],[355,3],[355,3],[348,0],[348,1],[350,0],[350,3],[351,3],[351,1],[351,2],[359,1],[359,3],[360,2],[360,2],[360,2],[360,2],[360,2],[361,0],[361,2],[366,4],[362,6],[363,9],[377,3],[376,0],[376,2],[378,4],[379,4],[364,6],[365,5],[365,5],[372,1],[372,1],[372,3],[372,3],[358,1],[358,3],[384,3],[384,2],[384,1],[387,6],[387,4],[387,1],[387,4],[272,2],[272,1],[388,1],[388,1],[385,0],[385,1],[391,2],[391,1],[393,3],[392,2],[392,5],[392,3],[392,6],[392,1],[392,2],[392,4],[392,2],[392,1],[392,2],[392,1],[392,1],[392,3],[392,5],[33,4],[399,3],[399,1],[398,0],[398,2],[18,6],[18,6],[18,6],[18,8],[18,6],[39,5],[19,4],[19,7],[19,6],[19,9],[30,3],[21,4],[21,6],[21,9],[21,6],[407,0],[407,2],[54,3],[54,2],[31,4],[31,5],[31,5],[22,8],[22,9],[32,3],[43,2],[43,4],[43,3],[43,5],[45,2],[45,4],[45,4],[45,6],[42,4],[42,6],[44,4],[44,6],[41,4],[41,6],[25,11],[25,8],[413,3],[413,3],[413,5],[34,4],[66,2],[57,2],[58,2],[58,2],[58,4],[144,4],[144,2],[144,2],[144,2],[144,2],[144,1],[144,2],[144,2],[422,1],[422,1],[423,1],[423,1],[423,1],[423,1],[423,1],[423,1],[423,1],[423,3],[419,3],[419,4],[419,2],[421,2],[421,3],[421,1],[425,3],[425,1],[428,3],[428,3],[428,3],[427,3],[427,1],[65,4],[65,3],[65,4],[65,5],[65,5],[65,6],[431,1],[431,1],[430,3],[430,2],[432,1],[432,1],[432,3],[429,1],[429,1],[51,2],[52,2],[50,2],[35,4],[35,3],[438,2],[59,3],[60,1],[61,1],[62,3],[63,2],[63,2],[64,2],[64,2],[446,1],[446,1],[69,2],[444,3],[444,1],[445,3],[445,1],[28,2],[449,1],[449,3],[450,3],[450,4],[450,5],[450,6],[46,3],[37,6],[453,1],[453,2],[454,2],[455,2],[456,2],[456,2],[456,1],[456,1],[458,4],[458,6],[461,1],[461,3],[459,5],[459,7],[459,7],[459,9],[459,7],[459,9],[462,3],[462,6],[462,3],[462,6],[457,0],[457,2],[457,5],[457,4],[457,7],[27,6],[469,2],[468,0],[468,2],[468,2],[468,1],[26,8],[23,3],[23,4],[473,3],[473,1],[474,3],[474,7],[474,6],[474,3],[474,4],[478,1],[478,1],[482,2],[483,3],[484,2],[485,4],[475,4],[475,3],[475,2],[475,1],[497,2],[493,2],[493,2],[498,4],[500,6],[67,3],[67,2],[506,3],[506,1],[504,1],[504,4],[68,2],[20,2],[48,9],[48,8],[48,9],[510,0],[510,1],[510,1],[510,1],[510,2],[511,1],[511,1],[511,1],[49,3],[38,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,1],[80,0],[80,1],[83,0],[83,1],[90,0],[90,2],[91,0],[91,1],[96,0],[96,1],[97,0],[97,1],[101,0],[101,1],[108,0],[108,1],[121,0],[121,1],[125,1],[125,2],[126,1],[126,2],[127,0],[127,1],[155,0],[155,2],[157,0],[157,2],[159,0],[159,2],[160,1],[160,1],[161,0],[161,2],[165,0],[165,2],[167,0],[167,2],[176,0],[176,2],[177,0],[177,2],[178,0],[178,2],[188,0],[188,1],[197,0],[197,1],[210,0],[210,1],[211,0],[211,1],[219,0],[219,1],[220,0],[220,1],[248,0],[248,1],[250,0],[250,1],[251,0],[251,1],[252,0],[252,1],[264,1],[264,1],[767,1],[767,1],[289,0],[289,1],[301,1],[301,1],[337,1],[337,1],[371,0],[371,1],[375,0],[375,1],[382,0],[382,1],[383,0],[383,1],[394,0],[394,1],[395,0],[395,1],[397,1],[397,1],[411,0],[411,1],[412,0],[412,1],[465,0],[465,1],[466,0],[466,1],[467,0],[467,1],[471,0],[471,1],[476,0],[476,1],[477,0],[477,1],[479,0],[479,1],[480,0],[480,1],[481,0],[481,1],[486,0],[486,1],[487,0],[487,1],[488,0],[488,1],[489,0],[489,1],[490,0],[490,1],[491,0],[491,1],[492,0],[492,1],[494,0],[494,1],[495,0],[495,1],[496,0],[496,1],[499,0],[499,2],[501,0],[501,2],[502,0],[502,2],[503,0],[503,2],[512,0],[512,1],[513,0],[513,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n\n\t\t\tif (yy.casesensitive) this.$ = $$[$0];\r\n\t\t\telse this.$ = $$[$0].toLowerCase();\r\n\nbreak;\ncase 2:\n this.$ = doubleq($$[$0].substr(1,$$[$0].length-2)); \nbreak;\ncase 3:\n this.$ = $$[$0].toLowerCase() \nbreak;\ncase 4:\n this.$ = $$[$0] \nbreak;\ncase 5:\n this.$ = $$[$0] ? $$[$0-1] + ' ' + $$[$0] : $$[$0-1] \nbreak;\ncase 6:\n return new yy.Statements({statements:$$[$0-1]}); \nbreak;\ncase 7:\n this.$ = $$[$0-2]; if($$[$0]) $$[$0-2].push($$[$0]); \nbreak;\ncase 8: case 9: case 70: case 80: case 85: case 143: case 177: case 205: case 206: case 242: case 261: case 273: case 354: case 372: case 451: case 474: case 475: case 479: case 487: case 528: case 529: case 566: case 649: case 659: case 683: case 685: case 687: case 701: case 702: case 732: case 756:\n this.$ = [$$[$0]]; \nbreak;\ncase 10:\n this.$ = $$[$0]; $$[$0].explain = true; \nbreak;\ncase 11:\n this.$ = $$[$0];  $$[$0].explain = true;\nbreak;\ncase 12:\n\n\t\t\tthis.$ = $$[$0];\r\n\n\t\t\t// TODO combine exists and queries\r\n\t\t    if(yy.exists) this.$.exists = yy.exists;\r\n\t\t    delete yy.exists;\r\n\t\t    if(yy.queries) this.$.queries = yy.queries;\r\n\t\t\tdelete yy.queries;\r\n\nbreak;\ncase 13: case 162: case 172: case 237: case 238: case 240: case 248: case 250: case 259: case 267: case 270: case 375: case 491: case 501: case 503: case 515: case 521: case 522: case 567:\n this.$ = undefined; \nbreak;\ncase 68:\n this.$ = new yy.WithSelect({withs: $$[$0-1], select:$$[$0]}); \nbreak;\ncase 69: case 565:\n $$[$0-2].push($$[$0]); this.$=$$[$0-2]; \nbreak;\ncase 71:\n this.$ = {name:$$[$0-4], select:$$[$0-1]}; \nbreak;\ncase 72:\n\n\t\t\tyy.extend(this.$,$$[$0-9]); yy.extend(this.$,$$[$0-8]); yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-6]); \r\n\t\t    yy.extend(this.$,$$[$0-5]); yy.extend(this.$,$$[$0-4]);yy.extend(this.$,$$[$0-3]); \r\n\t\t    yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]); \r\n\t\t    this.$ = $$[$0-9];\r\n/*\t\t    if(yy.exists) this.$.exists = yy.exists;\r\n\t\t    delete yy.exists;\r\n\t\t    if(yy.queries) this.$.queries = yy.queries;\r\n\t\t\tdelete yy.queries;\r\n*/\t\t\nbreak;\ncase 73:\n\n\t\t\tthis.$ = new yy.Search({selectors:$$[$0-2], from:$$[$0]});\r\n\t\t\tyy.extend(this.$,$$[$0-1]);\r\n\nbreak;\ncase 74:\n this.$ = {pivot:{expr:$$[$0-5], columnid:$$[$0-3], inlist:$$[$0-2], as:$$[$0]}}; \nbreak;\ncase 75:\n this.$ = {unpivot:{tocolumnid:$$[$0-8], forcolumnid:$$[$0-6], inlist:$$[$0-3], as:$$[$0]}}; \nbreak;\ncase 76: case 520: case 549: case 585: case 619: case 636: case 637: case 640: case 662:\n this.$ = $$[$0-1]; \nbreak;\ncase 77: case 78: case 86: case 147: case 185: case 247: case 280: case 288: case 289: case 290: case 291: case 292: case 293: case 294: case 295: case 296: case 297: case 298: case 299: case 300: case 301: case 304: case 305: case 320: case 321: case 322: case 323: case 324: case 325: case 374: case 440: case 441: case 442: case 443: case 444: case 445: case 516: case 542: case 546: case 548: case 623: case 624: case 625: case 626: case 627: case 628: case 632: case 634: case 635: case 644: case 660: case 661: case 723: case 738: case 739: case 741: case 742: case 748: case 749:\n this.$ = $$[$0]; \nbreak;\ncase 79: case 84: case 731: case 755:\n this.$ = $$[$0-2]; this.$.push($$[$0]); \nbreak;\ncase 81:\n this.$ = {expr:$$[$0]}; \nbreak;\ncase 82:\n this.$ = {expr:$$[$0-2],as:$$[$0]}; \nbreak;\ncase 83:\n this.$ = {removecolumns:$$[$0]}; \nbreak;\ncase 87:\n this.$ = {like:$$[$0]}; \nbreak;\ncase 90: case 104:\n this.$ = {srchid:\"PROP\", args: [$$[$0]]}; \nbreak;\ncase 91:\n this.$ = {srchid:\"ORDERBY\", args: $$[$0-1]}; \nbreak;\ncase 92:\n\n\t\t\tvar dir = $$[$0-1];\r\n\t\t\tif(!dir) dir = 'ASC';\r\n\t\t\tthis.$ = {srchid:\"ORDERBY\", args: [{expression: new yy.Column({columnid:'_'}), direction:dir}]};\r\n\nbreak;\ncase 93:\n this.$ = {srchid:\"PARENT\"}; \nbreak;\ncase 94:\n this.$ = {srchid:\"APROP\", args: [$$[$0]]}; \nbreak;\ncase 95:\n this.$ = {selid:\"ROOT\"};\nbreak;\ncase 96:\n this.$ = {srchid:\"EQ\", args: [$$[$0]]}; \nbreak;\ncase 97:\n this.$ = {srchid:\"LIKE\", args: [$$[$0]]}; \nbreak;\ncase 98: case 99:\n this.$ = {selid:\"WITH\", args: $$[$0-1]}; \nbreak;\ncase 100:\n this.$ = {srchid:$$[$0-3].toUpperCase(), args:$$[$0-1]}; \nbreak;\ncase 101:\n this.$ = {srchid:\"WHERE\", args:[$$[$0-1]]}; \nbreak;\ncase 102:\n this.$ = {selid:\"OF\", args:[$$[$0-1]]}; \nbreak;\ncase 103:\n this.$ = {srchid:\"CLASS\", args:[$$[$0-1]]}; \nbreak;\ncase 105:\n this.$ = {srchid:\"NAME\", args: [$$[$0].substr(1,$$[$0].length-2)]}; \nbreak;\ncase 106:\n this.$ = {srchid:\"CHILD\"}; \nbreak;\ncase 107:\n this.$ = {srchid:\"VERTEX\"}; \nbreak;\ncase 108:\n this.$ = {srchid:\"EDGE\"}; \nbreak;\ncase 109:\n this.$ = {srchid:\"REF\"}; \nbreak;\ncase 110:\n this.$ = {srchid:\"SHARP\", args:[$$[$0]]}; \nbreak;\ncase 111:\n this.$ = {srchid:\"ATTR\", args:((typeof $$[$0] == 'undefined')?undefined:[$$[$0]])}; \nbreak;\ncase 112:\n this.$ = {srchid:\"ATTR\"}; \nbreak;\ncase 113:\n this.$ = {srchid:\"OUT\"}; \nbreak;\ncase 114:\n this.$ = {srchid:\"IN\"}; \nbreak;\ncase 115:\n this.$ = {srchid:\"OUTOUT\"}; \nbreak;\ncase 116:\n this.$ = {srchid:\"ININ\"}; \nbreak;\ncase 117:\n this.$ = {srchid:\"CONTENT\"}; \nbreak;\ncase 118:\n this.$ = {srchid:\"EX\",args:[new yy.Json({value:$$[$0]})]}; \nbreak;\ncase 119:\n this.$ = {srchid:\"AT\", args:[$$[$0]]}; \nbreak;\ncase 120:\n this.$ = {srchid:\"AS\", args:[$$[$0]]}; \nbreak;\ncase 121:\n this.$ = {srchid:\"SET\", args:$$[$0-1]}; \nbreak;\ncase 122:\n this.$ = {selid:\"TO\", args:[$$[$0]]}; \nbreak;\ncase 123:\n this.$ = {srchid:\"VALUE\"}; \nbreak;\ncase 124:\n this.$ = {srchid:\"ROW\", args:$$[$0-1]}; \nbreak;\ncase 125:\n this.$ = {srchid:\"CLASS\", args:[$$[$0]]}; \nbreak;\ncase 126:\n this.$ = {selid:$$[$0],args:[$$[$0-1]] }; \nbreak;\ncase 127:\n this.$ = {selid:\"NOT\",args:$$[$0-1] }; \nbreak;\ncase 128:\n this.$ = {selid:\"IF\",args:$$[$0-1] }; \nbreak;\ncase 129:\n this.$ = {selid:$$[$0-3],args:$$[$0-1] }; \nbreak;\ncase 130:\n this.$ = {selid:'DISTINCT',args:$$[$0-1] }; \nbreak;\ncase 131:\n this.$ = {selid:'UNION',args:$$[$0-1] }; \nbreak;\ncase 132:\n this.$ = {selid:'UNIONALL',args:$$[$0-1] }; \nbreak;\ncase 133:\n this.$ = {selid:'ALL',args:[$$[$0-1]] }; \nbreak;\ncase 134:\n this.$ = {selid:'ANY',args:[$$[$0-1]] }; \nbreak;\ncase 135:\n this.$ = {selid:'INTERSECT',args:$$[$0-1] }; \nbreak;\ncase 136:\n this.$ = {selid:'EXCEPT',args:$$[$0-1] }; \nbreak;\ncase 137:\n this.$ = {selid:'AND',args:$$[$0-1] }; \nbreak;\ncase 138:\n this.$ = {selid:'OR',args:$$[$0-1] }; \nbreak;\ncase 139:\n this.$ = {selid:'PATH',args:[$$[$0-1]] }; \nbreak;\ncase 140:\n this.$ = {srchid:'RETURN',args:$$[$0-1] }; \nbreak;\ncase 141:\n this.$ = {selid:'REPEAT',sels:$$[$0-3], args:$$[$0-1] }; \nbreak;\ncase 142:\n this.$ = $$[$0-2]; this.$.push($$[$0]);\nbreak;\ncase 144:\n this.$ = \"PLUS\"; \nbreak;\ncase 145:\n this.$ = \"STAR\"; \nbreak;\ncase 146:\n this.$ = \"QUESTION\"; \nbreak;\ncase 148:\n this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-3]); yy.extend(this.$, $$[$0-1]); \nbreak;\ncase 149:\n this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy.extend(this.$, $$[$0-3]);yy.extend(this.$, $$[$0-1]); \nbreak;\ncase 150:\n this.$ = new yy.Select({ columns:$$[$0], all:true }); yy.extend(this.$, $$[$0-3]);yy.extend(this.$, $$[$0-1]); \nbreak;\ncase 151:\n\n\t\t\tif(!$$[$0]) {\r\n\t\t\t\tthis.$ = new yy.Select({columns:[new yy.Column({columnid:'_',})], modifier:'COLUMN'});\r\n\t\t\t} else {\r\n\t\t\t\tthis.$ = new yy.Select({ columns:$$[$0] }); yy.extend(this.$, $$[$0-2]);yy.extend(this.$, $$[$0-1]); \r\n\t\t\t}\r\n\nbreak;\ncase 152:\n if($$[$0]=='SELECT') this.$ = undefined; else this.$ = {modifier: $$[$0]};  \nbreak;\ncase 153:\n this.$ = {modifier:'VALUE'}\nbreak;\ncase 154:\n this.$ = {modifier:'ROW'}\nbreak;\ncase 155:\n this.$ = {modifier:'COLUMN'}\nbreak;\ncase 156:\n this.$ = {modifier:'MATRIX'}\nbreak;\ncase 157:\n this.$ = {modifier:'TEXTSTRING'}\nbreak;\ncase 158:\n this.$ = {modifier:'INDEX'}\nbreak;\ncase 159:\n this.$ = {modifier:'RECORDSET'}\nbreak;\ncase 160:\n this.$ = {top: $$[$0-1], percent:(typeof $$[$0] != 'undefined'?true:undefined)}; \nbreak;\ncase 161:\n this.$ = {top: $$[$0-1]}; \nbreak;\ncase 163: case 330: case 523: case 524: case 724:\nthis.$ = undefined; \nbreak;\ncase 164: case 165: case 166: case 167:\nthis.$ = {into: $$[$0]} \nbreak;\ncase 168:\n\n\t\t\tvar s = $$[$0];\r\n\t\t\ts = s.substr(1,s.length-2);\r\n\t\t\tvar x3 = s.substr(-3).toUpperCase();\r\n\t\t\tvar x4 = s.substr(-4).toUpperCase();\r\n\t\t\tif(s[0] == '#') {\r\n\t\t\t\tthis.$ = {into: new yy.FuncValue({funcid: 'HTML', args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]})};\r\n\t\t\t} else if(x3=='XLS' || x3 == 'CSV' || x3=='TAB') {\r\n\t\t\t\tthis.$ = {into: new yy.FuncValue({funcid: x3, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]})};\r\n\t\t\t} else if(x4=='XLSX' || x4 == 'JSON') {\r\n\t\t\t\tthis.$ = {into: new yy.FuncValue({funcid: x4, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]})};\r\n\t\t\t}\r\n\nbreak;\ncase 169:\n this.$ = { from: $$[$0] }; \nbreak;\ncase 170:\n this.$ = { from: $$[$0-1], joins: $$[$0] }; \nbreak;\ncase 171:\n this.$ = { from: $$[$0-2], joins: $$[$0-1] }; \nbreak;\ncase 173:\n this.$ = new yy.Apply({select: $$[$0-2], applymode:'CROSS', as:$$[$0]}); \nbreak;\ncase 174:\n this.$ = new yy.Apply({select: $$[$0-3], applymode:'CROSS', as:$$[$0]}); \nbreak;\ncase 175:\n this.$ = new yy.Apply({select: $$[$0-2], applymode:'OUTER', as:$$[$0]}); \nbreak;\ncase 176:\n this.$ = new yy.Apply({select: $$[$0-3], applymode:'OUTER', as:$$[$0]}); \nbreak;\ncase 178: case 243: case 452: case 530: case 531:\n this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); \nbreak;\ncase 179:\n this.$ = $$[$0-2]; this.$.as = $$[$0] \nbreak;\ncase 180:\n this.$ = $$[$0-3]; this.$.as = $$[$0] \nbreak;\ncase 181:\n this.$ = $$[$0-1]; this.$.as = 'default' \nbreak;\ncase 182:\n this.$ = new yy.Json({value:$$[$0-2]}); $$[$0-2].as = $$[$0] \nbreak;\ncase 183:\n this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] \nbreak;\ncase 184:\n this.$ = $$[$0-2]; $$[$0-2].as = $$[$0] \nbreak;\ncase 186: case 638: case 641:\n this.$ = $$[$0-2]; \nbreak;\ncase 187: case 191: case 195: case 198:\n this.$ = $$[$0-1]; $$[$0-1].as = $$[$0]; \nbreak;\ncase 188: case 192: case 196: case 199:\n this.$ = $$[$0-2]; $$[$0-2].as = $$[$0]; \nbreak;\ncase 189: case 190: case 194: case 197:\n this.$ = $$[$0]; $$[$0].as = 'default'; \nbreak;\ncase 193:\n this.$ = {inserted:true}; $$[$0].as = 'default'; \nbreak;\ncase 200:\n\n\t\t\tvar s = $$[$0];\r\n\t\t\ts = s.substr(1,s.length-2);\r\n\t\t\tvar x3 = s.substr(-3).toUpperCase();\r\n\t\t\tvar x4 = s.substr(-4).toUpperCase();\r\n\t\t\tvar r;\r\n\t\t\tif(s[0] == '#') {\r\n\t\t\t\tr = new yy.FuncValue({funcid: 'HTML', args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]});\r\n\t\t\t} else if(x3=='XLS' || x3 == 'CSV' || x3=='TAB') {\r\n\t\t\t\tr = new yy.FuncValue({funcid: x3, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]});\r\n\t\t\t} else if(x4=='XLSX' || x4 == 'JSON') {\r\n\t\t\t\tr = new yy.FuncValue({funcid: x4, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]});\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error('Unknown string in FROM clause');\r\n\t\t\t};\r\n\t\t\tthis.$ = r;\r\n\nbreak;\ncase 201:\n\n\t\t\tif($$[$0-2] == 'INFORMATION_SCHEMA') {\r\n\t\t\t\tthis.$ = new yy.FuncValue({funcid: $$[$0-2], args:[new yy.StringValue({value:$$[$0]})]});\r\n\t\t\t} else {\r\n\t\t\t\tthis.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});\r\n\t\t\t}\r\n\nbreak;\ncase 202:\n this.$ = new yy.Table({tableid: $$[$0]});\nbreak;\ncase 203: case 204:\n this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); \nbreak;\ncase 207:\n this.$ = new yy.Join($$[$0-2]); yy.extend(this.$, $$[$0-1]); yy.extend(this.$, $$[$0]); \nbreak;\ncase 208:\n this.$ = {table: $$[$0]}; \nbreak;\ncase 209:\n this.$ = {table: $$[$0-1], as: $$[$0] } ; \nbreak;\ncase 210:\n this.$ = {table: $$[$0-2], as: $$[$0] } ; \nbreak;\ncase 211:\n this.$ = {json:new yy.Json({value:$$[$0-2],as:$$[$0]})}; \nbreak;\ncase 212:\n this.$ = {param: $$[$0-1], as: $$[$0] } ; \nbreak;\ncase 213:\n this.$ = {param: $$[$0-2], as: $$[$0] } ; \nbreak;\ncase 214:\n this.$ = {select: $$[$0-2], as: $$[$0]} ; \nbreak;\ncase 215:\n this.$ = {select: $$[$0-3], as: $$[$0] } ; \nbreak;\ncase 216:\n this.$ = {funcid:$$[$0], as:'default'}; \nbreak;\ncase 217:\n this.$ = {funcid:$$[$0-1], as: $$[$0]}; \nbreak;\ncase 218:\n this.$ = {funcid:$$[$0-2], as: $$[$0]}; \nbreak;\ncase 219:\n this.$ = {variable:$$[$0],as:'default'}; \nbreak;\ncase 220:\n this.$ = {variable:$$[$0-1],as:$$[$0]}; \nbreak;\ncase 221:\n this.$ = {variable:$$[$0-2],as:$$[$0]} \nbreak;\ncase 222:\n this.$ = { joinmode: $$[$0] } ; \nbreak;\ncase 223:\n this.$ = {joinmode: $$[$0-1], natural:true} ; \nbreak;\ncase 224: case 225:\n this.$ = \"INNER\"; \nbreak;\ncase 226: case 227:\n this.$ = \"LEFT\"; \nbreak;\ncase 228: case 229:\n this.$ = \"RIGHT\"; \nbreak;\ncase 230: case 231:\n this.$ = \"OUTER\"; \nbreak;\ncase 232:\n this.$ = \"SEMI\"; \nbreak;\ncase 233:\n this.$ = \"ANTI\"; \nbreak;\ncase 234:\n this.$ = \"CROSS\"; \nbreak;\ncase 235:\n this.$ = {on: $$[$0]}; \nbreak;\ncase 236: case 697:\n this.$ = {using: $$[$0]}; \nbreak;\ncase 239:\n this.$ = {where: new yy.Expression({expression:$$[$0]})}; \nbreak;\ncase 241:\n this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); \nbreak;\ncase 244:\n this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); \nbreak;\ncase 245:\n this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); \nbreak;\ncase 246:\n this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); \nbreak;\ncase 249:\n this.$ = {having:$$[$0]}\nbreak;\ncase 251:\n this.$ = {union: $$[$0]} ; \nbreak;\ncase 252:\n this.$ = {unionall: $$[$0]} ; \nbreak;\ncase 253:\n this.$ = {except: $$[$0]} ; \nbreak;\ncase 254:\n this.$ = {intersect: $$[$0]} ; \nbreak;\ncase 255:\n this.$ = {union: $$[$0], corresponding:true} ; \nbreak;\ncase 256:\n this.$ = {unionall: $$[$0], corresponding:true} ; \nbreak;\ncase 257:\n this.$ = {except: $$[$0], corresponding:true} ; \nbreak;\ncase 258:\n this.$ = {intersect: $$[$0], corresponding:true} ; \nbreak;\ncase 260:\n this.$ = {order:$$[$0]}\nbreak;\ncase 262:\n this.$ = $$[$0-2]; $$[$0-2].push($$[$0])\nbreak;\ncase 263:\n this.$ = new yy.Expression({expression: $$[$0], direction:'ASC'}) \nbreak;\ncase 264:\n this.$ = new yy.Expression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) \nbreak;\ncase 265:\n this.$ = new yy.Expression({expression: $$[$0-2], direction:'ASC', nocase:true}) \nbreak;\ncase 266:\n this.$ = new yy.Expression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) \nbreak;\ncase 268:\n this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0]); \nbreak;\ncase 269:\n this.$ = {limit:$$[$0-2],offset:$$[$0-6]}; \nbreak;\ncase 271:\n this.$ = {offset:$$[$0]}; \nbreak;\ncase 272: case 509: case 533: case 648: case 658: case 682: case 684: case 688:\n $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; \nbreak;\ncase 274: case 276: case 278:\n $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];\nbreak;\ncase 275: case 277: case 279:\n $$[$0-1].as = $$[$0]; this.$ = $$[$0-1];\nbreak;\ncase 281:\n this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); \nbreak;\ncase 282:\n this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); \nbreak;\ncase 283:\n this.$ = new yy.Column({columnid:$$[$0]}); \nbreak;\ncase 284:\n this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});\nbreak;\ncase 285: case 286:\n this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});\nbreak;\ncase 287:\n this.$ = new yy.Column({columnid: $$[$0]});\nbreak;\ncase 302:\n this.$ = new yy.DomainValueValue(); \nbreak;\ncase 303:\n this.$ = new yy.Json({value:$$[$0]}); \nbreak;\ncase 306: case 307: case 308:\n\n\t\t\tif(!yy.queries) yy.queries = []; \r\n\t\t\tyy.queries.push($$[$0-1]);\r\n\t\t\t$$[$0-1].queriesidx = yy.queries.length;\r\n\t\t\tthis.$ = $$[$0-1];\r\n\nbreak;\ncase 309:\nthis.$ = $$[$0]\nbreak;\ncase 310:\n this.$ = new yy.FuncValue({funcid:'CURRENT_TIMESTAMP'});\nbreak;\ncase 311:\n this.$ = new yy.JavaScript({value:$$[$0].substr(2,$$[$0].length-4)}); \nbreak;\ncase 312:\n this.$ = new yy.JavaScript({value:'alasql.fn[\"'+$$[$0-2]+'\"] = '+$$[$0].substr(2,$$[$0].length-4)}); \nbreak;\ncase 313:\n this.$ = new yy.JavaScript({value:'alasql.aggr[\"'+$$[$0-2]+'\"] = '+$$[$0].substr(2,$$[$0].length-4)}); \nbreak;\ncase 314:\n this.$ = new yy.FuncValue({funcid:$$[$0], newid:true}); \nbreak;\ncase 315:\n this.$ = $$[$0]; yy.extend(this.$,{newid:true}); \nbreak;\ncase 316:\n this.$ = new yy.Convert({expression:$$[$0-3]}) ; yy.extend(this.$,$$[$0-1]) ; \nbreak;\ncase 317:\n this.$ = new yy.Convert({expression:$$[$0-5], style:$$[$0-1]}) ; yy.extend(this.$,$$[$0-3]) ; \nbreak;\ncase 318:\n this.$ = new yy.Convert({expression:$$[$0-1]}) ; yy.extend(this.$,$$[$0-3]) ; \nbreak;\ncase 319:\n this.$ = new yy.Convert({expression:$$[$0-3], style:$$[$0-1]}) ; yy.extend(this.$,$$[$0-5]) ; \nbreak;\ncase 326:\n this.$ = new yy.FuncValue({funcid:'CURRENT_TIMESTAMP'}); \nbreak;\ncase 327:\n\n\t\t  if($$[$0-2].length > 1 && ($$[$0-4].toUpperCase() == 'MAX' || $$[$0-4].toUpperCase() == 'MIN')) {\r\n\t\t  \tthis.$ = new yy.FuncValue({funcid:$$[$0-4],args:$$[$0-2]});\r\n\t\t  } else {\r\n\t\t\tthis.$ = new yy.AggrValue({aggregatorid: $$[$0-4].toUpperCase(), expression: $$[$0-2].pop(), over:$$[$0]}); \r\n\t\t  } \r\n\nbreak;\ncase 328:\n this.$ = new yy.AggrValue({aggregatorid: $$[$0-5].toUpperCase(), expression: $$[$0-2], distinct:true, over:$$[$0]}); \nbreak;\ncase 329:\n this.$ = new yy.AggrValue({aggregatorid: $$[$0-5].toUpperCase(), expression: $$[$0-2],\r\n\t\t over:$$[$0]}); \nbreak;\ncase 331: case 332:\n this.$ = new yy.Over(); yy.extend(this.$,$$[$0-1]); \nbreak;\ncase 333:\n this.$ = new yy.Over(); yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0-1]);\nbreak;\ncase 334:\n this.$ = {partition:$$[$0]}; \nbreak;\ncase 335:\n this.$ = {order:$$[$0]}; \nbreak;\ncase 336:\n this.$ = \"SUM\"; \nbreak;\ncase 337:\n this.$ = \"COUNT\"; \nbreak;\ncase 338:\n this.$ = \"MIN\"; \nbreak;\ncase 339: case 544:\n this.$ = \"MAX\"; \nbreak;\ncase 340:\n this.$ = \"AVG\"; \nbreak;\ncase 341:\n this.$ = \"FIRST\"; \nbreak;\ncase 342:\n this.$ = \"LAST\"; \nbreak;\ncase 343:\n this.$ = \"AGGR\"; \nbreak;\ncase 344:\n this.$ = \"ARRAY\"; \nbreak;\ncase 345:\n\n\t\t\tvar funcid = $$[$0-4];\r\n\t\t\tvar exprlist = $$[$0-1];\r\n\t\t\tif(exprlist.length > 1 && (funcid.toUpperCase() == 'MIN' || funcid.toUpperCase() == 'MAX')) {\r\n\t\t\t\t\tthis.$ = new yy.FuncValue({funcid: funcid, args: exprlist}); \r\n\t\t\t} else if(alasql.aggr[$$[$0-4]]) {\r\n\t\t    \tthis.$ = new yy.AggrValue({aggregatorid: 'REDUCE', \r\n                      funcid: funcid, expression: exprlist.pop(),distinct:($$[$0-2]=='DISTINCT') });\r\n\t\t    } else {\r\n\t\t\t    this.$ = new yy.FuncValue({funcid: funcid, args: exprlist}); \r\n\t\t\t};\r\n\nbreak;\ncase 346:\n this.$ = new yy.FuncValue({ funcid: $$[$0-2] }) \nbreak;\ncase 347:\n this.$ = new yy.FuncValue({ funcid: 'IIF', args:$$[$0-1] }) \nbreak;\ncase 348:\n this.$ = new yy.FuncValue({ funcid: 'REPLACE', args:$$[$0-1] }) \nbreak;\ncase 349:\n this.$ = new yy.FuncValue({ funcid: 'DATEADD', args:[new yy.StringValue({value:$$[$0-5]}),$$[$0-3],$$[$0-1]]}) \nbreak;\ncase 350:\n this.$ = new yy.FuncValue({ funcid: 'DATEADD', args:[$$[$0-5],$$[$0-3],$$[$0-1]]}) \nbreak;\ncase 351:\n this.$ = new yy.FuncValue({ funcid: 'DATEDIFF', args:[new yy.StringValue({value:$$[$0-5]}),$$[$0-3],$$[$0-1]]}) \nbreak;\ncase 352:\n this.$ = new yy.FuncValue({ funcid: 'DATEDIFF', args:[$$[$0-5],$$[$0-3],$$[$0-1]]}) \nbreak;\ncase 353:\n this.$ = new yy.FuncValue({ funcid: 'INTERVAL', args:[$$[$0-1],new yy.StringValue({value:($$[$0]).toLowerCase()})]}); \nbreak;\ncase 355:\n $$[$0-2].push($$[$0]); this.$ = $$[$0-2] \nbreak;\ncase 356:\n this.$ = new yy.NumValue({value:+$$[$0]}); \nbreak;\ncase 357:\n this.$ = new yy.LogicValue({value:true}); \nbreak;\ncase 358:\n this.$ = new yy.LogicValue({value:false}); \nbreak;\ncase 359:\n this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/(\\\\\\')/g,\"'\").replace(/(\\'\\')/g,\"'\")}); \nbreak;\ncase 360:\n this.$ = new yy.StringValue({value: $$[$0].substr(2,$$[$0].length-3).replace(/(\\\\\\')/g,\"'\").replace(/(\\'\\')/g,\"'\")}); \nbreak;\ncase 361:\n this.$ = new yy.NullValue({value:undefined}); \nbreak;\ncase 362:\n this.$ = new yy.VarValue({variable:$$[$0]}); \nbreak;\ncase 363:\n\n\t\t\tif(!yy.exists) yy.exists = [];\r\n\t\t\tthis.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); \r\n\t\t\tyy.exists.push($$[$0-1]);\r\n\nbreak;\ncase 364:\n this.$ = new yy.ArrayValue({value:$$[$0-1]}); \nbreak;\ncase 365: case 366:\n this.$ = new yy.ParamValue({param: $$[$0]}); \nbreak;\ncase 367:\n\n\t\t\tif(typeof yy.question == 'undefined') yy.question = 0; \r\n\t\t\tthis.$ = new yy.ParamValue({param: yy.question++}); \r\n\nbreak;\ncase 368:\n\n\t\t\tif(typeof yy.question == 'undefined') yy.question = 0; \r\n\t\t\tthis.$ = new yy.ParamValue({param: yy.question++, array:true}); \r\n\nbreak;\ncase 369:\n this.$ = new yy.CaseValue({expression:$$[$0-3], whens: $$[$0-2], elses: $$[$0-1]}); \nbreak;\ncase 370:\n this.$ = new yy.CaseValue({whens: $$[$0-2], elses: $$[$0-1]}); \nbreak;\ncase 371: case 699: case 700:\n this.$ = $$[$0-1]; this.$.push($$[$0]); \nbreak;\ncase 373:\n this.$ = {when: $$[$0-2], then: $$[$0] }; \nbreak;\ncase 376: case 377:\n this.$ = new yy.Op({left:$$[$0-2], op:'REGEXP', right:$$[$0]}); \nbreak;\ncase 378:\n this.$ = new yy.Op({left:$$[$0-2], op:'GLOB', right:$$[$0]}); \nbreak;\ncase 379:\n this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); \nbreak;\ncase 380:\n this.$ = new yy.Op({left:$$[$0-4], op:'LIKE', right:$$[$0-2], escape:$$[$0]}); \nbreak;\ncase 381:\n this.$ = new yy.Op({left:$$[$0-2], op:'NOT LIKE', right:$$[$0] }); \nbreak;\ncase 382:\n this.$ = new yy.Op({left:$$[$0-4], op:'NOT LIKE', right:$$[$0-2], escape:$$[$0] }); \nbreak;\ncase 383:\n this.$ = new yy.Op({left:$$[$0-2], op:'||', right:$$[$0]}); \nbreak;\ncase 384:\n this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); \nbreak;\ncase 385:\n this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); \nbreak;\ncase 386:\n this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); \nbreak;\ncase 387:\n this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); \nbreak;\ncase 388:\n this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); \nbreak;\ncase 389:\n this.$ = new yy.Op({left:$$[$0-2], op:'^', right:$$[$0]}); \nbreak;\ncase 390:\n this.$ = new yy.Op({left:$$[$0-2], op:'>>', right:$$[$0]}); \nbreak;\ncase 391:\n this.$ = new yy.Op({left:$$[$0-2], op:'<<', right:$$[$0]}); \nbreak;\ncase 392:\n this.$ = new yy.Op({left:$$[$0-2], op:'&', right:$$[$0]}); \nbreak;\ncase 393:\n this.$ = new yy.Op({left:$$[$0-2], op:'|', right:$$[$0]}); \nbreak;\ncase 394: case 395: case 397:\n this.$ = new yy.Op({left:$$[$0-2], op:'->' , right:$$[$0]}); \nbreak;\ncase 396:\n this.$ = new yy.Op({left:$$[$0-4], op:'->' , right:$$[$0-1]}); \nbreak;\ncase 398: case 399: case 401:\n this.$ = new yy.Op({left:$$[$0-2], op:'!' , right:$$[$0]}); \nbreak;\ncase 400:\n this.$ = new yy.Op({left:$$[$0-4], op:'!' , right:$$[$0-1]}); \nbreak;\ncase 402:\n this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); \nbreak;\ncase 403:\n this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); \nbreak;\ncase 404:\n this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); \nbreak;\ncase 405:\n this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); \nbreak;\ncase 406:\n this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); \nbreak;\ncase 407:\n this.$ = new yy.Op({left:$$[$0-2], op:'==' , right:$$[$0]}); \nbreak;\ncase 408:\n this.$ = new yy.Op({left:$$[$0-2], op:'===' , right:$$[$0]}); \nbreak;\ncase 409:\n this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); \nbreak;\ncase 410:\n this.$ = new yy.Op({left:$$[$0-2], op:'!==' , right:$$[$0]}); \nbreak;\ncase 411:\n this.$ = new yy.Op({left:$$[$0-2], op:'!===' , right:$$[$0]}); \nbreak;\ncase 412:\n\n\t\t\tif(!yy.queries) yy.queries = []; \r\n\t\t\tthis.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); \r\n\t\t\tyy.queries.push($$[$0-1]);  \r\n\nbreak;\ncase 413:\n\n\t\t\tthis.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); \r\n\nbreak;\ncase 414:\n\n\t\t\tif($$[$0-2].op == 'BETWEEN1') {\r\n\n\t\t\t\tif($$[$0-2].left.op == 'AND') {\r\n\t\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2].left.left,op:'AND',right:\r\n\t\t\t\t\t\tnew yy.Op({left:$$[$0-2].left.right, op:'BETWEEN', \r\n\t\t\t\t\t\t\tright1:$$[$0-2].right, right2:$$[$0]})\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2].left, op:'BETWEEN', \r\n\t\t\t\t\t\tright1:$$[$0-2].right, right2:$$[$0]});\r\n\t\t\t\t}\r\n\n\t\t\t} else if($$[$0-2].op == 'NOT BETWEEN1') {\r\n\t\t\t\tif($$[$0-2].left.op == 'AND') {\r\n\t\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2].left.left,op:'AND',right:\r\n\t\t\t\t\t\tnew yy.Op({left:$$[$0-2].left.right, op:'NOT BETWEEN', \r\n\t\t\t\t\t\t\tright1:$$[$0-2].right, right2:$$[$0]})\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2].left, op:'NOT BETWEEN', \r\n\t\t\t\t\t\tright1:$$[$0-2].right, right2:$$[$0]});\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2], op:'AND', right:$$[$0]});\r\n\t\t\t}\r\n\nbreak;\ncase 415:\n this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); \nbreak;\ncase 416:\n this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); \nbreak;\ncase 417:\n this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); \nbreak;\ncase 418:\n this.$ = new yy.UniOp({op:'+' , right:$$[$0]}); \nbreak;\ncase 419:\n this.$ = new yy.UniOp({op:'~' , right:$$[$0]}); \nbreak;\ncase 420:\n this.$ = new yy.UniOp({op:'#' , right:$$[$0]}); \nbreak;\ncase 421:\n this.$ = new yy.UniOp({right: $$[$0-1]}); \nbreak;\ncase 422:\n\n\t\t\tif(!yy.queries) yy.queries = []; \r\n\t\t\tthis.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});\r\n\t\t\tyy.queries.push($$[$0-1]);  \r\n\nbreak;\ncase 423:\n\n\t\t\tif(!yy.queries) yy.queries = []; \r\n\t\t\tthis.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});\r\n\t\t\tyy.queries.push($$[$0-1]);  \r\n\nbreak;\ncase 424:\n this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); \nbreak;\ncase 425:\n this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); \nbreak;\ncase 426:\n this.$ = new yy.Op({left: $$[$0-3], op:'IN', right:[]}); \nbreak;\ncase 427:\n this.$ = new yy.Op({left: $$[$0-4], op:'NOT IN', right:[]}); \nbreak;\ncase 428: case 430:\n this.$ = new yy.Op({left: $$[$0-2], op:'IN', right:$$[$0]}); \nbreak;\ncase 429: case 431:\n this.$ = new yy.Op({left: $$[$0-3], op:'NOT IN', right:$$[$0]}); \nbreak;\ncase 432:\n\n/*\t\t\tvar expr = $$[$0];\r\n\t\t\tif(expr.left && expr.left.op == 'AND') {\r\n\t\t\t\tthis.$ = new yy.Op({left:new yy.Op({left:$$[$0-2], op:'BETWEEN', right:expr.left}), op:'AND', right:expr.right }); \r\n\t\t\t} else {\r\n*/\r\n\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN1', right:$$[$0] }); \r\n\nbreak;\ncase 433:\n\n\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN1', right:$$[$0] }); \r\n\nbreak;\ncase 434:\n this.$ = new yy.Op({op:'IS' , left:$$[$0-2], right:$$[$0]}); \nbreak;\ncase 435:\n\n\t\t\tthis.$ = new yy.Op({\r\n\t\t\t\top:'IS', \r\n\t\t\t\tleft:$$[$0-2], \r\n\t\t\t\tright: new yy.UniOp({\r\n\t\t\t\t\top:'NOT',\r\n\t\t\t\t\tright:new yy.NullValue({value:undefined}) \r\n\t\t\t\t})\r\n\t\t\t}); \r\n\nbreak;\ncase 436:\n this.$ = new yy.Convert({expression:$$[$0-2]}) ; yy.extend(this.$,$$[$0]) ; \nbreak;\ncase 437: case 438:\n this.$ = $$[$0];\nbreak;\ncase 439:\n this.$ = $$[$0-1];\nbreak;\ncase 446:\n this.$ = 'ALL'; \nbreak;\ncase 447:\n this.$ = 'SOME'; \nbreak;\ncase 448:\n this.$ = 'ANY'; \nbreak;\ncase 449:\n this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); \nbreak;\ncase 450:\n this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); \nbreak;\ncase 453:\n this.$ = new yy.SetColumn({column:$$[$0-2], expression:$$[$0]})\nbreak;\ncase 454:\n this.$ = new yy.SetColumn({variable:$$[$0-2], expression:$$[$0], method:$$[$0-3]})\nbreak;\ncase 455:\n this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});\nbreak;\ncase 456:\n this.$ = new yy.Delete({table:$$[$0]});\nbreak;\ncase 457:\n this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); \nbreak;\ncase 458:\n this.$ = new yy.Insert({into:$$[$0-1], values: $$[$0]}); \nbreak;\ncase 459: case 461:\n this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0], orreplace:true}); \nbreak;\ncase 460: case 462:\n this.$ = new yy.Insert({into:$$[$0-1], values: $$[$0], orreplace:true}); \nbreak;\ncase 463:\n this.$ = new yy.Insert({into:$$[$0-2], \"default\": true}) ; \nbreak;\ncase 464:\n this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); \nbreak;\ncase 465:\n this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], values: $$[$0]}); \nbreak;\ncase 466:\n this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); \nbreak;\ncase 467:\n this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0], orreplace:true}); \nbreak;\ncase 468:\n this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); \nbreak;\ncase 473:\n this.$ = [$$[$0-1]]; \nbreak;\ncase 476:\nthis.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])\nbreak;\ncase 477: case 478: case 480: case 488:\nthis.$ = $$[$0-2]; $$[$0-2].push($$[$0])\nbreak;\ncase 489:\n\n\t\t\tthis.$ = new yy.CreateTable({table:$$[$0-4]}); \r\n\t\t\tyy.extend(this.$,$$[$0-7]); \r\n\t\t\tyy.extend(this.$,$$[$0-6]); \r\n\t\t\tyy.extend(this.$,$$[$0-5]); \r\n\t\t\tyy.extend(this.$,$$[$0-2]); \r\n\t\t\tyy.extend(this.$,$$[$0]); \r\n\nbreak;\ncase 490:\n\n\t\t\tthis.$ = new yy.CreateTable({table:$$[$0]}); \r\n\t\t\tyy.extend(this.$,$$[$0-3]); \r\n\t\t\tyy.extend(this.$,$$[$0-2]); \r\n\t\t\tyy.extend(this.$,$$[$0-1]); \r\n\nbreak;\ncase 492:\n this.$ = {class:true}; \nbreak;\ncase 502:\n this.$ = {temporary:true}; \nbreak;\ncase 504:\n this.$ = {ifnotexists: true}; \nbreak;\ncase 505:\n this.$ = {columns: $$[$0-2], constraints: $$[$0]}; \nbreak;\ncase 506:\n this.$ = {columns: $$[$0]}; \nbreak;\ncase 507:\n this.$ = {as: $$[$0]} \nbreak;\ncase 508: case 532:\n this.$ = [$$[$0]];\nbreak;\ncase 510: case 511: case 512: case 513: case 514:\n $$[$0].constraintid = $$[$0-1]; this.$ = $$[$0]; \nbreak;\ncase 517:\n this.$ = {type: 'CHECK', expression: $$[$0-1]}; \nbreak;\ncase 518:\n this.$ = {type: 'PRIMARY KEY', columns: $$[$0-1], clustered:($$[$0-3]+'').toUpperCase()}; \nbreak;\ncase 519:\n this.$ = {type: 'FOREIGN KEY', columns: $$[$0-5], fktable: $$[$0-2], fkcolumns: $$[$0-1]}; \nbreak;\ncase 525:\n\n\t\t\tthis.$ = {type: 'UNIQUE', columns: $$[$0-1], clustered:($$[$0-3]+'').toUpperCase()};\r\n\nbreak;\ncase 534:\n this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);\nbreak;\ncase 535:\n this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); \nbreak;\ncase 536:\n this.$ = new yy.ColumnDef({columnid:$$[$0], dbtypeid: ''}); \nbreak;\ncase 537:\n this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: +$$[$0-1]} \nbreak;\ncase 538:\n this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} \nbreak;\ncase 539:\n this.$ = {dbtypeid: $$[$0]} \nbreak;\ncase 540:\n this.$ = {dbtypeid: 'ENUM', enumvalues: $$[$0-1]} \nbreak;\ncase 541:\n this.$ = $$[$0-1]; $$[$0-1].dbtypeid += '[' + $$[$0] + ']'; \nbreak;\ncase 543: case 750:\n this.$ = +$$[$0]; \nbreak;\ncase 545:\nthis.$ = undefined\nbreak;\ncase 547:\n\n\t\t\tyy.extend($$[$0-1],$$[$0]); this.$ = $$[$0-1];\r\n\nbreak;\ncase 550:\nthis.$ = {primarykey:true};\nbreak;\ncase 551: case 552:\nthis.$ = {foreignkey:{table:$$[$0-1], columnid: $$[$0]}};\nbreak;\ncase 553:\n this.$ = {identity: {value:$$[$0-3],step:$$[$0-1]}} \nbreak;\ncase 554:\n this.$ = {identity: {value:1,step:1}} \nbreak;\ncase 555: case 557:\nthis.$ = {\"default\":$$[$0]};\nbreak;\ncase 556:\nthis.$ = {\"default\":$$[$0-1]};\nbreak;\ncase 558:\nthis.$ = {null:true}; \nbreak;\ncase 559:\nthis.$ = {notnull:true}; \nbreak;\ncase 560:\nthis.$ = {check:$$[$0]}; \nbreak;\ncase 561:\nthis.$ = {unique:true}; \nbreak;\ncase 562:\nthis.$ = {\"onupdate\":$$[$0]};\nbreak;\ncase 563:\nthis.$ = {\"onupdate\":$$[$0-1]};\nbreak;\ncase 564:\n this.$ = new yy.DropTable({tables:$$[$0],type:$$[$0-2]}); yy.extend(this.$, $$[$0-1]); \nbreak;\ncase 568:\n this.$ = {ifexists: true};\nbreak;\ncase 569:\n this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0]});\nbreak;\ncase 570:\n this.$ = new yy.AlterTable({table:$$[$0-3], addcolumn: $$[$0]});\nbreak;\ncase 571:\n this.$ = new yy.AlterTable({table:$$[$0-3], modifycolumn: $$[$0]});\nbreak;\ncase 572:\n this.$ = new yy.AlterTable({table:$$[$0-5], renamecolumn: $$[$0-2], to: $$[$0]});\nbreak;\ncase 573:\n this.$ = new yy.AlterTable({table:$$[$0-3], dropcolumn: $$[$0]});\nbreak;\ncase 574:\n this.$ = new yy.AlterTable({table:$$[$0-2], renameto: $$[$0]});\nbreak;\ncase 575:\n this.$ = new yy.AttachDatabase({databaseid:$$[$0], engineid:$$[$0-2].toUpperCase() });\nbreak;\ncase 576:\n this.$ = new yy.AttachDatabase({databaseid:$$[$0-3], engineid:$$[$0-5].toUpperCase(), args:$$[$0-1] });\nbreak;\ncase 577:\n this.$ = new yy.AttachDatabase({databaseid:$$[$0-2], engineid:$$[$0-4].toUpperCase(), as:$$[$0] });\nbreak;\ncase 578:\n this.$ = new yy.AttachDatabase({databaseid:$$[$0-5], engineid:$$[$0-7].toUpperCase(), as:$$[$0], args:$$[$0-3]});\nbreak;\ncase 579:\n this.$ = new yy.DetachDatabase({databaseid:$$[$0]});\nbreak;\ncase 580:\n this.$ = new yy.CreateDatabase({databaseid:$$[$0] }); yy.extend(this.$,$$[$0]); \nbreak;\ncase 581:\n this.$ = new yy.CreateDatabase({engineid:$$[$0-4].toUpperCase(), databaseid:$$[$0-1], as:$$[$0] }); yy.extend(this.$,$$[$0-2]); \nbreak;\ncase 582:\n this.$ = new yy.CreateDatabase({engineid:$$[$0-7].toUpperCase(), databaseid:$$[$0-4], args:$$[$0-2], as:$$[$0] }); yy.extend(this.$,$$[$0-5]); \nbreak;\ncase 583:\n this.$ = new yy.CreateDatabase({engineid:$$[$0-4].toUpperCase(), \r\n\t\t    as:$$[$0], args:[$$[$0-1]] }); yy.extend(this.$,$$[$0-2]); \nbreak;\ncase 584:\nthis.$ = undefined;\nbreak;\ncase 586: case 587:\n this.$ = new yy.UseDatabase({databaseid: $$[$0] });\nbreak;\ncase 588:\n this.$ = new yy.DropDatabase({databaseid: $$[$0] }); yy.extend(this.$,$$[$0-1]); \nbreak;\ncase 589: case 590:\n this.$ = new yy.DropDatabase({databaseid: $$[$0], engineid:$$[$0-3].toUpperCase() }); yy.extend(this.$,$$[$0-1]); \nbreak;\ncase 591:\n this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1]})\nbreak;\ncase 592:\n this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1], unique:true})\nbreak;\ncase 593:\n this.$ = new yy.DropIndex({indexid:$$[$0]});\nbreak;\ncase 594:\n this.$ = new yy.ShowDatabases();\nbreak;\ncase 595:\n this.$ = new yy.ShowDatabases({like:$$[$0]});\nbreak;\ncase 596:\n this.$ = new yy.ShowDatabases({engineid:$$[$0-1].toUpperCase() });\nbreak;\ncase 597:\n this.$ = new yy.ShowDatabases({engineid:$$[$0-3].toUpperCase() , like:$$[$0]});\nbreak;\ncase 598:\n this.$ = new yy.ShowTables();\nbreak;\ncase 599:\n this.$ = new yy.ShowTables({like:$$[$0]});\nbreak;\ncase 600:\n this.$ = new yy.ShowTables({databaseid: $$[$0]});\nbreak;\ncase 601:\n this.$ = new yy.ShowTables({like:$$[$0], databaseid: $$[$0-2]});\nbreak;\ncase 602:\n this.$ = new yy.ShowColumns({table: $$[$0]});\nbreak;\ncase 603:\n this.$ = new yy.ShowColumns({table: $$[$0-2], databaseid:$$[$0]});\nbreak;\ncase 604:\n this.$ = new yy.ShowIndex({table: $$[$0]});\nbreak;\ncase 605:\n this.$ = new yy.ShowIndex({table: $$[$0-2], databaseid: $$[$0]});\nbreak;\ncase 606:\n this.$ = new yy.ShowCreateTable({table: $$[$0]});\nbreak;\ncase 607:\n this.$ = new yy.ShowCreateTable({table: $$[$0-2], databaseid:$$[$0]});\nbreak;\ncase 608:\n\n\t\t\tthis.$ = new yy.CreateTable({table:$$[$0-6],view:true,select:$$[$0-1],viewcolumns:$$[$0-4]}); \r\n\t\t\tyy.extend(this.$,$$[$0-9]); \r\n\t\t\tyy.extend(this.$,$$[$0-7]); \r\n\nbreak;\ncase 609:\n\n\t\t\tthis.$ = new yy.CreateTable({table:$$[$0-3],view:true,select:$$[$0-1]}); \r\n\t\t\tyy.extend(this.$,$$[$0-6]); \r\n\t\t\tyy.extend(this.$,$$[$0-4]); \r\n\nbreak;\ncase 613:\n this.$ = new yy.DropTable({tables:$$[$0], view:true}); yy.extend(this.$, $$[$0-1]); \nbreak;\ncase 614: case 760:\n this.$ = new yy.ExpressionStatement({expression:$$[$0]}); \nbreak;\ncase 615:\n this.$ = new yy.Source({url:$$[$0].value}); \nbreak;\ncase 616:\n this.$ = new yy.Assert({value:$$[$0]}); \nbreak;\ncase 617:\n this.$ = new yy.Assert({value:$$[$0].value}); \nbreak;\ncase 618:\n this.$ = new yy.Assert({value:$$[$0], message:$$[$0-2]}); \nbreak;\ncase 620: case 631: case 633:\n this.$ = $$[$0].value; \nbreak;\ncase 621: case 629:\n this.$ = +$$[$0].value; \nbreak;\ncase 622:\n this.$ = (!!$$[$0].value); \nbreak;\ncase 630:\n this.$ = \"\"+$$[$0].value; \nbreak;\ncase 639:\n this.$ = {}; \nbreak;\ncase 642:\n this.$ = []; \nbreak;\ncase 643:\n yy.extend($$[$0-2],$$[$0]); this.$ = $$[$0-2]; \nbreak;\ncase 645:\n this.$ = {}; this.$[$$[$0-2].substr(1,$$[$0-2].length-2)] = $$[$0]; \nbreak;\ncase 646: case 647:\n this.$ = {}; this.$[$$[$0-2]] = $$[$0]; \nbreak;\ncase 650:\n this.$ = new yy.SetVariable({variable:$$[$0-2].toLowerCase(), value:$$[$0]});\nbreak;\ncase 651:\n this.$ = new yy.SetVariable({variable:$$[$0-1].toLowerCase(), value:$$[$0]});\nbreak;\ncase 652:\n this.$ = new yy.SetVariable({variable:$$[$0-2], expression:$$[$0]});\nbreak;\ncase 653:\n this.$ = new yy.SetVariable({variable:$$[$0-3], props: $$[$0-2], expression:$$[$0]});\nbreak;\ncase 654:\n this.$ = new yy.SetVariable({variable:$$[$0-2], expression:$$[$0], method:$$[$0-3]});\nbreak;\ncase 655:\n this.$ = new yy.SetVariable({variable:$$[$0-3], props: $$[$0-2], expression:$$[$0], method:$$[$0-4]});\nbreak;\ncase 656:\nthis.$ = '@'; \nbreak;\ncase 657:\nthis.$ = '$'; \nbreak;\ncase 663:\n this.$ = true; \nbreak;\ncase 664:\n this.$ = false; \nbreak;\ncase 665:\n this.$ = new yy.CommitTransaction(); \nbreak;\ncase 666:\n this.$ = new yy.RollbackTransaction(); \nbreak;\ncase 667:\n this.$ = new yy.BeginTransaction(); \nbreak;\ncase 668:\n this.$ = new yy.If({expression:$$[$0-2],thenstat:$$[$0-1], elsestat:$$[$0]}); \r\n\t\t\tif($$[$0-1].exists) this.$.exists = $$[$0-1].exists;\r\n\t\t\tif($$[$0-1].queries) this.$.queries = $$[$0-1].queries;\r\n\nbreak;\ncase 669:\n\n\t\t\tthis.$ = new yy.If({expression:$$[$0-1],thenstat:$$[$0]}); \r\n\t\t\tif($$[$0].exists) this.$.exists = $$[$0].exists;\r\n\t\t\tif($$[$0].queries) this.$.queries = $$[$0].queries;\r\n\nbreak;\ncase 670:\nthis.$ = $$[$0];\nbreak;\ncase 671:\n this.$ = new yy.While({expression:$$[$0-1],loopstat:$$[$0]}); \r\n\t\t\tif($$[$0].exists) this.$.exists = $$[$0].exists;\r\n\t\t\tif($$[$0].queries) this.$.queries = $$[$0].queries;\r\n\nbreak;\ncase 672:\n this.$ = new yy.Continue(); \nbreak;\ncase 673:\n this.$ = new yy.Break(); \nbreak;\ncase 674:\n this.$ = new yy.BeginEnd({statements:$$[$0-1]}); \nbreak;\ncase 675:\n this.$ = new yy.Print({exprs:$$[$0]});\nbreak;\ncase 676:\n this.$ = new yy.Print({select:$$[$0]});\nbreak;\ncase 677:\n this.$ = new yy.Require({paths:$$[$0]}); \nbreak;\ncase 678:\n this.$ = new yy.Require({plugins:$$[$0]}); \nbreak;\ncase 679: case 680:\nthis.$ = $$[$0].toUpperCase(); \nbreak;\ncase 681:\n this.$ = new yy.Echo({expr:$$[$0]}); \nbreak;\ncase 686:\n this.$ = new yy.Declare({declares:$$[$0]}); \nbreak;\ncase 689:\n this.$ = {variable: $$[$0-1]}; yy.extend(this.$,$$[$0]); \nbreak;\ncase 690:\n this.$ = {variable: $$[$0-2]}; yy.extend(this.$,$$[$0]); \nbreak;\ncase 691:\n this.$ = {variable: $$[$0-3], expression:$$[$0]}; yy.extend(this.$,$$[$0-2]);\nbreak;\ncase 692:\n this.$ = {variable: $$[$0-4], expression:$$[$0]}; yy.extend(this.$,$$[$0-2]);\nbreak;\ncase 693:\n this.$ = new yy.TruncateTable({table:$$[$0]});\nbreak;\ncase 694:\n\n\t\t\tthis.$ = new yy.Merge(); yy.extend(this.$,$$[$0-4]); yy.extend(this.$,$$[$0-3]); \r\n\t\t\tyy.extend(this.$,$$[$0-2]);\r\n\t\t\tyy.extend(this.$,{matches:$$[$0-1]});yy.extend(this.$,$$[$0]);\r\n\nbreak;\ncase 695: case 696:\n this.$ = {into: $$[$0]}; \nbreak;\ncase 698:\n this.$ = {on:$$[$0]}; \nbreak;\ncase 703:\n this.$ = {matched:true, action:$$[$0]} \nbreak;\ncase 704:\n this.$ = {matched:true, expr: $$[$0-2], action:$$[$0]} \nbreak;\ncase 705:\n this.$ = {delete:true}; \nbreak;\ncase 706:\n this.$ = {update:$$[$0]}; \nbreak;\ncase 707: case 708:\n this.$ = {matched:false, bytarget: true, action:$$[$0]} \nbreak;\ncase 709: case 710:\n this.$ = {matched:false, bytarget: true, expr:$$[$0-2], action:$$[$0]} \nbreak;\ncase 711:\n this.$ = {matched:false, bysource: true, action:$$[$0]} \nbreak;\ncase 712:\n this.$ = {matched:false, bysource: true, expr:$$[$0-2], action:$$[$0]} \nbreak;\ncase 713:\n this.$ = {insert:true, values:$$[$0]}; \nbreak;\ncase 714:\n this.$ = {insert:true, values:$$[$0], columns:$$[$0-3]}; \nbreak;\ncase 715:\n this.$ = {insert:true, defaultvalues:true}; \nbreak;\ncase 716:\n this.$ = {insert:true, defaultvalues:true, columns:$$[$0-3]}; \nbreak;\ncase 718:\n this.$ = {output:{columns:$$[$0]}} \nbreak;\ncase 719:\n this.$ = {output:{columns:$$[$0-3], intovar: $$[$0], method:$$[$0-1]}} \nbreak;\ncase 720:\n this.$ = {output:{columns:$$[$0-2], intotable: $$[$0]}} \nbreak;\ncase 721:\n this.$ = {output:{columns:$$[$0-5], intotable: $$[$0-3], intocolumns:$$[$0-1]}} \nbreak;\ncase 722:\n\n\t\t\tthis.$ = new yy.CreateVertex({class:$$[$0-3],sharp:$$[$0-2], name:$$[$0-1]}); \r\n\t\t\tyy.extend(this.$,$$[$0]); \r\n\nbreak;\ncase 725:\n this.$ = {sets:$$[$0]}; \nbreak;\ncase 726:\n this.$ = {content:$$[$0]}; \nbreak;\ncase 727:\n this.$ = {select:$$[$0]}; \nbreak;\ncase 728:\n\n\t\t\tthis.$ = new yy.CreateEdge({from:$$[$0-3],to:$$[$0-1],name:$$[$0-5]});\r\n\t\t\tyy.extend(this.$,$$[$0]); \r\n\nbreak;\ncase 729:\n this.$ = new yy.CreateGraph({graph:$$[$0]}); \nbreak;\ncase 730:\n this.$ = new yy.CreateGraph({from:$$[$0]}); \nbreak;\ncase 733:\n\n\t\t\tthis.$ = $$[$0-2]; \r\n\t\t\tif($$[$0-1]) this.$.json = new yy.Json({value:$$[$0-1]});\r\n\t\t\tif($$[$0]) this.$.as = $$[$0];\r\n\nbreak;\ncase 734:\n\n\t\t\tthis.$ = {source:$$[$0-6], target: $$[$0]};\r\n\t\t\tif($$[$0-3]) this.$.json = new yy.Json({value:$$[$0-3]});\r\n\t\t\tif($$[$0-2]) this.$.as = $$[$0-2];\r\n\t\t\tyy.extend(this.$,$$[$0-4]);\r\n\nbreak;\ncase 735:\n\n\t\t\tthis.$ = {source:$$[$0-5], target: $$[$0]};\r\n\t\t\tif($$[$0-2]) this.$.json = new yy.Json({value:$$[$0-3]});\r\n\t\t\tif($$[$0-1]) this.$.as = $$[$0-2];\r\n\nbreak;\ncase 736:\n\n\t\t\tthis.$ = {source:$$[$0-2], target: $$[$0]};\r\n\nbreak;\ncase 740:\n this.$ = {vars:$$[$0], method:$$[$0-1]}; \nbreak;\ncase 743: case 744:\n\n\t\t\tvar s3 = $$[$0-1];\r\n\t\t\tthis.$ = {prop:$$[$0-3], sharp:$$[$0-2], name:(typeof s3 == 'undefined')?undefined:s3.substr(1,s3.length-2), class:$$[$0]}; \r\n\nbreak;\ncase 745:\n\n\t\t\tvar s2 = $$[$0-1];\r\n\t\t\tthis.$ = {sharp:$$[$0-2], name:(typeof s2 == 'undefined')?undefined:s2.substr(1,s2.length-2), class:$$[$0]}; \r\n\nbreak;\ncase 746:\n\n\t\t\tvar s1 = $$[$0-1];\r\n\t\t\tthis.$ = {name:(typeof s1 == 'undefined')?undefined:s1.substr(1,s1.length-2), class:$$[$0]}; \r\n\nbreak;\ncase 747:\n\n\t\t\tthis.$ = {class:$$[$0]}; \r\n\nbreak;\ncase 753:\n this.$ = new yy.AddRule({left:$$[$0-2], right:$$[$0]}); \nbreak;\ncase 754:\n this.$ = new yy.AddRule({right:$$[$0]}); \nbreak;\ncase 757:\n this.$ = new yy.Term({termid:$$[$0]}); \nbreak;\ncase 758:\n this.$ = new yy.Term({termid:$$[$0-3],args:$$[$0-1]}); \nbreak;\ncase 761:\n\n\t\t\tthis.$ = new yy.CreateTrigger({trigger:$$[$0-6], when:$$[$0-5], action:$$[$0-4], table:$$[$0-2], statement:$$[$0]}); \r\n\t\t\tif($$[$0].exists) this.$.exists = $$[$0].exists;\r\n\t\t\tif($$[$0].queries) this.$.queries = $$[$0].queries;\r\n\nbreak;\ncase 762:\n\n\t\t\tthis.$ = new yy.CreateTrigger({trigger:$$[$0-5], when:$$[$0-4], action:$$[$0-3], table:$$[$0-1], funcid:$$[$0]}); \r\n\nbreak;\ncase 763:\n\n\t\t\tthis.$ = new yy.CreateTrigger({trigger:$$[$0-6], when:$$[$0-4], action:$$[$0-3], table:$$[$0-5], statement:$$[$0]}); \r\n\t\t\tif($$[$0].exists) this.$.exists = $$[$0].exists;\r\n\t\t\tif($$[$0].queries) this.$.queries = $$[$0].queries;\r\n\nbreak;\ncase 764: case 765: case 767:\n this.$ = 'AFTER'; \nbreak;\ncase 766:\n this.$ = 'BEFORE'; \nbreak;\ncase 768:\n this.$ = 'INSTEADOF'; \nbreak;\ncase 769:\n this.$ = 'INSERT'; \nbreak;\ncase 770:\n this.$ = 'DELETE'; \nbreak;\ncase 771:\n this.$ = 'UPDATE'; \nbreak;\ncase 772:\n this.$ = new yy.DropTrigger({trigger:$$[$0]}); \nbreak;\ncase 773:\n this.$ = new yy.Reindex({indexid:$$[$0]});\nbreak;\ncase 1047: case 1067: case 1069: case 1071: case 1075: case 1077: case 1079: case 1081: case 1083: case 1085:\nthis.$ = [];\nbreak;\ncase 1048: case 1062: case 1064: case 1068: case 1070: case 1072: case 1076: case 1078: case 1080: case 1082: case 1084: case 1086:\n$$[$0-1].push($$[$0]);\nbreak;\ncase 1061: case 1063:\nthis.$ = [$$[$0]];\nbreak;\n}\n},\ntable: [o([10,602,764],$V0,{8:1,9:2,12:3,13:4,17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,504:95,184:99,3:100,2:$V1,4:$V2,5:$V3,14:$V4,53:$V5,72:$V6,89:$V7,124:$V8,146:$V9,156:$Va,189:$Vb,266:$Vc,267:$Vd,290:$Ve,335:$Vf,338:$Vg,339:$Vh,396:$Vi,400:$Vj,401:$Vk,404:$Vl,406:$Vm,408:$Vn,409:$Vo,417:$Vp,418:$Vq,434:$Vr,436:$Vs,437:$Vt,439:$Vu,440:$Vv,441:$Vw,442:$Vx,443:$Vy,447:$Vz,448:$VA,451:$VB,452:$VC,505:$VD,507:$VE,508:$VF,517:$VG}),{1:[3]},{10:[1,105],11:106,602:$VH,764:$VI},o($VJ,[2,8]),o($VJ,[2,9]),o($VK,[2,12]),o($VJ,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,504:95,184:99,3:100,12:109,2:$V1,4:$V2,5:$V3,15:[1,110],53:$V5,72:$V6,89:$V7,124:$V8,146:$V9,156:$Va,189:$Vb,266:$Vc,267:$Vd,290:$Ve,335:$Vf,338:$Vg,339:$Vh,396:$Vi,400:$Vj,401:$Vk,404:$Vl,406:$Vm,408:$Vn,409:$Vo,417:$Vp,418:$Vq,434:$Vr,436:$Vs,437:$Vt,439:$Vu,440:$Vv,441:$Vw,442:$Vx,443:$Vy,447:$Vz,448:$VA,451:$VB,452:$VC,505:$VD,507:$VE,508:$VF,517:$VG}),o($VK,[2,14]),o($VK,[2,15]),o($VK,[2,16]),o($VK,[2,17]),o($VK,[2,18]),o($VK,[2,19]),o($VK,[2,20]),o($VK,[2,21]),o($VK,[2,22]),o($VK,[2,23]),o($VK,[2,24]),o($VK,[2,25]),o($VK,[2,26]),o($VK,[2,27]),o($VK,[2,28]),o($VK,[2,29]),o($VK,[2,30]),o($VK,[2,31]),o($VK,[2,32]),o($VK,[2,33]),o($VK,[2,34]),o($VK,[2,35]),o($VK,[2,36]),o($VK,[2,37]),o($VK,[2,38]),o($VK,[2,39]),o($VK,[2,40]),o($VK,[2,41]),o($VK,[2,42]),o($VK,[2,43]),o($VK,[2,44]),o($VK,[2,45]),o($VK,[2,46]),o($VK,[2,47]),o($VK,[2,48]),o($VK,[2,49]),o($VK,[2,50]),o($VK,[2,51]),o($VK,[2,52]),o($VK,[2,53]),o($VK,[2,54]),o($VK,[2,55]),o($VK,[2,56]),o($VK,[2,57]),o($VK,[2,58]),o($VK,[2,59]),o($VK,[2,60]),o($VK,[2,61]),o($VK,[2,62]),o($VK,[2,63]),o($VK,[2,64]),o($VK,[2,65]),o($VK,[2,66]),o($VK,[2,67]),{353:[1,111]},{2:$V1,3:112,4:$V2,5:$V3},{2:$V1,3:114,4:$V2,5:$V3,156:$VL,200:113,290:$VM,291:$VN,292:$VO,293:$VP},o($VQ,[2,501],{3:121,348:125,2:$V1,4:$V2,5:$V3,134:$VR,135:$VS,187:[1,123],193:[1,122],268:[1,129],269:[1,130],357:[1,131],405:[1,120],472:[1,124],509:[1,128]}),{145:$VT,449:132,450:133},{183:[1,135]},{405:[1,136]},{2:$V1,3:138,4:$V2,5:$V3,130:[1,144],193:[1,139],353:[1,143],397:140,405:[1,137],410:[1,141],509:[1,142]},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:145,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($Vt1,$Vu1,{340:204,171:[1,205],198:$Vv1}),o($Vt1,$Vu1,{340:207,198:$Vv1}),{2:$V1,3:219,4:$V2,5:$V3,77:$Vw1,132:$Vx1,143:$VY,144:212,145:$VZ,152:$V$,156:$VL,181:$V31,198:[1,210],199:213,200:215,201:214,202:217,209:209,213:$Vy1,214:218,290:$VM,291:$VN,292:$VO,293:$VP,302:$Vn1,419:190,420:$Vr1,424:$Vs1,453:208},{2:$V1,3:221,4:$V2,5:$V3},{353:[1,222]},o($Vz1,[2,1043],{80:223,106:224,107:[1,225]}),o($VA1,[2,1047],{90:226}),{2:$V1,3:230,4:$V2,5:$V3,190:[1,228],193:[1,231],267:[1,227],353:[1,232],405:[1,229]},{353:[1,233]},{2:$V1,3:236,4:$V2,5:$V3,73:234,75:235},o([306,602,764],$V0,{12:3,13:4,17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,504:95,184:99,3:100,9:238,2:$V1,4:$V2,5:$V3,14:$V4,53:$V5,72:$V6,89:$V7,124:$V8,146:$V9,156:$Va,189:$Vb,266:$Vc,267:$Vd,290:$Ve,335:$Vf,338:$Vg,339:$Vh,396:$Vi,400:$Vj,401:$Vk,404:$Vl,406:$Vm,408:$Vn,409:$Vo,417:$Vp,418:$Vq,434:$Vr,435:[1,237],436:$Vs,437:$Vt,439:$Vu,440:$Vv,441:$Vw,442:$Vx,443:$Vy,447:$Vz,448:$VA,451:$VB,452:$VC,505:$VD,507:$VE,508:$VF,517:$VG}),{435:[1,239]},{435:[1,240]},{2:$V1,3:242,4:$V2,5:$V3,405:[1,241]},{2:$V1,3:244,4:$V2,5:$V3,199:243},o($VB1,[2,311]),{113:245,132:$VW,296:$Vj1},{2:$V1,3:114,4:$V2,5:$V3,113:251,131:$VV,132:[1,248],143:$VY,144:246,145:$VC1,152:$V$,156:$VL,181:$V31,196:250,200:255,201:254,257:252,258:253,265:$VD1,274:247,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,302:$Vn1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:257,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VK,[2,672]),o($VK,[2,673]),{2:$V1,3:168,4:$V2,5:$V3,40:259,56:165,77:$VU,79:75,89:$V7,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:258,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,184:99,189:$Vb,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:266,4:$V2,5:$V3,113:263,132:$VW,296:$Vj1,444:261,445:262,446:264,447:$VE1},{2:$V1,3:267,4:$V2,5:$V3,143:$VF1,145:$VG1,431:268},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:271,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{505:[1,272]},{2:$V1,3:100,4:$V2,5:$V3,504:274,506:273},{2:$V1,3:114,4:$V2,5:$V3,156:$VL,200:275,290:$VM,291:$VN,292:$VO,293:$VP},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:276,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VH1,$VI1,{186:280,164:[1,279],185:[1,277],187:[1,278],195:$VJ1}),o($VK1,[2,757],{77:[1,282]}),o([2,4,5,10,72,77,78,93,98,107,118,128,131,132,137,143,145,152,154,156,162,164,168,169,179,180,181,183,185,187,195,198,232,245,247,265,266,270,271,273,280,281,282,283,284,285,286,287,288,290,291,292,293,294,295,296,297,298,299,302,303,306,310,312,317,420,424,602,764],[2,152],{149:[1,283],150:[1,284],190:[1,285],191:[1,286],192:[1,287],193:[1,288],194:[1,289]}),o($VL1,[2,1]),o($VL1,[2,2]),{6:290,131:[1,439],172:[1,462],245:[1,411],285:[1,373],286:[1,407],370:[1,404],381:[1,295],402:[1,297],410:[1,549],414:[1,471],416:[1,443],417:[1,509],433:[1,442],435:[1,525],440:[1,342],460:[1,418],464:[1,448],470:[1,341],514:[1,307],515:[1,299],516:[1,399],518:[1,291],519:[1,292],520:[1,293],521:[1,294],522:[1,296],523:[1,298],524:[1,300],525:[1,301],526:[1,302],527:[1,303],528:[1,304],529:[1,305],530:[1,306],531:[1,308],532:[1,309],533:[1,310],534:[1,311],535:[1,312],536:[1,313],537:[1,314],538:[1,315],539:[1,316],540:[1,317],541:[1,318],542:[1,319],543:[1,320],544:[1,321],545:[1,322],546:[1,323],547:[1,324],548:[1,325],549:[1,326],550:[1,327],551:[1,328],552:[1,329],553:[1,330],554:[1,331],555:[1,332],556:[1,333],557:[1,334],558:[1,335],559:[1,336],560:[1,337],561:[1,338],562:[1,339],563:[1,340],564:[1,343],565:[1,344],566:[1,345],567:[1,346],568:[1,347],569:[1,348],570:[1,349],571:[1,350],572:[1,351],573:[1,352],574:[1,353],575:[1,354],576:[1,355],577:[1,356],578:[1,357],579:[1,358],580:[1,359],581:[1,360],582:[1,361],583:[1,362],584:[1,363],585:[1,364],586:[1,365],587:[1,366],588:[1,367],589:[1,368],590:[1,369],591:[1,370],592:[1,371],593:[1,372],594:[1,374],595:[1,375],596:[1,376],597:[1,377],598:[1,378],599:[1,379],600:[1,380],601:[1,381],602:[1,382],603:[1,383],604:[1,384],605:[1,385],606:[1,386],607:[1,387],608:[1,388],609:[1,389],610:[1,390],611:[1,391],612:[1,392],613:[1,393],614:[1,394],615:[1,395],616:[1,396],617:[1,397],618:[1,398],619:[1,400],620:[1,401],621:[1,402],622:[1,403],623:[1,405],624:[1,406],625:[1,408],626:[1,409],627:[1,410],628:[1,412],629:[1,413],630:[1,414],631:[1,415],632:[1,416],633:[1,417],634:[1,419],635:[1,420],636:[1,421],637:[1,422],638:[1,423],639:[1,424],640:[1,425],641:[1,426],642:[1,427],643:[1,428],644:[1,429],645:[1,430],646:[1,431],647:[1,432],648:[1,433],649:[1,434],650:[1,435],651:[1,436],652:[1,437],653:[1,438],654:[1,440],655:[1,441],656:[1,444],657:[1,445],658:[1,446],659:[1,447],660:[1,449],661:[1,450],662:[1,451],663:[1,452],664:[1,453],665:[1,454],666:[1,455],667:[1,456],668:[1,457],669:[1,458],670:[1,459],671:[1,460],672:[1,461],673:[1,463],674:[1,464],675:[1,465],676:[1,466],677:[1,467],678:[1,468],679:[1,469],680:[1,470],681:[1,472],682:[1,473],683:[1,474],684:[1,475],685:[1,476],686:[1,477],687:[1,478],688:[1,479],689:[1,480],690:[1,481],691:[1,482],692:[1,483],693:[1,484],694:[1,485],695:[1,486],696:[1,487],697:[1,488],698:[1,489],699:[1,490],700:[1,491],701:[1,492],702:[1,493],703:[1,494],704:[1,495],705:[1,496],706:[1,497],707:[1,498],708:[1,499],709:[1,500],710:[1,501],711:[1,502],712:[1,503],713:[1,504],714:[1,505],715:[1,506],716:[1,507],717:[1,508],718:[1,510],719:[1,511],720:[1,512],721:[1,513],722:[1,514],723:[1,515],724:[1,516],725:[1,517],726:[1,518],727:[1,519],728:[1,520],729:[1,521],730:[1,522],731:[1,523],732:[1,524],733:[1,526],734:[1,527],735:[1,528],736:[1,529],737:[1,530],738:[1,531],739:[1,532],740:[1,533],741:[1,534],742:[1,535],743:[1,536],744:[1,537],745:[1,538],746:[1,539],747:[1,540],748:[1,541],749:[1,542],750:[1,543],751:[1,544],752:[1,545],753:[1,546],754:[1,547],755:[1,548],756:[1,550],757:[1,551],758:[1,552],759:[1,553],760:[1,554],761:[1,555],762:[1,556],763:[1,557]},{1:[2,6]},o($VJ,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,504:95,184:99,3:100,12:558,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,124:$V8,146:$V9,156:$Va,189:$Vb,266:$Vc,267:$Vd,290:$Ve,335:$Vf,338:$Vg,339:$Vh,396:$Vi,400:$Vj,401:$Vk,404:$Vl,406:$Vm,408:$Vn,409:$Vo,417:$Vp,418:$Vq,434:$Vr,436:$Vs,437:$Vt,439:$Vu,440:$Vv,441:$Vw,442:$Vx,443:$Vy,447:$Vz,448:$VA,451:$VB,452:$VC,505:$VD,507:$VE,508:$VF,517:$VG}),o($VM1,[2,1041]),o($VM1,[2,1042]),o($VJ,[2,10]),{16:[1,559]},{2:$V1,3:244,4:$V2,5:$V3,199:560},{405:[1,561]},o($VK,[2,760]),{77:$VN1},{77:[1,563]},{77:$VO1},{77:[1,565]},{77:[1,566]},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:567,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($Vt1,$VP1,{350:568,156:$VQ1}),{405:[1,570]},{2:$V1,3:571,4:$V2,5:$V3},{193:[1,572]},{2:$V1,3:578,4:$V2,5:$V3,132:$VR1,137:$VS1,143:$VF1,145:$VG1,152:$VT1,183:[1,574],431:585,473:573,474:575,475:576,478:577,482:582,493:579,497:581},{130:[1,589],349:586,353:[1,588],410:[1,587]},{113:591,132:$VW,183:[2,1141],296:$Vj1,471:590},o($VU1,[2,1135],{465:592,3:593,2:$V1,4:$V2,5:$V3}),{2:$V1,3:594,4:$V2,5:$V3},{4:[1,595]},{4:[1,596]},o($VQ,[2,502]),o($VK,[2,686],{74:[1,597]}),o($VV1,[2,687]),{2:$V1,3:598,4:$V2,5:$V3},{2:$V1,3:244,4:$V2,5:$V3,199:599},{2:$V1,3:600,4:$V2,5:$V3},o($Vt1,$VW1,{398:601,156:$VX1}),{405:[1,603]},{2:$V1,3:604,4:$V2,5:$V3},o($Vt1,$VW1,{398:605,156:$VX1}),o($Vt1,$VW1,{398:606,156:$VX1}),{2:$V1,3:607,4:$V2,5:$V3},o($VY1,[2,1129]),o($VY1,[2,1130]),o($VK,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,504:95,184:99,3:100,12:608,114:625,327:637,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$V22,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,146:$V9,154:$Va2,156:$Va,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,189:$Vb,266:$Vc,267:$Vd,290:$Ve,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2,335:$Vf,338:$Vg,339:$Vh,396:$Vi,400:$Vj,401:$Vk,404:$Vl,406:$Vm,408:$Vn,409:$Vo,417:$Vp,418:$Vq,434:$Vr,436:$Vs,437:$Vt,439:$Vu,440:$Vv,441:$Vw,442:$Vx,443:$Vy,447:$Vz,448:$VA,451:$VB,452:$VC,505:$VD,507:$VE,508:$VF,517:$VG}),o($VB1,[2,288]),o($VB1,[2,289]),o($VB1,[2,290]),o($VB1,[2,291]),o($VB1,[2,292]),o($VB1,[2,293]),o($VB1,[2,294]),o($VB1,[2,295]),o($VB1,[2,296]),o($VB1,[2,297]),o($VB1,[2,298]),o($VB1,[2,299]),o($VB1,[2,300]),o($VB1,[2,301]),o($VB1,[2,302]),o($VB1,[2,303]),o($VB1,[2,304]),o($VB1,[2,305]),{2:$V1,3:168,4:$V2,5:$V3,26:654,27:653,36:649,40:648,56:165,77:$VU,79:75,89:$V7,94:651,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,184:99,189:$Vb,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,264:650,265:$V41,266:$Vc,267:[1,655],270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:[1,652],291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,339:$Vh,419:190,420:$Vr1,424:$Vs1},o($VB1,[2,309]),o($VB1,[2,310]),{77:[1,656]},o([2,4,5,10,53,72,74,76,78,89,93,95,98,99,107,112,115,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$Vy2,{77:$VN1,116:[1,657]}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:658,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:659,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:660,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:661,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:662,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VB1,[2,283]),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,230,231,232,239,242,243,245,247,249,265,266,267,270,271,273,280,281,282,283,284,285,286,287,288,290,291,292,293,294,295,296,297,298,299,300,302,303,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,343,356,368,369,373,374,396,400,401,404,406,408,409,415,417,418,420,424,426,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764,765,766],[2,356]),o($Vz2,[2,357]),o($Vz2,[2,358]),o($Vz2,$VA2),o($Vz2,[2,360]),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,230,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,297,300,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,343,356,368,369,373,374,396,400,401,404,406,408,409,417,418,420,424,426,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],[2,361]),{2:$V1,3:664,4:$V2,5:$V3,131:[1,665],301:663},{2:$V1,3:666,4:$V2,5:$V3},o($Vz2,[2,367]),o($Vz2,[2,368]),{2:$V1,3:667,4:$V2,5:$V3,77:$VB2,113:669,131:$VV,132:$VW,143:$VY,152:$V$,181:$V31,196:670,201:672,257:671,294:$Vh1,295:$Vi1,296:$Vj1,302:$Vn1,419:673,424:$Vs1},{77:[1,674]},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:675,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,304:676,307:677,308:$VC2,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{77:[1,679]},{77:[1,680]},o($VD2,[2,624]),{2:$V1,3:695,4:$V2,5:$V3,77:$VE2,111:690,113:688,131:$VV,132:$VW,143:$VY,144:685,145:$VC1,152:$V$,156:$VL,181:$V31,196:687,200:693,201:692,257:689,258:691,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,300:[1,683],302:$Vn1,419:190,420:$Vr1,421:681,422:684,423:686,424:$Vs1,427:682},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:696,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:697,4:$V2,5:$V3,156:$VL,200:698,290:$VM,291:$VN,292:$VO,293:$VP},{77:[2,336]},{77:[2,337]},{77:[2,338]},{77:[2,339]},{77:[2,340]},{77:[2,341]},{77:[2,342]},{77:[2,343]},{77:[2,344]},{2:$V1,3:704,4:$V2,5:$V3,131:$VF2,132:$VG2,425:699,426:[1,700],428:701},{2:$V1,3:244,4:$V2,5:$V3,199:705},{290:[1,706]},o($Vt1,[2,472]),{2:$V1,3:244,4:$V2,5:$V3,199:707},{231:[1,709],454:708},{231:[2,695]},{2:$V1,3:219,4:$V2,5:$V3,77:$Vw1,132:$Vx1,143:$VY,144:212,145:$VZ,152:$V$,156:$VL,181:$V31,199:213,200:215,201:214,202:217,209:710,213:$Vy1,214:218,290:$VM,291:$VN,292:$VO,293:$VP,302:$Vn1,419:190,420:$Vr1,424:$Vs1},{40:711,79:75,89:$V7,184:99,189:$Vb},o($VH2,[2,1091],{210:712,76:[1,713]}),o($VI2,[2,185],{3:714,2:$V1,4:$V2,5:$V3,76:[1,715],154:[1,716]}),o($VI2,[2,189],{3:717,2:$V1,4:$V2,5:$V3,76:[1,718]}),o($VI2,[2,190],{3:719,2:$V1,4:$V2,5:$V3,76:[1,720]}),o($VI2,[2,193]),o($VI2,[2,194],{3:721,2:$V1,4:$V2,5:$V3,76:[1,722]}),o($VI2,[2,197],{3:723,2:$V1,4:$V2,5:$V3,76:[1,724]}),o([2,4,5,10,72,74,76,78,93,98,118,128,154,162,168,169,183,206,208,222,223,224,225,226,227,228,229,230,231,232,245,247,306,310,602,764],$VJ2,{77:$VN1,116:$VK2}),o([2,4,5,10,72,74,76,78,93,98,118,128,162,168,169,206,208,222,223,224,225,226,227,228,229,230,231,232,245,247,306,310,602,764],[2,200]),o($VK,[2,773]),{2:$V1,3:244,4:$V2,5:$V3,199:726},o($VL2,$VM2,{81:727,198:$VN2}),o($Vz1,[2,1044]),o($VO2,[2,1057],{108:729,190:[1,730]}),o([10,78,183,306,310,602,764],$VM2,{419:190,81:731,117:732,3:733,114:736,144:758,158:768,160:769,2:$V1,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,112:$VS2,115:$V$1,116:$V02,118:$VT2,122:$VU2,123:$VV2,124:$VW2,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,198:$VN2,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,420:$Vr1,424:$Vs1}),{353:[1,782]},{183:[1,783]},o($VK,[2,594],{112:[1,784]}),{405:[1,785]},{183:[1,786]},o($VK,[2,598],{112:[1,787],183:[1,788]}),{2:$V1,3:244,4:$V2,5:$V3,199:789},{40:790,74:[1,791],79:75,89:$V7,184:99,189:$Vb},o($Vv3,[2,70]),{76:[1,792]},o($VK,[2,667]),{11:106,306:[1,793],602:$VH,764:$VI},o($VK,[2,665]),o($VK,[2,666]),{2:$V1,3:794,4:$V2,5:$V3},o($VK,[2,587]),{146:[1,795]},o([2,4,5,10,53,72,74,76,77,78,89,95,124,128,143,145,146,148,149,152,154,156,181,183,187,189,230,266,267,290,297,302,306,310,335,338,339,343,344,356,368,369,373,374,396,400,401,402,403,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,505,507,508,514,515,516,517,602,764],$VJ2,{116:$VK2}),o($VK,[2,615]),o($VK,[2,616]),o($VK,[2,617]),o($VK,$VA2,{74:[1,796]}),{77:$VB2,113:669,131:$VV,132:$VW,143:$VY,152:$V$,181:$V31,196:670,201:672,257:671,294:$Vh1,295:$Vi1,296:$Vj1,302:$Vn1,419:673,424:$Vs1},o($Vw3,[2,320]),o($Vw3,[2,321]),o($Vw3,[2,322]),o($Vw3,[2,323]),o($Vw3,[2,324]),o($Vw3,[2,325]),o($Vw3,[2,326]),o($VK,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,504:95,184:99,3:100,114:625,327:637,12:797,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$V22,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,146:$V9,154:$Va2,156:$Va,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,189:$Vb,266:$Vc,267:$Vd,290:$Ve,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2,335:$Vf,338:$Vg,339:$Vh,396:$Vi,400:$Vj,401:$Vk,404:$Vl,406:$Vm,408:$Vn,409:$Vo,417:$Vp,418:$Vq,434:$Vr,436:$Vs,437:$Vt,439:$Vu,440:$Vv,441:$Vw,442:$Vx,443:$Vy,447:$Vz,448:$VA,451:$VB,452:$VC,505:$VD,507:$VE,508:$VF,517:$VG}),o($VK,[2,675],{74:$Vx3}),o($VK,[2,676]),o($Vy3,[2,354],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),o($VK,[2,677],{74:[1,800]}),o($VK,[2,678],{74:[1,801]}),o($VV1,[2,683]),o($VV1,[2,685]),o($VV1,[2,679]),o($VV1,[2,680]),{114:807,115:$V$1,116:$V02,124:[1,802],230:$VA3,429:803,430:804,433:$VB3},{2:$V1,3:808,4:$V2,5:$V3},o($Vt1,[2,656]),o($Vt1,[2,657]),o($VK,[2,614],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{2:$V1,3:100,4:$V2,5:$V3,504:274,506:809},o($VK,[2,754],{74:$VC3}),o($VD3,[2,756]),o($VK,[2,759]),o($VK,[2,681],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),o($VE3,$VI1,{186:811,195:$VJ1}),o($VE3,$VI1,{186:812,195:$VJ1}),o($VE3,$VI1,{186:813,195:$VJ1}),o($VF3,[2,1087],{255:146,200:147,256:148,111:149,254:150,196:151,257:152,113:153,258:154,201:155,202:156,259:157,260:158,261:159,144:161,262:162,263:163,56:165,158:167,3:168,419:190,188:814,174:815,253:816,94:817,2:$V1,4:$V2,5:$V3,77:$VU,131:$VV,132:$VW,137:$VX,143:$VY,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,179:$V11,180:$V21,181:$V31,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,420:$Vr1,424:$Vs1}),{77:[1,819],131:$VV,196:818},{2:$V1,3:100,4:$V2,5:$V3,504:274,506:820},o($VG3,[2,153]),o($VG3,[2,154]),o($VG3,[2,155]),o($VG3,[2,156]),o($VG3,[2,157]),o($VG3,[2,158]),o($VG3,[2,159]),o($VL1,[2,3]),o($VL1,[2,774]),o($VL1,[2,775]),o($VL1,[2,776]),o($VL1,[2,777]),o($VL1,[2,778]),o($VL1,[2,779]),o($VL1,[2,780]),o($VL1,[2,781]),o($VL1,[2,782]),o($VL1,[2,783]),o($VL1,[2,784]),o($VL1,[2,785]),o($VL1,[2,786]),o($VL1,[2,787]),o($VL1,[2,788]),o($VL1,[2,789]),o($VL1,[2,790]),o($VL1,[2,791]),o($VL1,[2,792]),o($VL1,[2,793]),o($VL1,[2,794]),o($VL1,[2,795]),o($VL1,[2,796]),o($VL1,[2,797]),o($VL1,[2,798]),o($VL1,[2,799]),o($VL1,[2,800]),o($VL1,[2,801]),o($VL1,[2,802]),o($VL1,[2,803]),o($VL1,[2,804]),o($VL1,[2,805]),o($VL1,[2,806]),o($VL1,[2,807]),o($VL1,[2,808]),o($VL1,[2,809]),o($VL1,[2,810]),o($VL1,[2,811]),o($VL1,[2,812]),o($VL1,[2,813]),o($VL1,[2,814]),o($VL1,[2,815]),o($VL1,[2,816]),o($VL1,[2,817]),o($VL1,[2,818]),o($VL1,[2,819]),o($VL1,[2,820]),o($VL1,[2,821]),o($VL1,[2,822]),o($VL1,[2,823]),o($VL1,[2,824]),o($VL1,[2,825]),o($VL1,[2,826]),o($VL1,[2,827]),o($VL1,[2,828]),o($VL1,[2,829]),o($VL1,[2,830]),o($VL1,[2,831]),o($VL1,[2,832]),o($VL1,[2,833]),o($VL1,[2,834]),o($VL1,[2,835]),o($VL1,[2,836]),o($VL1,[2,837]),o($VL1,[2,838]),o($VL1,[2,839]),o($VL1,[2,840]),o($VL1,[2,841]),o($VL1,[2,842]),o($VL1,[2,843]),o($VL1,[2,844]),o($VL1,[2,845]),o($VL1,[2,846]),o($VL1,[2,847]),o($VL1,[2,848]),o($VL1,[2,849]),o($VL1,[2,850]),o($VL1,[2,851]),o($VL1,[2,852]),o($VL1,[2,853]),o($VL1,[2,854]),o($VL1,[2,855]),o($VL1,[2,856]),o($VL1,[2,857]),o($VL1,[2,858]),o($VL1,[2,859]),o($VL1,[2,860]),o($VL1,[2,861]),o($VL1,[2,862]),o($VL1,[2,863]),o($VL1,[2,864]),o($VL1,[2,865]),o($VL1,[2,866]),o($VL1,[2,867]),o($VL1,[2,868]),o($VL1,[2,869]),o($VL1,[2,870]),o($VL1,[2,871]),o($VL1,[2,872]),o($VL1,[2,873]),o($VL1,[2,874]),o($VL1,[2,875]),o($VL1,[2,876]),o($VL1,[2,877]),o($VL1,[2,878]),o($VL1,[2,879]),o($VL1,[2,880]),o($VL1,[2,881]),o($VL1,[2,882]),o($VL1,[2,883]),o($VL1,[2,884]),o($VL1,[2,885]),o($VL1,[2,886]),o($VL1,[2,887]),o($VL1,[2,888]),o($VL1,[2,889]),o($VL1,[2,890]),o($VL1,[2,891]),o($VL1,[2,892]),o($VL1,[2,893]),o($VL1,[2,894]),o($VL1,[2,895]),o($VL1,[2,896]),o($VL1,[2,897]),o($VL1,[2,898]),o($VL1,[2,899]),o($VL1,[2,900]),o($VL1,[2,901]),o($VL1,[2,902]),o($VL1,[2,903]),o($VL1,[2,904]),o($VL1,[2,905]),o($VL1,[2,906]),o($VL1,[2,907]),o($VL1,[2,908]),o($VL1,[2,909]),o($VL1,[2,910]),o($VL1,[2,911]),o($VL1,[2,912]),o($VL1,[2,913]),o($VL1,[2,914]),o($VL1,[2,915]),o($VL1,[2,916]),o($VL1,[2,917]),o($VL1,[2,918]),o($VL1,[2,919]),o($VL1,[2,920]),o($VL1,[2,921]),o($VL1,[2,922]),o($VL1,[2,923]),o($VL1,[2,924]),o($VL1,[2,925]),o($VL1,[2,926]),o($VL1,[2,927]),o($VL1,[2,928]),o($VL1,[2,929]),o($VL1,[2,930]),o($VL1,[2,931]),o($VL1,[2,932]),o($VL1,[2,933]),o($VL1,[2,934]),o($VL1,[2,935]),o($VL1,[2,936]),o($VL1,[2,937]),o($VL1,[2,938]),o($VL1,[2,939]),o($VL1,[2,940]),o($VL1,[2,941]),o($VL1,[2,942]),o($VL1,[2,943]),o($VL1,[2,944]),o($VL1,[2,945]),o($VL1,[2,946]),o($VL1,[2,947]),o($VL1,[2,948]),o($VL1,[2,949]),o($VL1,[2,950]),o($VL1,[2,951]),o($VL1,[2,952]),o($VL1,[2,953]),o($VL1,[2,954]),o($VL1,[2,955]),o($VL1,[2,956]),o($VL1,[2,957]),o($VL1,[2,958]),o($VL1,[2,959]),o($VL1,[2,960]),o($VL1,[2,961]),o($VL1,[2,962]),o($VL1,[2,963]),o($VL1,[2,964]),o($VL1,[2,965]),o($VL1,[2,966]),o($VL1,[2,967]),o($VL1,[2,968]),o($VL1,[2,969]),o($VL1,[2,970]),o($VL1,[2,971]),o($VL1,[2,972]),o($VL1,[2,973]),o($VL1,[2,974]),o($VL1,[2,975]),o($VL1,[2,976]),o($VL1,[2,977]),o($VL1,[2,978]),o($VL1,[2,979]),o($VL1,[2,980]),o($VL1,[2,981]),o($VL1,[2,982]),o($VL1,[2,983]),o($VL1,[2,984]),o($VL1,[2,985]),o($VL1,[2,986]),o($VL1,[2,987]),o($VL1,[2,988]),o($VL1,[2,989]),o($VL1,[2,990]),o($VL1,[2,991]),o($VL1,[2,992]),o($VL1,[2,993]),o($VL1,[2,994]),o($VL1,[2,995]),o($VL1,[2,996]),o($VL1,[2,997]),o($VL1,[2,998]),o($VL1,[2,999]),o($VL1,[2,1000]),o($VL1,[2,1001]),o($VL1,[2,1002]),o($VL1,[2,1003]),o($VL1,[2,1004]),o($VL1,[2,1005]),o($VL1,[2,1006]),o($VL1,[2,1007]),o($VL1,[2,1008]),o($VL1,[2,1009]),o($VL1,[2,1010]),o($VL1,[2,1011]),o($VL1,[2,1012]),o($VL1,[2,1013]),o($VL1,[2,1014]),o($VL1,[2,1015]),o($VL1,[2,1016]),o($VL1,[2,1017]),o($VL1,[2,1018]),o($VL1,[2,1019]),o($VL1,[2,1020]),o($VL1,[2,1021]),o($VL1,[2,1022]),o($VL1,[2,1023]),o($VL1,[2,1024]),o($VL1,[2,1025]),o($VL1,[2,1026]),o($VL1,[2,1027]),o($VL1,[2,1028]),o($VL1,[2,1029]),o($VL1,[2,1030]),o($VL1,[2,1031]),o($VL1,[2,1032]),o($VL1,[2,1033]),o($VL1,[2,1034]),o($VL1,[2,1035]),o($VL1,[2,1036]),o($VL1,[2,1037]),o($VL1,[2,1038]),o($VL1,[2,1039]),o($VL1,[2,1040]),o($VJ,[2,7]),o($VJ,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,504:95,184:99,3:100,12:821,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,124:$V8,146:$V9,156:$Va,189:$Vb,266:$Vc,267:$Vd,290:$Ve,335:$Vf,338:$Vg,339:$Vh,396:$Vi,400:$Vj,401:$Vk,404:$Vl,406:$Vm,408:$Vn,409:$Vo,417:$Vp,418:$Vq,434:$Vr,436:$Vs,437:$Vt,439:$Vu,440:$Vv,441:$Vw,442:$Vx,443:$Vy,447:$Vz,448:$VA,451:$VB,452:$VC,505:$VD,507:$VE,508:$VF,517:$VG}),{396:[1,825],401:[1,822],402:[1,823],403:[1,824]},{2:$V1,3:826,4:$V2,5:$V3},o($VE3,[2,1111],{289:827,767:829,78:[1,828],164:[1,831],185:[1,830]}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:832,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:833,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:834,4:$V2,5:$V3,132:[1,835]},{2:$V1,3:836,4:$V2,5:$V3,132:[1,837]},{2:$V1,3:838,4:$V2,5:$V3,99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{2:$V1,3:839,4:$V2,5:$V3},{154:[1,840]},o($VH3,$VP1,{350:841,156:$VQ1}),{230:[1,842]},{2:$V1,3:843,4:$V2,5:$V3},o($VK,[2,729],{74:$VI3}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:845,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VD3,[2,732]),o($VJ3,[2,1143],{419:190,476:846,144:847,139:$VK3,141:$VK3,145:$VC1,420:$Vr1,424:$Vs1}),{139:[1,848],141:[1,849]},o($VL3,$VM3,{490:851,493:852,77:[1,850],137:$VS1}),o($VN3,[2,1167],{494:853,132:[1,854]}),o($VO3,[2,1171],{496:855,497:856,152:$VT1}),o($VO3,[2,747]),o($VP3,[2,739]),{2:$V1,3:857,4:$V2,5:$V3,131:[1,858]},{2:$V1,3:859,4:$V2,5:$V3},{2:$V1,3:860,4:$V2,5:$V3},o($Vt1,$VP1,{350:861,156:$VQ1}),o($Vt1,$VP1,{350:862,156:$VQ1}),o($VY1,[2,491]),o($VY1,[2,492]),{183:[1,863]},{183:[2,1142]},o($VQ3,[2,1137],{466:864,469:865,137:[1,866]}),o($VU1,[2,1136]),o($VR3,$VS3,{510:867,95:$VT3,230:[1,868],514:$VU3,515:$VV3,516:$VW3}),{76:[1,873]},{76:[1,874]},{145:$VT,450:875},{4:$VX3,7:879,76:[1,877],272:876,387:878,389:$VY3},o($VK,[2,456],{128:[1,882]}),o($VK,[2,579]),{2:$V1,3:883,4:$V2,5:$V3},{298:[1,884]},o($VH3,$VW1,{398:885,156:$VX1}),o($VK,[2,593]),{2:$V1,3:244,4:$V2,5:$V3,199:887,399:886},{2:$V1,3:244,4:$V2,5:$V3,199:887,399:888},o($VK,[2,772]),o($VJ,[2,669],{438:889,310:[1,890]}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:891,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:892,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:893,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:894,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:895,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:896,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:897,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:898,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:899,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:900,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:901,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:902,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:903,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:904,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:905,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:906,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:907,4:$V2,5:$V3,77:[1,909],131:$VV,156:$VL,196:908,200:910,290:$VM,291:$VN,292:$VO,293:$VP},{2:$V1,3:911,4:$V2,5:$V3,77:[1,913],131:$VV,156:$VL,196:912,200:914,290:$VM,291:$VN,292:$VO,293:$VP},o($VZ3,[2,440],{255:146,200:147,256:148,111:149,254:150,196:151,257:152,113:153,258:154,201:155,202:156,259:157,260:158,261:159,144:161,262:162,263:163,56:165,158:167,3:168,419:190,94:915,2:$V1,4:$V2,5:$V3,77:$VU,131:$VV,132:$VW,137:$VX,143:$VY,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,179:$V11,180:$V21,181:$V31,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,420:$Vr1,424:$Vs1}),o($VZ3,[2,441],{255:146,200:147,256:148,111:149,254:150,196:151,257:152,113:153,258:154,201:155,202:156,259:157,260:158,261:159,144:161,262:162,263:163,56:165,158:167,3:168,419:190,94:916,2:$V1,4:$V2,5:$V3,77:$VU,131:$VV,132:$VW,137:$VX,143:$VY,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,179:$V11,180:$V21,181:$V31,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,420:$Vr1,424:$Vs1}),o($VZ3,[2,442],{255:146,200:147,256:148,111:149,254:150,196:151,257:152,113:153,258:154,201:155,202:156,259:157,260:158,261:159,144:161,262:162,263:163,56:165,158:167,3:168,419:190,94:917,2:$V1,4:$V2,5:$V3,77:$VU,131:$VV,132:$VW,137:$VX,143:$VY,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,179:$V11,180:$V21,181:$V31,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,420:$Vr1,424:$Vs1}),o($VZ3,[2,443],{255:146,200:147,256:148,111:149,254:150,196:151,257:152,113:153,258:154,201:155,202:156,259:157,260:158,261:159,144:161,262:162,263:163,56:165,158:167,3:168,419:190,94:918,2:$V1,4:$V2,5:$V3,77:$VU,131:$VV,132:$VW,137:$VX,143:$VY,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,179:$V11,180:$V21,181:$V31,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,420:$Vr1,424:$Vs1}),o($VZ3,$V_3,{255:146,200:147,256:148,111:149,254:150,196:151,257:152,113:153,258:154,201:155,202:156,259:157,260:158,261:159,144:161,262:162,263:163,56:165,158:167,3:168,419:190,94:919,2:$V1,4:$V2,5:$V3,77:$VU,131:$VV,132:$VW,137:$VX,143:$VY,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,179:$V11,180:$V21,181:$V31,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,420:$Vr1,424:$Vs1}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:920,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:921,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VZ3,[2,445],{255:146,200:147,256:148,111:149,254:150,196:151,257:152,113:153,258:154,201:155,202:156,259:157,260:158,261:159,144:161,262:162,263:163,56:165,158:167,3:168,419:190,94:922,2:$V1,4:$V2,5:$V3,77:$VU,131:$VV,132:$VW,137:$VX,143:$VY,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,179:$V11,180:$V21,181:$V31,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,420:$Vr1,424:$Vs1}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:923,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:924,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{164:[1,926],166:[1,928],328:925,334:[1,927]},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:929,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:930,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:695,4:$V2,5:$V3,77:[1,931],111:934,145:$V$3,156:$VL,200:935,202:933,290:$VM,291:$VN,292:$VO,293:$VP,329:932},{99:[1,937],297:[1,938]},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:939,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:940,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:941,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{4:$VX3,7:879,272:942,387:878,389:$VY3},o($V04,[2,88]),o($V04,[2,89]),{78:[1,943]},{78:[1,944]},{78:[1,945]},{78:[1,946],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},o($Vt1,$Vu1,{340:207,77:$VO1,198:$Vv1}),{78:[2,1107]},{78:[2,1108]},{134:$VR,135:$VS},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:947,152:$V$,154:$V01,156:$VL,158:167,164:[1,949],179:$V11,180:$V21,181:$V31,185:[1,948],196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:950,4:$V2,5:$V3,149:$V14,180:[1,952]},o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,118,122,128,129,130,131,132,134,135,137,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,314,330,331,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],[2,416],{114:625,327:637,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,332:$Vw2}),o($V24,[2,417],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,180:$Ve2,312:$Vg2,316:$Vj2}),o($V24,[2,418],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,180:$Ve2,312:$Vg2,316:$Vj2}),o($V34,[2,419],{114:625,327:637,316:$Vj2}),o($V34,[2,420],{114:625,327:637,316:$Vj2}),o($Vz2,[2,365]),o($Vz2,[2,1113]),o($Vz2,[2,1114]),o($Vz2,[2,366]),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,230,231,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],[2,362]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:953,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VD2,[2,620]),o($VD2,[2,621]),o($VD2,[2,622]),o($VD2,[2,623]),o($VD2,[2,625]),{40:954,79:75,89:$V7,184:99,189:$Vb},{99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,304:955,307:677,308:$VC2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{305:956,306:$V44,307:957,308:$VC2,310:$V54},o($V64,[2,372]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:959,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:960,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{4:$VX3,7:879,272:961,387:878,389:$VY3},o($VD2,[2,626]),{74:[1,963],300:[1,962]},o($VD2,[2,642]),o($V74,[2,649]),o($V84,[2,627]),o($V84,[2,628]),o($V84,[2,629]),o($V84,[2,630]),o($V84,[2,631]),o($V84,[2,632]),o($V84,[2,633]),o($V84,[2,634]),o($V84,[2,635]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:964,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o([2,4,5,10,53,72,74,76,78,89,93,95,98,99,107,112,115,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,426,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],$Vy2,{77:$VN1,116:$V94}),{74:$Vx3,300:[1,966]},o($Va4,[2,314],{77:$VN1}),o($VB1,[2,315]),{74:[1,968],426:[1,967]},o($VD2,[2,639]),o($Vb4,[2,644]),{152:[1,969]},{152:[1,970]},{152:[1,971]},{40:976,77:[1,975],79:75,89:$V7,143:$VY,144:979,145:$VC1,149:$Vc4,152:$V$,181:$V31,184:99,189:$Vb,201:980,302:$Vn1,341:972,342:973,343:[1,974],344:$Vd4,419:190,420:$Vr1,424:$Vs1},o($Vt1,$Vu1,{340:981,198:$Vv1}),{77:$Ve4,143:$VY,144:979,145:$VC1,149:$Vc4,152:$V$,181:$V31,201:980,302:$Vn1,341:982,342:983,344:$Vd4,419:190,420:$Vr1,424:$Vs1},{230:[1,986],455:985},{2:$V1,3:219,4:$V2,5:$V3,77:$Vw1,132:$Vx1,143:$VY,144:212,145:$VZ,152:$V$,156:$VL,181:$V31,199:213,200:215,201:214,202:217,209:987,213:$Vy1,214:218,290:$VM,291:$VN,292:$VO,293:$VP,302:$Vn1,419:190,420:$Vr1,424:$Vs1},{231:[2,696]},{78:[1,988]},o($VI2,[2,1093],{211:989,3:990,2:$V1,4:$V2,5:$V3}),o($VH2,[2,1092]),o($VI2,[2,183]),{2:$V1,3:991,4:$V2,5:$V3},{212:[1,992]},o($VI2,[2,187]),{2:$V1,3:993,4:$V2,5:$V3},o($VI2,[2,191]),{2:$V1,3:994,4:$V2,5:$V3},o($VI2,[2,195]),{2:$V1,3:995,4:$V2,5:$V3},o($VI2,[2,198]),{2:$V1,3:996,4:$V2,5:$V3},{2:$V1,3:997,4:$V2,5:$V3},{148:[1,998]},o($Vf4,[2,172],{82:999,183:[1,1000]}),{2:$V1,3:219,4:$V2,5:$V3,132:[1,1005],143:$VY,145:[1,1006],152:$V$,156:$VL,181:$V31,199:1001,200:1002,201:1003,202:1004,290:$VM,291:$VN,292:$VO,293:$VP,302:$Vn1},{2:$V1,3:1011,4:$V2,5:$V3,109:1007,110:1008,111:1009,112:$Vg4},o($VO2,[2,1058]),o($Vh4,[2,1049],{91:1012,182:1013,183:[1,1014]}),o($VA1,[2,1048],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),o([2,4,5,10,72,74,76,78,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,198,280,281,282,283,284,285,286,287,288,306,310,420,424,602,764],[2,90],{77:[1,1019]}),{119:[1,1020]},o($Vl4,[2,93]),{2:$V1,3:1021,4:$V2,5:$V3},o($Vl4,[2,95]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1022,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1023,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:733,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,112:$VS2,114:736,115:$V$1,116:$V02,117:1025,118:$VT2,122:$VU2,123:$VV2,124:$VW2,125:1024,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,144:758,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,158:768,160:769,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,419:190,420:$Vr1,424:$Vs1},{77:[1,1026]},{77:[1,1027]},{77:[1,1028]},{77:[1,1029]},o($Vl4,[2,104]),o($Vl4,[2,105]),o($Vl4,[2,106]),o($Vl4,[2,107]),o($Vl4,[2,108]),o($Vl4,[2,109]),{2:$V1,3:1030,4:$V2,5:$V3},{2:$V1,3:1031,4:$V2,5:$V3,133:[1,1032]},o($Vl4,[2,113]),o($Vl4,[2,114]),o($Vl4,[2,115]),o($Vl4,[2,116]),o($Vl4,[2,117]),o($Vl4,[2,118]),{2:$V1,3:1033,4:$V2,5:$V3,77:$VB2,113:669,131:$VV,132:$VW,143:$VY,152:$V$,181:$V31,196:670,201:672,257:671,294:$Vh1,295:$Vi1,296:$Vj1,302:$Vn1,419:673,424:$Vs1},{145:[1,1034]},{77:[1,1035]},{145:[1,1036]},o($Vl4,[2,123]),{77:[1,1037]},{2:$V1,3:1038,4:$V2,5:$V3},{77:[1,1039]},{77:[1,1040]},{77:[1,1041]},{77:[1,1042]},{77:[1,1043],164:[1,1044]},{77:[1,1045]},{77:[1,1046]},{77:[1,1047]},{77:[1,1048]},{77:[1,1049]},{77:[1,1050]},{77:[1,1051]},{77:[1,1052]},{77:[1,1053]},{77:[2,1073]},{77:[2,1074]},{2:$V1,3:244,4:$V2,5:$V3,199:1054},{2:$V1,3:244,4:$V2,5:$V3,199:1055},{113:1056,132:$VW,296:$Vj1},o($VK,[2,596],{112:[1,1057]}),{2:$V1,3:244,4:$V2,5:$V3,199:1058},{113:1059,132:$VW,296:$Vj1},{2:$V1,3:1060,4:$V2,5:$V3},o($VK,[2,693]),o($VK,[2,68]),{2:$V1,3:236,4:$V2,5:$V3,75:1061},{77:[1,1062]},o($VK,[2,674]),o($VK,[2,586]),{2:$V1,3:1011,4:$V2,5:$V3,111:1065,143:$Vm4,145:$Vn4,147:1063,336:1064,337:1066},{144:1069,145:$VC1,419:190,420:$Vr1,424:$Vs1},o($VK,[2,671]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1070,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VZ3,$V_3,{255:146,200:147,256:148,111:149,254:150,196:151,257:152,113:153,258:154,201:155,202:156,259:157,260:158,261:159,144:161,262:162,263:163,56:165,158:167,3:168,419:190,94:1071,2:$V1,4:$V2,5:$V3,77:$VU,131:$VV,132:$VW,137:$VX,143:$VY,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,179:$V11,180:$V21,181:$V31,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,420:$Vr1,424:$Vs1}),{113:1072,132:$VW,296:$Vj1},{2:$V1,3:266,4:$V2,5:$V3,446:1073,447:$VE1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1075,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,230:$VA3,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1,429:1074,433:$VB3},o($VK,[2,651]),{114:1077,115:$V$1,116:$V02,124:[1,1076]},o($VK,[2,663]),o($VK,[2,664]),{2:$V1,3:1079,4:$V2,5:$V3,77:$Vo4,131:$Vp4,432:1078},{114:807,115:$V$1,116:$V02,124:[1,1082],430:1083},o($VK,[2,753],{74:$VC3}),{2:$V1,3:100,4:$V2,5:$V3,504:1084},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:817,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,174:1085,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,253:816,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:817,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,174:1086,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,253:816,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:817,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,174:1087,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,253:816,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VF3,[2,151]),o($VF3,[2,1088],{74:$Vq4}),o($Vr4,[2,273]),o($Vr4,[2,280],{114:625,327:637,3:1090,113:1092,2:$V1,4:$V2,5:$V3,76:[1,1089],99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,131:[1,1091],132:$VW,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,296:$Vj1,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),o($VH1,[2,1089],{197:1093,765:[1,1094]}),{131:$VV,196:1095},{74:$VC3,78:[1,1096]},o($VJ,[2,11]),{148:[1,1097],190:[1,1098]},{190:[1,1099]},{190:[1,1100]},{190:[1,1101]},o($VK,[2,575],{76:[1,1103],77:[1,1102]}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:1104,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($Vz2,[2,346]),o($VE3,[2,1112]),o($VE3,[2,1109]),o($VE3,[2,1110]),{74:$Vx3,78:[1,1105]},{74:$Vx3,78:[1,1106]},{74:[1,1107]},{74:[1,1108]},{74:[1,1109]},{74:[1,1110]},o($Vz2,[2,353]),o($VK,[2,580]),{298:[1,1111]},{2:$V1,3:1112,4:$V2,5:$V3,113:1113,132:$VW,296:$Vj1},{2:$V1,3:244,4:$V2,5:$V3,199:1114},{230:[1,1115]},{2:$V1,3:578,4:$V2,5:$V3,132:$VR1,137:$VS1,143:$VF1,145:$VG1,152:$VT1,431:585,474:1116,475:576,478:577,482:582,493:579,497:581},o($VK,[2,730],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),o($VD3,[2,1145],{477:1117,483:1118,76:$Vs4}),o($VJ3,[2,1144]),{2:$V1,3:1122,4:$V2,5:$V3,132:$VR1,137:$VS1,144:1121,145:$VC1,152:$VT1,419:190,420:$Vr1,424:$Vs1,475:1120,493:579,497:581},{2:$V1,3:1122,4:$V2,5:$V3,132:$VR1,137:$VS1,143:$VF1,145:$VG1,152:$VT1,431:585,475:1124,478:1123,482:582,493:579,497:581},{2:$V1,3:578,4:$V2,5:$V3,132:$VR1,137:$VS1,143:$VF1,145:$VG1,152:$VT1,431:585,473:1125,474:575,475:576,478:577,482:582,493:579,497:581},o($VN3,[2,1163],{491:1126,132:[1,1127]}),o($VL3,[2,1162]),o($VO3,[2,1169],{495:1128,497:1129,152:$VT1}),o($VN3,[2,1168]),o($VO3,[2,746]),o($VO3,[2,1172]),o($VL3,[2,749]),o($VL3,[2,750]),o($VO3,[2,748]),o($VP3,[2,740]),{2:$V1,3:244,4:$V2,5:$V3,199:1130},{2:$V1,3:244,4:$V2,5:$V3,199:1131},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1132,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($Vt4,[2,1139],{467:1133,113:1134,132:$VW,296:$Vj1}),o($VQ3,[2,1138]),{2:$V1,3:1135,4:$V2,5:$V3},{335:$Vu4,338:$Vv4,339:$Vw4,511:1136},{2:$V1,3:244,4:$V2,5:$V3,199:1140},o($VR3,[2,765]),o($VR3,[2,766]),o($VR3,[2,767]),{129:[1,1141]},{266:[1,1142]},{266:[1,1143]},o($VV1,[2,688]),o($VV1,[2,689],{124:[1,1144]}),{4:$VX3,7:879,272:1145,387:878,389:$VY3},o([2,4,10,53,72,74,76,77,78,89,93,95,98,99,107,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,230,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,297,300,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,343,356,368,369,373,374,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],[2,542],{5:[1,1146]}),o([2,5,10,53,72,74,76,78,89,93,95,98,99,107,112,115,116,118,122,123,124,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,230,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,297,300,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,343,356,368,369,373,374,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],[2,539],{4:[1,1148],77:[1,1147]}),{77:[1,1149]},o($Vx4,[2,4]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1150,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VK,[2,588]),o($VH3,[2,568]),{2:$V1,3:1151,4:$V2,5:$V3,113:1152,132:$VW,296:$Vj1},o($VK,[2,564],{74:$Vy4}),o($VV1,[2,566]),o($VK,[2,613],{74:$Vy4}),o($VK,[2,668]),o($VK,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,504:95,184:99,3:100,12:1154,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,124:$V8,146:$V9,156:$Va,189:$Vb,266:$Vc,267:$Vd,290:$Ve,335:$Vf,338:$Vg,339:$Vh,396:$Vi,400:$Vj,401:$Vk,404:$Vl,406:$Vm,408:$Vn,409:$Vo,417:$Vp,418:$Vq,434:$Vr,436:$Vs,437:$Vt,439:$Vu,440:$Vv,441:$Vw,442:$Vx,443:$Vy,447:$Vz,448:$VA,451:$VB,452:$VC,505:$VD,507:$VE,508:$VF,517:$VG}),o($Vz4,[2,376],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,312:$Vg2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2}),o($V34,[2,377],{114:625,327:637,316:$Vj2}),o($Vz4,[2,378],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,312:$Vg2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2}),o($VA4,[2,379],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,312:$Vg2,314:[1,1155],316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2}),o($VA4,[2,381],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,312:$Vg2,314:[1,1156],316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2}),o($VB1,[2,383],{114:625,327:637}),o($V24,[2,384],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,180:$Ve2,312:$Vg2,316:$Vj2}),o($V24,[2,385],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,180:$Ve2,312:$Vg2,316:$Vj2}),o($VB4,[2,386],{114:625,327:637,115:$V$1,116:$V02,123:$V12,136:$V42,312:$Vg2,316:$Vj2}),o($VB4,[2,387],{114:625,327:637,115:$V$1,116:$V02,123:$V12,136:$V42,312:$Vg2,316:$Vj2}),o($VB4,[2,388],{114:625,327:637,115:$V$1,116:$V02,123:$V12,136:$V42,312:$Vg2,316:$Vj2}),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,112,118,122,123,124,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,179,180,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,311,313,314,315,317,318,319,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],[2,389],{114:625,327:637,115:$V$1,116:$V02,136:$V42,312:$Vg2,316:$Vj2}),o($VC4,[2,390],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,179:$Vd2,180:$Ve2,312:$Vg2,316:$Vj2,317:$Vk2}),o($VC4,[2,391],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,179:$Vd2,180:$Ve2,312:$Vg2,316:$Vj2,317:$Vk2}),o($VC4,[2,392],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,179:$Vd2,180:$Ve2,312:$Vg2,316:$Vj2,317:$Vk2}),o($VC4,[2,393],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,179:$Vd2,180:$Ve2,312:$Vg2,316:$Vj2,317:$Vk2}),o($Va4,[2,394],{77:$VN1}),o($VB1,[2,395]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1157,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VB1,[2,397]),o($Va4,[2,398],{77:$VN1}),o($VB1,[2,399]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1158,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VB1,[2,401]),o($VD4,[2,402],{114:625,327:637,112:$V_1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,332:$Vw2}),o($VD4,[2,403],{114:625,327:637,112:$V_1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,332:$Vw2}),o($VD4,[2,404],{114:625,327:637,112:$V_1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,332:$Vw2}),o($VD4,[2,405],{114:625,327:637,112:$V_1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,332:$Vw2}),o([2,4,5,10,53,72,89,99,124,139,140,146,154,156,170,171,189,266,267,290,306,310,320,321,322,323,324,325,326,330,331,333,335,338,339,396,400,401,404,406,408,409,417,418,434,436,437,439,440,441,442,443,447,448,451,452,505,507,508,517,602,764],$VE4,{114:625,327:637,112:$V_1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,332:$Vw2}),o($VD4,[2,407],{114:625,327:637,112:$V_1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,332:$Vw2}),o($VD4,[2,408],{114:625,327:637,112:$V_1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,332:$Vw2}),o($VD4,[2,409],{114:625,327:637,112:$V_1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,332:$Vw2}),o($VD4,[2,410],{114:625,327:637,112:$V_1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,332:$Vw2}),o($VD4,[2,411],{114:625,327:637,112:$V_1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,332:$Vw2}),{77:[1,1159]},{77:[2,446]},{77:[2,447]},{77:[2,448]},o($VF4,[2,414],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,332:$Vw2}),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,107,118,122,128,129,130,131,132,134,135,137,143,145,146,148,149,150,152,156,162,164,166,168,169,171,172,173,175,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,314,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],[2,415],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2}),{2:$V1,3:168,4:$V2,5:$V3,40:1160,56:165,77:$VU,78:[1,1162],79:75,89:$V7,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:1161,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,184:99,189:$Vb,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VB1,[2,428]),o($VB1,[2,430]),o($VB1,[2,437]),o($VB1,[2,438]),{2:$V1,3:667,4:$V2,5:$V3,77:[1,1163]},{2:$V1,3:695,4:$V2,5:$V3,77:[1,1164],111:934,145:$V$3,156:$VL,200:935,202:1166,290:$VM,291:$VN,292:$VO,293:$VP,329:1165},o($VB1,[2,435]),o($VF4,[2,432],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,332:$Vw2}),o($VF4,[2,433],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,332:$Vw2}),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,99,107,118,122,124,128,129,130,131,132,134,135,137,139,140,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,181,183,185,187,189,198,206,208,222,223,224,225,226,227,228,229,232,239,242,243,245,247,266,267,280,281,282,283,284,285,286,287,288,290,296,300,306,308,309,310,314,320,321,322,323,324,325,326,330,331,332,333,335,338,339,396,400,401,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,464,470,505,507,508,517,602,764],[2,434],{114:625,327:637,112:$V_1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2}),o($VB1,[2,436]),o($VB1,[2,306]),o($VB1,[2,307]),o($VB1,[2,308]),o($VB1,[2,421]),{74:$Vx3,78:[1,1167]},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1168,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1169,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VB1,$VG4),o($VH4,[2,286]),o($VB1,[2,282]),{78:[1,1171],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{78:[1,1172]},{305:1173,306:$V44,307:957,308:$VC2,310:$V54},{306:[1,1174]},o($V64,[2,371]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1175,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,309:[1,1176],311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{76:[1,1177],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{74:[1,1178]},o($VD2,[2,640]),{2:$V1,3:695,4:$V2,5:$V3,77:$VE2,111:690,113:688,131:$VV,132:$VW,143:$VY,144:685,145:$VC1,152:$V$,156:$VL,181:$V31,196:687,200:693,201:692,257:689,258:691,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,300:[1,1179],302:$Vn1,419:190,420:$Vr1,422:1180,423:686,424:$Vs1},{78:[1,1181],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{2:$V1,3:1182,4:$V2,5:$V3,149:$V14},o($VB1,[2,364]),o($VD2,[2,637]),{2:$V1,3:704,4:$V2,5:$V3,131:$VF2,132:$VG2,426:[1,1183],428:1184},{2:$V1,3:695,4:$V2,5:$V3,77:$VE2,111:690,113:688,131:$VV,132:$VW,143:$VY,144:685,145:$VC1,152:$V$,156:$VL,181:$V31,196:687,200:693,201:692,257:689,258:691,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,302:$Vn1,419:190,420:$Vr1,422:1185,423:686,424:$Vs1},{2:$V1,3:695,4:$V2,5:$V3,77:$VE2,111:690,113:688,131:$VV,132:$VW,143:$VY,144:685,145:$VC1,152:$V$,156:$VL,181:$V31,196:687,200:693,201:692,257:689,258:691,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,302:$Vn1,419:190,420:$Vr1,422:1186,423:686,424:$Vs1},{2:$V1,3:695,4:$V2,5:$V3,77:$VE2,111:690,113:688,131:$VV,132:$VW,143:$VY,144:685,145:$VC1,152:$V$,156:$VL,181:$V31,196:687,200:693,201:692,257:689,258:691,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,302:$Vn1,419:190,420:$Vr1,422:1187,423:686,424:$Vs1},{77:$Ve4,143:$VY,144:979,145:$VC1,152:$V$,181:$V31,201:980,302:$Vn1,342:1188,419:190,420:$Vr1,424:$Vs1},o($VI4,[2,458],{74:$VJ4}),{149:$Vc4,341:1190,344:$Vd4},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1194,100:1191,111:1193,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,345:1192,419:190,420:$Vr1,424:$Vs1},o($VI4,[2,466]),o($VK4,[2,469]),o($VK4,[2,470]),o($VL4,[2,474]),o($VL4,[2,475]),{2:$V1,3:244,4:$V2,5:$V3,199:1195},{77:$Ve4,143:$VY,144:979,145:$VC1,152:$V$,181:$V31,201:980,302:$Vn1,342:1196,419:190,420:$Vr1,424:$Vs1},o($VI4,[2,462],{74:$VJ4}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1194,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,345:1192,419:190,420:$Vr1,424:$Vs1},{308:$VM4,456:1197,458:1198,459:1199},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1201,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{230:[2,697]},o($VI2,[2,181],{3:1202,2:$V1,4:$V2,5:$V3,76:[1,1203]}),o($VI2,[2,182]),o($VI2,[2,1094]),o($VI2,[2,184]),o($VI2,[2,186]),o($VI2,[2,188]),o($VI2,[2,192]),o($VI2,[2,196]),o($VI2,[2,199]),o([2,4,5,10,53,72,74,76,77,78,89,93,95,98,118,124,128,143,145,146,148,149,152,154,156,162,168,169,181,183,187,189,206,208,222,223,224,225,226,227,228,229,230,231,232,245,247,266,267,290,297,302,306,310,335,338,339,343,344,356,368,369,373,374,396,400,401,402,403,404,406,408,409,417,418,420,424,434,436,437,439,440,441,442,443,447,448,451,452,505,507,508,514,515,516,517,602,764],[2,201]),{2:$V1,3:1204,4:$V2,5:$V3},o($VN4,[2,1045],{83:1205,92:1206,93:[1,1207],98:[1,1208]}),{2:$V1,3:219,4:$V2,5:$V3,77:[1,1210],132:$Vx1,143:$VY,144:212,145:$VZ,152:$V$,156:$VL,181:$V31,199:213,200:215,201:214,202:217,203:1209,209:1211,213:$Vy1,214:218,290:$VM,291:$VN,292:$VO,293:$VP,302:$Vn1,419:190,420:$Vr1,424:$Vs1},o($VL2,[2,164]),o($VL2,[2,165]),o($VL2,[2,166]),o($VL2,[2,167]),o($VL2,[2,168]),{2:$V1,3:667,4:$V2,5:$V3},o($Vz1,[2,83],{74:[1,1212]}),o($VO4,[2,85]),o($VO4,[2,86]),{113:1213,132:$VW,296:$Vj1},o([10,72,74,78,93,98,118,124,128,162,168,169,183,198,206,208,222,223,224,225,226,227,228,229,232,245,247,306,310,602,764],$Vy2,{116:$V94}),o($Vh4,[2,73]),o($Vh4,[2,1050]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1214,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($Vl4,[2,126]),o($Vl4,[2,144]),o($Vl4,[2,145]),o($Vl4,[2,146]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,78:[2,1065],94:260,111:149,113:153,127:1215,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:1216,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{77:[1,1217]},o($Vl4,[2,94]),o([2,4,5,10,72,74,76,77,78,118,122,124,128,129,130,131,132,134,135,137,139,140,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,181,183,185,187,198,280,281,282,283,284,285,286,287,288,306,310,420,424,602,764],[2,96],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),o([2,4,5,10,72,74,76,77,78,112,118,122,124,128,129,130,131,132,134,135,137,139,140,143,145,146,148,149,150,152,154,156,162,164,166,168,169,170,171,172,173,175,181,183,185,187,198,280,281,282,283,284,285,286,287,288,306,310,420,424,602,764],[2,97],{114:625,327:637,99:$VZ1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{2:$V1,3:733,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,78:[1,1218],112:$VS2,114:736,115:$V$1,116:$V02,117:1219,118:$VT2,122:$VU2,123:$VV2,124:$VW2,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,144:758,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,158:768,160:769,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,419:190,420:$Vr1,424:$Vs1},o($VP4,[2,1061],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),{2:$V1,3:733,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,112:$VS2,114:736,115:$V$1,116:$V02,117:1221,118:$VT2,122:$VU2,123:$VV2,124:$VW2,126:1220,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,144:758,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,158:768,160:769,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1222,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1223,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1224,4:$V2,5:$V3},o($Vl4,[2,110]),o($Vl4,[2,111]),o($Vl4,[2,112]),o($Vl4,[2,119]),{2:$V1,3:1225,4:$V2,5:$V3},{2:$V1,3:1011,4:$V2,5:$V3,111:1065,143:$Vm4,145:$Vn4,147:1226,336:1064,337:1066},{2:$V1,3:1227,4:$V2,5:$V3},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:1228,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($Vl4,[2,125]),o($VP4,[2,1067],{155:1229}),o($VP4,[2,1069],{157:1230}),o($VP4,[2,1071],{159:1231}),o($VP4,[2,1075],{161:1232}),o($VQ4,$VR4,{163:1233,178:1234}),{77:[1,1235]},o($VP4,[2,1077],{165:1236}),o($VP4,[2,1079],{167:1237}),o($VQ4,$VR4,{178:1234,163:1238}),o($VQ4,$VR4,{178:1234,163:1239}),o($VQ4,$VR4,{178:1234,163:1240}),o($VQ4,$VR4,{178:1234,163:1241}),{2:$V1,3:733,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,112:$VS2,114:736,115:$V$1,116:$V02,117:1242,118:$VT2,122:$VU2,123:$VV2,124:$VW2,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,144:758,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,158:768,160:769,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:817,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,174:1243,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,253:816,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VS4,[2,1081],{176:1244}),o($VK,[2,606],{183:[1,1245]}),o($VK,[2,602],{183:[1,1246]}),o($VK,[2,595]),{113:1247,132:$VW,296:$Vj1},o($VK,[2,604],{183:[1,1248]}),o($VK,[2,599]),o($VK,[2,600],{112:[1,1249]}),o($Vv3,[2,69]),{40:1250,79:75,89:$V7,184:99,189:$Vb},o($VK,[2,450],{74:$VT4,128:[1,1251]}),o($VU4,[2,451]),{124:[1,1253]},{2:$V1,3:1254,4:$V2,5:$V3},o($Vt1,[2,1115]),o($Vt1,[2,1116]),o($VK,[2,618]),o($Vy3,[2,355],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),o($VD4,$VE4,{114:625,327:637,112:$V_1,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,332:$Vw2}),o($VV1,[2,682]),o($VV1,[2,684]),o($VK,[2,650]),o($VK,[2,652],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1255,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1079,4:$V2,5:$V3,77:$Vo4,131:$Vp4,432:1256},o($VV4,[2,659]),o($VV4,[2,660]),o($VV4,[2,661]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1257,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1258,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{114:1077,115:$V$1,116:$V02,124:[1,1259]},o($VD3,[2,755]),o($VF3,[2,148],{74:$Vq4}),o($VF3,[2,149],{74:$Vq4}),o($VF3,[2,150],{74:$Vq4}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:817,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,253:1260,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1261,4:$V2,5:$V3,113:1263,131:[1,1262],132:$VW,296:$Vj1},o($Vr4,[2,275]),o($Vr4,[2,277]),o($Vr4,[2,279]),o($VH1,[2,160]),o($VH1,[2,1090]),{78:[1,1264]},o($VK1,[2,758]),{2:$V1,3:1265,4:$V2,5:$V3},{2:$V1,3:1266,4:$V2,5:$V3},{2:$V1,3:1268,4:$V2,5:$V3,384:1267},{2:$V1,3:1268,4:$V2,5:$V3,384:1269},{2:$V1,3:1270,4:$V2,5:$V3},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:1271,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1272,4:$V2,5:$V3},{74:$Vx3,78:[1,1273]},o($Vz2,[2,347]),o($Vz2,[2,348]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1274,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1275,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1276,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1277,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VH3,[2,504]),o($VK,$VW4,{407:1278,76:$VX4,77:[1,1279]}),o($VK,$VW4,{407:1281,76:$VX4}),{77:[1,1282]},{2:$V1,3:244,4:$V2,5:$V3,199:1283},o($VD3,[2,731]),o($VD3,[2,733]),o($VD3,[2,1146]),{143:$VF1,145:$VG1,431:1284},o($VY4,[2,1147],{419:190,479:1285,144:1286,145:$VC1,420:$Vr1,424:$Vs1}),{76:$Vs4,139:[2,1151],481:1287,483:1288},o([10,74,76,78,132,139,145,152,306,310,420,424,602,764],$VM3,{490:851,493:852,137:$VS1}),o($VD3,[2,736]),o($VD3,$VK3),{74:$VI3,78:[1,1289]},o($VO3,[2,1165],{492:1290,497:1291,152:$VT1}),o($VN3,[2,1164]),o($VO3,[2,745]),o($VO3,[2,1170]),o($VK,[2,490],{77:[1,1292]}),{76:[1,1294],77:[1,1293]},{99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,148:[1,1295],154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},o($VI4,$VZ4,{79:75,184:99,468:1296,40:1299,89:$V7,146:$V_4,189:$Vb,470:$V$4}),o($Vt4,[2,1140]),o($VQ3,[2,723]),{230:[1,1300]},o($V05,[2,769]),o($V05,[2,770]),o($V05,[2,771]),o($VR3,$VS3,{510:1301,95:$VT3,514:$VU3,515:$VV3,516:$VW3}),o($VR3,[2,768]),o($VK,[2,312]),o($VK,[2,313]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1302,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VV1,[2,690],{124:[1,1303]}),o($Vx4,[2,541]),{131:[1,1305],388:1304,390:[1,1306]},o($Vx4,[2,5]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1194,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,345:1307,419:190,420:$Vr1,424:$Vs1},o($VK,[2,455],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),o($VK,[2,589]),o($VK,[2,590]),{2:$V1,3:244,4:$V2,5:$V3,199:1308},o($VK,[2,670]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1309,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1310,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{78:[1,1311],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{78:[1,1312],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{2:$V1,3:168,4:$V2,5:$V3,40:1313,56:165,77:$VU,79:75,89:$V7,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:1314,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,184:99,189:$Vb,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{78:[1,1315]},{74:$Vx3,78:[1,1316]},o($VB1,[2,426]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1317,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,40:1318,56:165,77:$VU,78:[1,1320],79:75,89:$V7,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:1319,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,184:99,189:$Vb,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VB1,[2,429]),o($VB1,[2,431]),o($VB1,$V15,{275:1321,276:$V25}),{78:[1,1323],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{78:[1,1324],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{2:$V1,3:1325,4:$V2,5:$V3,180:[1,1326]},o($VD2,[2,619]),o($VB1,[2,363]),{306:[1,1327]},o($VB1,[2,370]),{99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,306:[2,374],311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1328,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{4:$VX3,7:879,272:1329,387:878,389:$VY3},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1330,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VD2,[2,641]),o($V74,[2,648]),o($V84,[2,636]),o($VH4,$VG4),o($VD2,[2,638]),o($Vb4,[2,643]),o($Vb4,[2,645]),o($Vb4,[2,646]),o($Vb4,[2,647]),o($VI4,[2,457],{74:$VJ4}),{77:[1,1332],143:$VY,144:1333,145:$VC1,152:$V$,181:$V31,201:1334,302:$Vn1,419:190,420:$Vr1,424:$Vs1},o($VI4,[2,463]),{74:$V35,78:[1,1335]},{74:$V45,78:[1,1337]},o([74,78,99,112,115,116,123,124,133,136,138,139,140,141,142,154,170,171,179,180,311,312,313,315,316,317,318,319,320,321,322,323,324,325,326,330,331,332,333],$V55),o($V65,[2,479],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{40:1341,77:$Ve4,79:75,89:$V7,143:$VY,144:979,145:$VC1,149:$Vc4,152:$V$,181:$V31,184:99,189:$Vb,201:980,302:$Vn1,341:1339,342:1340,344:$Vd4,419:190,420:$Vr1,424:$Vs1},o($VI4,[2,461],{74:$VJ4}),o($VK,[2,717],{457:1342,458:1343,459:1344,308:$VM4,464:[1,1345]}),o($V75,[2,701]),o($V75,[2,702]),{154:[1,1347],460:[1,1346]},{99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,308:[2,698],311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},o($VI2,[2,179]),{2:$V1,3:1348,4:$V2,5:$V3},o($VK,[2,574]),o($V85,[2,238],{84:1349,128:[1,1350]}),o($VN4,[2,1046]),{77:[1,1351]},{77:[1,1352]},o($Vf4,[2,169],{204:1353,215:1355,205:1356,216:1357,221:1360,74:$V95,206:$Va5,208:$Vb5,222:$Vc5,223:$Vd5,224:$Ve5,225:$Vf5,226:$Vg5,227:$Vh5,228:$Vi5,229:$Vj5}),{2:$V1,3:219,4:$V2,5:$V3,40:711,77:$Vw1,79:75,89:$V7,132:$Vx1,143:$VY,144:212,145:$VZ,152:$V$,156:$VL,181:$V31,184:99,189:$Vb,199:213,200:215,201:214,202:217,203:1369,209:1211,213:$Vy1,214:218,290:$VM,291:$VN,292:$VO,293:$VP,302:$Vn1,419:190,420:$Vr1,424:$Vs1},o($Vk5,[2,177]),{2:$V1,3:1011,4:$V2,5:$V3,110:1370,111:1009,112:$Vg4},o($VO4,[2,87]),o($Vh4,[2,147],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{78:[1,1371]},{74:$Vx3,78:[2,1066]},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,78:[2,1059],94:1376,111:149,113:153,120:1372,121:1373,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,241:1374,242:[1,1375],254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($Vl4,[2,98]),o($VP4,[2,1062],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),{2:$V1,3:733,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,78:[1,1377],112:$VS2,114:736,115:$V$1,116:$V02,117:1378,118:$VT2,122:$VU2,123:$VV2,124:$VW2,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,144:758,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,158:768,160:769,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,419:190,420:$Vr1,424:$Vs1},o($VP4,[2,1063],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),{78:[1,1379],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{78:[1,1380],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{78:[1,1381]},o($Vl4,[2,120]),{74:$VT4,78:[1,1382]},o($Vl4,[2,122]),{74:$Vx3,78:[1,1383]},{2:$V1,3:733,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,78:[1,1384],112:$VS2,114:736,115:$V$1,116:$V02,117:1385,118:$VT2,122:$VU2,123:$VV2,124:$VW2,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,144:758,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,158:768,160:769,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:733,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,78:[1,1386],112:$VS2,114:736,115:$V$1,116:$V02,117:1387,118:$VT2,122:$VU2,123:$VV2,124:$VW2,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,144:758,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,158:768,160:769,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:733,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,78:[1,1388],112:$VS2,114:736,115:$V$1,116:$V02,117:1389,118:$VT2,122:$VU2,123:$VV2,124:$VW2,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,144:758,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,158:768,160:769,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:733,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,78:[1,1390],112:$VS2,114:736,115:$V$1,116:$V02,117:1391,118:$VT2,122:$VU2,123:$VV2,124:$VW2,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,144:758,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,158:768,160:769,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,419:190,420:$Vr1,424:$Vs1},{74:$Vl5,78:[1,1392]},o($V65,[2,143],{419:190,3:733,114:736,144:758,158:768,160:769,117:1394,2:$V1,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,112:$VS2,115:$V$1,116:$V02,118:$VT2,122:$VU2,123:$VV2,124:$VW2,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,420:$Vr1,424:$Vs1}),o($VQ4,$VR4,{178:1234,163:1395}),{2:$V1,3:733,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,78:[1,1396],112:$VS2,114:736,115:$V$1,116:$V02,117:1397,118:$VT2,122:$VU2,123:$VV2,124:$VW2,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,144:758,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,158:768,160:769,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:733,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,78:[1,1398],112:$VS2,114:736,115:$V$1,116:$V02,117:1399,118:$VT2,122:$VU2,123:$VV2,124:$VW2,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,144:758,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,158:768,160:769,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,419:190,420:$Vr1,424:$Vs1},{74:$Vl5,78:[1,1400]},{74:$Vl5,78:[1,1401]},{74:$Vl5,78:[1,1402]},{74:$Vl5,78:[1,1403]},{78:[1,1404],153:1015,179:$Vi4,180:$Vj4,181:$Vk4},{74:$Vq4,78:[1,1405]},{2:$V1,3:733,4:$V2,5:$V3,72:$VP2,74:[1,1406],76:$VQ2,77:$VR2,112:$VS2,114:736,115:$V$1,116:$V02,117:1407,118:$VT2,122:$VU2,123:$VV2,124:$VW2,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,144:758,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,158:768,160:769,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1408,4:$V2,5:$V3},{2:$V1,3:1409,4:$V2,5:$V3},o($VK,[2,597]),{2:$V1,3:1410,4:$V2,5:$V3},{113:1411,132:$VW,296:$Vj1},{78:[1,1412]},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1413,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1011,4:$V2,5:$V3,111:1065,143:$Vm4,145:$Vn4,336:1414,337:1066},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1415,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{124:[1,1416]},o($VK,[2,653],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),o($VV4,[2,658]),{78:[1,1417],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},o($VK,[2,654],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1418,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($Vr4,[2,272]),o($Vr4,[2,274]),o($Vr4,[2,276]),o($Vr4,[2,278]),o($VH1,[2,161]),o($VK,[2,569]),{148:[1,1419]},o($VK,[2,570]),o($VD3,[2,536],{387:878,7:879,272:1420,4:$VX3,386:[1,1421],389:$VY3}),o($VK,[2,571]),o($VK,[2,573]),{74:$Vx3,78:[1,1422]},o($VK,[2,577]),o($Vz2,[2,345]),{74:[1,1423],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{74:[1,1424],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{74:[1,1425],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{74:[1,1426],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},o($VK,[2,581]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:1427,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1428,4:$V2,5:$V3},o($VK,[2,583]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1376,111:149,113:153,120:1429,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,241:1374,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{77:[1,1430]},{2:$V1,3:1431,4:$V2,5:$V3},{76:$Vs4,139:[2,1149],480:1432,483:1433},o($VY4,[2,1148]),{139:[1,1434]},{139:[2,1152]},o($VD3,[2,737]),o($VO3,[2,744]),o($VO3,[2,1166]),{2:$V1,3:1268,4:$V2,5:$V3,76:[1,1437],351:1435,358:1436,384:1438},{2:$V1,3:1011,4:$V2,5:$V3,100:1439,111:1440},{40:1441,79:75,89:$V7,184:99,189:$Vb},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1442,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VI4,[2,722]),{2:$V1,3:1011,4:$V2,5:$V3,111:1065,143:$Vm4,145:$Vn4,147:1443,336:1064,337:1066},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:1444,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VI4,[2,727]),{2:$V1,3:244,4:$V2,5:$V3,199:1445},{335:$Vu4,338:$Vv4,339:$Vw4,511:1446},o($VV1,[2,691],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1447,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{74:[1,1448],78:[1,1449]},o($V65,[2,543]),o($V65,[2,544]),{74:$V45,78:[1,1450]},o($VV1,[2,565]),o($Vz4,[2,380],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,312:$Vg2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2}),o($Vz4,[2,382],{114:625,327:637,115:$V$1,116:$V02,123:$V12,133:$V32,136:$V42,138:$V52,141:$V82,142:$V92,179:$Vd2,180:$Ve2,312:$Vg2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2}),o($VB1,[2,396]),o($VB1,[2,400]),{78:[1,1451]},{74:$Vx3,78:[1,1452]},o($VB1,[2,422]),o($VB1,[2,424]),{78:[1,1453],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{78:[1,1454]},{74:$Vx3,78:[1,1455]},o($VB1,[2,427]),o($VB1,[2,327]),{77:[1,1456]},o($VB1,$V15,{275:1457,276:$V25}),o($VB1,$V15,{275:1458,276:$V25}),o($VH4,[2,284]),o($VB1,[2,281]),o($VB1,[2,369]),o($V64,[2,373],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{74:[1,1460],78:[1,1459]},{74:[1,1462],78:[1,1461],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{2:$V1,3:1325,4:$V2,5:$V3},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1194,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,345:1463,419:190,420:$Vr1,424:$Vs1},o($VL4,[2,477]),o($VL4,[2,478]),{40:1466,77:$Ve4,79:75,89:$V7,143:$VY,144:979,145:$VC1,149:$Vc4,152:$V$,181:$V31,184:99,189:$Vb,201:980,302:$Vn1,341:1464,342:1465,344:$Vd4,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1011,4:$V2,5:$V3,111:1467},o($VL4,[2,473]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1468,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{77:$Ve4,143:$VY,144:979,145:$VC1,152:$V$,181:$V31,201:980,302:$Vn1,342:1469,419:190,420:$Vr1,424:$Vs1},o($VI4,[2,460],{74:$VJ4}),o($VI4,[2,467]),o($VK,[2,694]),o($V75,[2,699]),o($V75,[2,700]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:817,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,174:1470,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,253:816,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{170:[1,1472],309:[1,1471]},{460:[1,1473]},o($VI2,[2,180]),o($Vm5,[2,240],{85:1474,232:[1,1475]}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1476,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1477,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1478,4:$V2,5:$V3},o($Vf4,[2,170],{216:1357,221:1360,215:1479,205:1480,206:$Va5,208:$Vb5,222:$Vc5,223:$Vd5,224:$Ve5,225:$Vf5,226:$Vg5,227:$Vh5,228:$Vi5,229:$Vj5}),{2:$V1,3:219,4:$V2,5:$V3,77:$Vw1,132:$Vx1,143:$VY,144:212,145:$VZ,152:$V$,156:$VL,181:$V31,199:213,200:215,201:214,202:217,209:1481,213:$Vy1,214:218,290:$VM,291:$VN,292:$VO,293:$VP,302:$Vn1,419:190,420:$Vr1,424:$Vs1},o($Vn5,[2,205]),o($Vn5,[2,206]),{2:$V1,3:219,4:$V2,5:$V3,77:[1,1486],143:$VY,144:1484,145:$VZ,152:$V$,156:$VL,181:$V31,199:1483,200:1487,201:1485,202:1488,217:1482,290:$VM,291:$VN,292:$VO,293:$VP,302:$Vn1,419:190,420:$Vr1,424:$Vs1},{207:[1,1489],223:$Vo5},{207:[1,1491],223:$Vp5},o($Vq5,[2,222]),{206:[1,1495],208:[1,1494],221:1493,223:$Vd5,224:$Ve5,225:$Vf5,226:$Vg5,227:$Vh5,228:$Vi5,229:$Vj5},o($Vq5,[2,224]),{223:[1,1496]},{208:[1,1498],223:[1,1497]},{208:[1,1500],223:[1,1499]},{208:[1,1501]},{223:[1,1502]},{223:[1,1503]},{74:$V95,204:1504,205:1356,206:$Va5,208:$Vb5,215:1355,216:1357,221:1360,222:$Vc5,223:$Vd5,224:$Ve5,225:$Vf5,226:$Vg5,227:$Vh5,228:$Vi5,229:$Vj5},o($VO4,[2,84]),o($Vl4,[2,100]),{74:$Vr5,78:[1,1505]},{78:[1,1507]},o($Vs5,[2,261]),{78:[2,1060]},o($Vs5,[2,263],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,242:[1,1508],243:[1,1509],311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),o($Vl4,[2,99]),o($VP4,[2,1064],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),o($Vl4,[2,101]),o($Vl4,[2,102]),o($Vl4,[2,103]),o($Vl4,[2,121]),o($Vl4,[2,124]),o($Vl4,[2,127]),o($VP4,[2,1068],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),o($Vl4,[2,128]),o($VP4,[2,1070],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),o($Vl4,[2,129]),o($VP4,[2,1072],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),o($Vl4,[2,130]),o($VP4,[2,1076],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),o($Vl4,[2,131]),o($VQ4,[2,1083],{177:1510}),o($VQ4,[2,1086],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),{74:$Vl5,78:[1,1511]},o($Vl4,[2,133]),o($VP4,[2,1078],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),o($Vl4,[2,134]),o($VP4,[2,1080],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),o($Vl4,[2,135]),o($Vl4,[2,136]),o($Vl4,[2,137]),o($Vl4,[2,138]),o($Vl4,[2,139]),o($Vl4,[2,140]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:260,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,151:1512,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VS4,[2,1082],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),o($VK,[2,607]),o($VK,[2,603]),o($VK,[2,605]),o($VK,[2,601]),o($Vv3,[2,71]),o($VK,[2,449],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),o($VU4,[2,452]),o($VU4,[2,453],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1513,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VV4,[2,662]),o($VK,[2,655],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{2:$V1,3:1514,4:$V2,5:$V3},o($VD3,[2,545],{385:1515,391:1516,392:1517,366:1525,154:$Vt5,187:$Vu5,230:$Vv5,297:$Vw5,343:$Vx5,356:$Vy5,368:$Vz5,369:$VA5,373:$VB5,374:$VC5}),o($VD3,[2,535]),o($VK,[2,576],{76:[1,1529]}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1530,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1531,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1532,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1533,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{74:$Vx3,78:[1,1534]},o($VK,[2,585]),{74:$Vr5,78:[1,1535]},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1376,111:149,113:153,120:1536,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,241:1374,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o([10,74,78,139,306,310,602,764],[2,741]),{139:[1,1537]},{139:[2,1150]},{2:$V1,3:1122,4:$V2,5:$V3,132:$VR1,137:$VS1,143:$VF1,145:$VG1,152:$VT1,431:585,475:1124,478:1538,482:582,493:579,497:581},{78:[1,1539]},{74:[1,1540],78:[2,506]},{40:1541,79:75,89:$V7,184:99,189:$Vb},o($V65,[2,532]),{74:$V35,78:[1,1542]},o($Vk5,$V55),o($VK,[2,1133],{412:1543,413:1544,72:$VD5}),o($VI4,$VZ4,{79:75,184:99,114:625,327:637,40:1299,468:1546,89:$V7,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,146:$V_4,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,189:$Vb,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2,470:$V$4}),o($VI4,[2,725],{74:$VT4}),o($VI4,[2,726],{74:$Vx3}),o([10,53,72,89,124,146,156,189,266,267,290,306,310,335,338,339,396,400,401,404,406,408,409,417,418,434,436,437,439,440,441,442,443,447,448,451,452,505,507,508,517,602,764],[2,1181],{512:1547,3:1548,2:$V1,4:$V2,5:$V3,76:[1,1549]}),o($VE5,[2,1183],{513:1550,76:[1,1551]}),o($VV1,[2,692],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{131:[1,1552]},o($Vx4,[2,538]),o($Vx4,[2,540]),o($VB1,[2,412]),o($VB1,[2,413]),o($VB1,[2,439]),o($VB1,[2,423]),o($VB1,[2,425]),{118:$VF5,277:1553,278:1554,279:[1,1555]},o($VB1,[2,328]),o($VB1,[2,329]),o($VB1,[2,316]),{131:[1,1557]},o($VB1,[2,318]),{131:[1,1558]},{74:$V45,78:[1,1559]},{77:$Ve4,143:$VY,144:979,145:$VC1,152:$V$,181:$V31,201:980,302:$Vn1,342:1560,419:190,420:$Vr1,424:$Vs1},o($VI4,[2,465],{74:$VJ4}),o($VI4,[2,468]),o($Vk5,[2,488]),o($V65,[2,480],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),o($VI4,[2,459],{74:$VJ4}),o($VK,[2,718],{74:$Vq4,198:[1,1561]}),{335:$VG5,338:$VH5,461:1562},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1565,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{119:[1,1567],170:[1,1568],309:[1,1566]},o($VI5,[2,259],{86:1569,118:[1,1570]}),{119:[1,1571]},o($V85,[2,239],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{95:[1,1572],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{95:[1,1573]},o($Vn5,[2,203]),o($Vn5,[2,204]),o($Vk5,[2,178]),o($Vn5,[2,237],{218:1574,230:[1,1575],231:[1,1576]}),o($VJ5,[2,208],{3:1577,2:$V1,4:$V2,5:$V3,76:[1,1578]}),o($VK5,[2,1095],{219:1579,76:[1,1580]}),{2:$V1,3:1581,4:$V2,5:$V3,76:[1,1582]},{40:1583,79:75,89:$V7,184:99,189:$Vb},o($VJ5,[2,216],{3:1584,2:$V1,4:$V2,5:$V3,76:[1,1585]}),o($VJ5,[2,219],{3:1586,2:$V1,4:$V2,5:$V3,76:[1,1587]}),{77:[1,1588]},o($Vq5,[2,234]),{77:[1,1589]},o($Vq5,[2,230]),o($Vq5,[2,223]),{223:$Vp5},{223:$Vo5},o($Vq5,[2,225]),o($Vq5,[2,226]),{223:[1,1590]},o($Vq5,[2,228]),{223:[1,1591]},{223:[1,1592]},o($Vq5,[2,232]),o($Vq5,[2,233]),{78:[1,1593],205:1480,206:$Va5,208:$Vb5,215:1479,216:1357,221:1360,222:$Vc5,223:$Vd5,224:$Ve5,225:$Vf5,226:$Vg5,227:$Vh5,228:$Vi5,229:$Vj5},o($Vl4,[2,91]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1376,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,241:1594,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($Vl4,[2,92]),o($Vs5,[2,264]),{244:[1,1595]},o($V65,[2,142],{419:190,3:733,114:736,144:758,158:768,160:769,117:1596,2:$V1,4:$V2,5:$V3,72:$VP2,76:$VQ2,77:$VR2,112:$VS2,115:$V$1,116:$V02,118:$VT2,122:$VU2,123:$VV2,124:$VW2,128:$VX2,129:$VY2,130:$VZ2,131:$V_2,132:$V$2,133:$V03,134:$V13,135:$V23,136:$V33,137:$V43,138:$V53,139:$V63,140:$V73,141:$V83,142:$V93,143:$Va3,145:$Vb3,146:$Vc3,148:$Vd3,149:$Ve3,150:$Vf3,152:$Vg3,154:$Vh3,156:$Vi3,162:$Vj3,164:$Vk3,166:$Vl3,168:$Vm3,169:$Vn3,170:$Vo3,171:$Vp3,172:$Vq3,173:$Vr3,175:$Vs3,185:$Vt3,187:$Vu3,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,420:$Vr1,424:$Vs1}),o($Vl4,[2,132]),{74:$Vx3,78:[1,1597]},o($VU4,[2,454],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),o($VK,[2,572]),o($VD3,[2,534]),o($VD3,[2,546],{366:1525,392:1598,154:$Vt5,187:$Vu5,230:$Vv5,297:$Vw5,343:$Vx5,356:$Vy5,368:$Vz5,369:$VA5,373:$VB5,374:$VC5}),o($Vw3,[2,548]),{370:[1,1599]},{370:[1,1600]},{2:$V1,3:244,4:$V2,5:$V3,199:1601},o($Vw3,[2,554],{77:[1,1602]}),{2:$V1,3:114,4:$V2,5:$V3,77:[1,1604],113:251,131:$VV,132:$VW,143:$VY,152:$V$,156:$VL,181:$V31,196:250,200:1605,201:254,257:252,258:253,265:$VD1,274:1603,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,302:$Vn1},o($Vw3,[2,558]),{297:[1,1606]},o($Vw3,[2,560]),o($Vw3,[2,561]),{335:[1,1607]},{77:[1,1608]},{2:$V1,3:1609,4:$V2,5:$V3},{78:[1,1610],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{78:[1,1611],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{78:[1,1612],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{78:[1,1613],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},o($VK,$VW4,{407:1614,76:$VX4}),o($VK,[2,591]),{74:$Vr5,78:[1,1615]},{2:$V1,3:1122,4:$V2,5:$V3,132:$VR1,137:$VS1,143:$VF1,145:$VG1,152:$VT1,431:585,475:1124,478:1616,482:582,493:579,497:581},o($VD3,[2,735]),o($VK,[2,493],{352:1617,354:1618,355:1619,4:$VL5,243:$VM5,343:$VN5,356:$VO5}),o($VP5,$VQ5,{3:1268,359:1624,384:1625,360:1626,361:1627,2:$V1,4:$V2,5:$V3,367:$VR5}),{78:[2,507]},{76:[1,1629]},o($VK,[2,609]),o($VK,[2,1134]),{368:[1,1631],414:[1,1630]},o($VI4,[2,728]),o($VK,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,504:95,184:99,3:100,12:1632,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,124:$V8,146:$V9,156:$Va,189:$Vb,266:$Vc,267:$Vd,290:$Ve,335:$Vf,338:$Vg,339:$Vh,396:$Vi,400:$Vj,401:$Vk,404:$Vl,406:$Vm,408:$Vn,409:$Vo,417:$Vp,418:$Vq,434:$Vr,436:$Vs,437:$Vt,439:$Vu,440:$Vv,441:$Vw,442:$Vx,443:$Vy,447:$Vz,448:$VA,451:$VB,452:$VC,505:$VD,507:$VE,508:$VF,517:$VG}),o($VK,[2,762]),o($VE5,[2,1182]),o($VK,$V0,{17:5,18:7,19:8,20:9,21:10,22:11,23:12,24:13,25:14,26:15,27:16,28:17,29:18,30:19,31:20,32:21,33:22,34:23,35:24,36:25,37:26,38:27,39:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:36,48:37,49:38,50:39,51:40,52:41,54:43,55:44,56:45,57:46,58:47,59:48,60:49,61:50,62:51,63:52,64:53,65:54,66:55,67:56,68:57,69:58,70:59,71:60,79:75,504:95,184:99,3:100,12:1633,2:$V1,4:$V2,5:$V3,53:$V5,72:$V6,89:$V7,124:$V8,146:$V9,156:$Va,189:$Vb,266:$Vc,267:$Vd,290:$Ve,335:$Vf,338:$Vg,339:$Vh,396:$Vi,400:$Vj,401:$Vk,404:$Vl,406:$Vm,408:$Vn,409:$Vo,417:$Vp,418:$Vq,434:$Vr,436:$Vs,437:$Vt,439:$Vu,440:$Vv,441:$Vw,442:$Vx,443:$Vy,447:$Vz,448:$VA,451:$VB,452:$VC,505:$VD,507:$VE,508:$VF,517:$VG}),o($VE5,[2,1184]),{78:[1,1634]},{78:[1,1635],118:$VF5,278:1636},{78:[1,1637]},{119:[1,1638]},{119:[1,1639]},{78:[1,1640]},{78:[1,1641]},o($VL4,[2,476]),o($VI4,[2,464],{74:$VJ4}),{2:$V1,3:244,4:$V2,5:$V3,143:$VF1,145:$VG1,199:1643,431:1642},o($V75,[2,703]),o($V75,[2,705]),{146:[1,1644]},{99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,309:[1,1645],311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},{339:$VS5,462:1646},{417:[1,1649],463:[1,1648]},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1650,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VT5,[2,267],{87:1651,245:[1,1652],247:[1,1653]}),{119:[1,1654]},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1660,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,233:1655,235:1656,236:$VU5,237:$VV5,238:$VW5,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1661,4:$V2,5:$V3},{2:$V1,3:1662,4:$V2,5:$V3},o($Vn5,[2,207]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1663,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1011,4:$V2,5:$V3,100:1664,111:1440},o($VJ5,[2,209]),{2:$V1,3:1665,4:$V2,5:$V3},o($VJ5,[2,1097],{220:1666,3:1667,2:$V1,4:$V2,5:$V3}),o($VK5,[2,1096]),o($VJ5,[2,212]),{2:$V1,3:1668,4:$V2,5:$V3},{78:[1,1669]},o($VJ5,[2,217]),{2:$V1,3:1670,4:$V2,5:$V3},o($VJ5,[2,220]),{2:$V1,3:1671,4:$V2,5:$V3},{40:1672,79:75,89:$V7,184:99,189:$Vb},{40:1673,79:75,89:$V7,184:99,189:$Vb},o($Vq5,[2,227]),o($Vq5,[2,229]),o($Vq5,[2,231]),o($Vf4,[2,171]),o($Vs5,[2,262]),o($Vs5,[2,265],{242:[1,1674]}),o($VQ4,[2,1084],{153:1015,179:$Vi4,180:$Vj4,181:$Vk4}),o($Vl4,[2,141]),o($Vw3,[2,547]),o($Vw3,[2,550]),{374:[1,1675]},o($Vw3,[2,1127],{395:1676,393:1677,77:$VX5}),{131:$VV,196:1679},o($Vw3,[2,555]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1680,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($Vw3,[2,557]),o($Vw3,[2,559]),{2:$V1,3:114,4:$V2,5:$V3,77:[1,1682],113:251,131:$VV,132:$VW,143:$VY,152:$V$,156:$VL,181:$V31,196:250,200:255,201:254,257:252,258:253,265:$VD1,274:1681,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,302:$Vn1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1683,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VK,[2,578]),o($Vz2,[2,349]),o($Vz2,[2,350]),o($Vz2,[2,351]),o($Vz2,[2,352]),o($VK,[2,582]),o($VK,[2,592]),o($VD3,[2,734]),o($VK,[2,489]),o($VK,[2,494],{355:1684,4:$VL5,243:$VM5,343:$VN5,356:$VO5}),o($VY5,[2,496]),o($VY5,[2,497]),{124:[1,1685]},{124:[1,1686]},{124:[1,1687]},{74:[1,1688],78:[2,505]},o($V65,[2,533]),o($V65,[2,508]),{187:[1,1696],193:[1,1697],362:1689,363:1690,364:1691,365:1692,366:1693,368:$Vz5,369:[1,1694],370:[1,1698],373:[1,1695]},{2:$V1,3:1699,4:$V2,5:$V3},{40:1700,79:75,89:$V7,184:99,189:$Vb},{415:[1,1701]},{416:[1,1702]},o($VK,[2,761]),o($VK,[2,763]),o($Vx4,[2,537]),o($VB1,[2,331]),{78:[1,1703]},o($VB1,[2,332]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1660,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,233:1704,235:1656,236:$VU5,237:$VV5,238:$VW5,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1376,111:149,113:153,120:1705,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,241:1374,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($VB1,[2,317]),o($VB1,[2,319]),{2:$V1,3:1706,4:$V2,5:$V3},o($VK,[2,720],{77:[1,1707]}),{2:$V1,3:1011,4:$V2,5:$V3,111:1065,143:$Vm4,145:$Vn4,147:1708,336:1064,337:1066},{335:$VG5,338:$VH5,461:1709},o($V75,[2,707]),{77:[1,1711],343:[1,1712],344:[1,1710]},{170:[1,1714],309:[1,1713]},{170:[1,1716],309:[1,1715]},{99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,309:[1,1717],311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},o($Vh4,[2,250],{88:1718,162:[1,1719],168:[1,1721],169:[1,1720]}),{131:$VV,196:1722},{131:$VV,196:1723},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1376,111:149,113:153,120:1724,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,241:1374,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},o($Vm5,[2,248],{234:1725,74:$VZ5,239:[1,1727]}),o($V_5,[2,242]),{146:[1,1728]},{77:[1,1729]},{77:[1,1730]},o($V_5,[2,247],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{78:[2,1051],96:1731,99:[1,1733],102:1732},{99:[1,1734]},o($Vn5,[2,235],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),o($Vn5,[2,236],{74:$V35}),o($VJ5,[2,210]),o($VJ5,[2,211]),o($VJ5,[2,1098]),o($VJ5,[2,213]),{2:$V1,3:1735,4:$V2,5:$V3,76:[1,1736]},o($VJ5,[2,218]),o($VJ5,[2,221]),{78:[1,1737]},{78:[1,1738]},o($Vs5,[2,266]),{2:$V1,3:244,4:$V2,5:$V3,199:1739},o($Vw3,[2,552]),o($Vw3,[2,1128]),{2:$V1,3:1740,4:$V2,5:$V3},{74:[1,1741]},{78:[1,1742],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},o($Vw3,[2,562]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1743,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{78:[1,1744],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},o($VY5,[2,495]),{2:$V1,3:1745,4:$V2,5:$V3},{131:$VV,196:1746},{2:$V1,3:1747,4:$V2,5:$V3},o($VP5,$VQ5,{361:1627,360:1748,367:$VR5}),o($VD3,[2,510]),o($VD3,[2,511]),o($VD3,[2,512]),o($VD3,[2,513]),o($VD3,[2,514]),{370:[1,1749]},{370:[1,1750]},o($V$5,[2,1121],{382:1751,370:[1,1752]}),{2:$V1,3:1753,4:$V2,5:$V3},{2:$V1,3:1754,4:$V2,5:$V3},o($VP5,[2,516]),o($VK,[2,1131],{411:1755,413:1756,72:$VD5}),o($VK,[2,610]),o($VK,[2,611],{367:[1,1757]}),o($VB1,[2,333]),o([78,118],[2,334],{74:$VZ5}),{74:$Vr5,78:[2,335]},o($VK,[2,719]),{2:$V1,3:1011,4:$V2,5:$V3,100:1758,111:1440},o($V75,[2,706],{74:$VT4}),o($V75,[2,704]),{77:$Ve4,143:$VY,144:979,145:$VC1,152:$V$,181:$V31,201:980,302:$Vn1,342:1759,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1011,4:$V2,5:$V3,100:1760,111:1440},{344:[1,1761]},{339:$VS5,462:1762},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1763,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{339:$VS5,462:1764},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1765,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{339:$VS5,462:1766},o($Vh4,[2,72]),{40:1767,79:75,89:$V7,164:[1,1768],184:99,189:$Vb,240:[1,1769]},{40:1770,79:75,89:$V7,184:99,189:$Vb,240:[1,1771]},{40:1772,79:75,89:$V7,184:99,189:$Vb,240:[1,1773]},o($VT5,[2,270],{246:1774,247:[1,1775]}),{248:1776,249:[2,1099],766:[1,1777]},o($VI5,[2,260],{74:$Vr5}),o($Vm5,[2,241]),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1660,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,235:1778,236:$VU5,237:$VV5,238:$VW5,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1779,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{77:[1,1780]},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1660,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,233:1781,235:1656,236:$VU5,237:$VV5,238:$VW5,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1660,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,233:1782,235:1656,236:$VU5,237:$VV5,238:$VW5,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{78:[1,1783]},{78:[2,1052]},{77:[1,1784]},{77:[1,1785]},o($VJ5,[2,214]),{2:$V1,3:1786,4:$V2,5:$V3},{2:$V1,3:1787,4:$V2,5:$V3,76:[1,1788]},{2:$V1,3:1789,4:$V2,5:$V3,76:[1,1790]},o($Vw3,[2,1125],{394:1791,393:1792,77:$VX5}),{78:[1,1793]},{131:$VV,196:1794},o($Vw3,[2,556]),{78:[1,1795],99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},o($Vw3,[2,517]),o($VY5,[2,498]),o($VY5,[2,499]),o($VY5,[2,500]),o($V65,[2,509]),{2:$V1,3:1797,4:$V2,5:$V3,77:[2,1117],371:1796},{77:[1,1798]},{2:$V1,3:1800,4:$V2,5:$V3,77:[2,1123],383:1799},o($V$5,[2,1122]),{77:[1,1801]},{77:[1,1802]},o($VK,[2,608]),o($VK,[2,1132]),o($VP5,$VQ5,{361:1627,360:1803,367:$VR5}),{74:$V35,78:[1,1804]},o($V75,[2,713],{74:$VJ4}),{74:$V35,78:[1,1805]},o($V75,[2,715]),o($V75,[2,708]),{99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,309:[1,1806],311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},o($V75,[2,711]),{99:$VZ1,112:$V_1,114:625,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,309:[1,1807],311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,327:637,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2},o($V75,[2,709]),o($Vh4,[2,251]),{40:1808,79:75,89:$V7,184:99,189:$Vb,240:[1,1809]},{40:1810,79:75,89:$V7,184:99,189:$Vb},o($Vh4,[2,253]),{40:1811,79:75,89:$V7,184:99,189:$Vb},o($Vh4,[2,254]),{40:1812,79:75,89:$V7,184:99,189:$Vb},o($VT5,[2,268]),{131:$VV,196:1813},{249:[1,1814]},{249:[2,1100]},o($V_5,[2,243]),o($Vm5,[2,249],{114:625,327:637,99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1660,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,233:1815,235:1656,236:$VU5,237:$VV5,238:$VW5,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{74:$VZ5,78:[1,1816]},{74:$VZ5,78:[1,1817]},o($VN4,[2,1053],{97:1818,104:1819,3:1821,2:$V1,4:$V2,5:$V3,76:$V06}),{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1824,103:1822,105:1823,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1011,4:$V2,5:$V3,100:1825,111:1440},o($VJ5,[2,215]),o($Vn5,[2,173]),{2:$V1,3:1826,4:$V2,5:$V3},o($Vn5,[2,175]),{2:$V1,3:1827,4:$V2,5:$V3},o($Vw3,[2,551]),o($Vw3,[2,1126]),o($Vw3,[2,549]),{78:[1,1828]},o($Vw3,[2,563]),{77:[1,1829]},{77:[2,1118]},{2:$V1,3:1831,4:$V2,5:$V3,132:$V16,372:1830},{77:[1,1833]},{77:[2,1124]},{2:$V1,3:1011,4:$V2,5:$V3,100:1834,111:1440},{2:$V1,3:1011,4:$V2,5:$V3,100:1835,111:1440},o($VK,[2,612]),o($VK,[2,721]),{343:[1,1837],344:[1,1836]},{339:$VS5,462:1838},{335:$VG5,338:$VH5,461:1839},o($Vh4,[2,252]),{40:1840,79:75,89:$V7,184:99,189:$Vb},o($Vh4,[2,255]),o($Vh4,[2,257]),o($Vh4,[2,258]),o($VT5,[2,271]),{131:[2,1101],250:1841,645:[1,1842]},{74:$VZ5,78:[1,1843]},o($V_5,[2,245]),o($V_5,[2,246]),o($VN4,[2,74]),o($VN4,[2,1054]),{2:$V1,3:1844,4:$V2,5:$V3},o($VN4,[2,78]),{74:[1,1846],78:[1,1845]},o($V65,[2,80]),o($V65,[2,81],{114:625,327:637,76:[1,1847],99:$VZ1,112:$V_1,115:$V$1,116:$V02,123:$V12,124:$Vz3,133:$V32,136:$V42,138:$V52,139:$V62,140:$V72,141:$V82,142:$V92,154:$Va2,170:$Vb2,171:$Vc2,179:$Vd2,180:$Ve2,311:$Vf2,312:$Vg2,313:$Vh2,315:$Vi2,316:$Vj2,317:$Vk2,318:$Vl2,319:$Vm2,320:$Vn2,321:$Vo2,322:$Vp2,323:$Vq2,324:$Vr2,325:$Vs2,326:$Vt2,330:$Vu2,331:$Vv2,332:$Vw2,333:$Vx2}),{74:$V35,78:[1,1848]},o($Vn5,[2,174]),o($Vn5,[2,176]),o($Vw3,[2,553]),{2:$V1,3:1831,4:$V2,5:$V3,132:$V16,372:1849},{74:$V26,78:[1,1850]},o($V65,[2,528]),o($V65,[2,529]),{2:$V1,3:1011,4:$V2,5:$V3,100:1852,111:1440},{74:$V35,78:[1,1853]},{74:$V35,78:[1,1854]},{77:$Ve4,143:$VY,144:979,145:$VC1,152:$V$,181:$V31,201:980,302:$Vn1,342:1855,419:190,420:$Vr1,424:$Vs1},{344:[1,1856]},o($V75,[2,710]),o($V75,[2,712]),o($Vh4,[2,256]),{131:$VV,196:1857},{131:[2,1102]},o($V_5,[2,244]),o($VN4,[2,77]),{78:[2,76]},{2:$V1,3:168,4:$V2,5:$V3,56:165,77:$VU,94:1824,105:1858,111:149,113:153,131:$VV,132:$VW,137:$VX,143:$VY,144:161,145:$VZ,149:$V_,152:$V$,154:$V01,156:$VL,158:167,179:$V11,180:$V21,181:$V31,196:151,200:147,201:155,202:156,254:150,255:146,256:148,257:152,258:154,259:157,260:158,261:159,262:162,263:163,265:$V41,266:$Vc,270:$V51,271:$V61,273:$V71,280:$V81,281:$V91,282:$Va1,283:$Vb1,284:$Vc1,285:$Vd1,286:$Ve1,287:$Vf1,288:$Vg1,290:$VM,291:$VN,292:$VO,293:$VP,294:$Vh1,295:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,302:$Vn1,303:$Vo1,312:$Vp1,317:$Vq1,419:190,420:$Vr1,424:$Vs1},{2:$V1,3:1859,4:$V2,5:$V3},{78:[1,1860]},{74:$V26,78:[1,1861]},{374:[1,1862]},{2:$V1,3:1863,4:$V2,5:$V3,132:[1,1864]},{74:$V35,78:[1,1865]},o($VD3,[2,526]),o($VD3,[2,527]),o($V75,[2,714],{74:$VJ4}),o($V75,[2,716]),o($V36,[2,1103],{251:1866,766:[1,1867]}),o($V65,[2,79]),o($V65,[2,82]),o($VN4,[2,1055],{3:1821,101:1868,104:1869,2:$V1,4:$V2,5:$V3,76:$V06}),o($VD3,[2,518]),{2:$V1,3:244,4:$V2,5:$V3,199:1870},o($V65,[2,530]),o($V65,[2,531]),o($VD3,[2,525]),o($VT5,[2,1105],{252:1871,415:[1,1872]}),o($V36,[2,1104]),o($VN4,[2,75]),o($VN4,[2,1056]),o($V46,[2,1119],{375:1873,377:1874,77:[1,1875]}),o($VT5,[2,269]),o($VT5,[2,1106]),o($VD3,[2,521],{376:1876,378:1877,230:[1,1878]}),o($V46,[2,1120]),{2:$V1,3:1831,4:$V2,5:$V3,132:$V16,372:1879},o($VD3,[2,519]),{230:[1,1881],379:1880},{338:[1,1882]},{74:$V26,78:[1,1883]},o($VD3,[2,522]),{335:[1,1884]},{380:[1,1885]},o($V46,[2,520]),{380:[1,1886]},{381:[1,1887]},{381:[1,1888]},{230:[2,523]},o($VD3,[2,524])],\ndefaultActions: {105:[2,6],194:[2,336],195:[2,337],196:[2,338],197:[2,339],198:[2,340],199:[2,341],200:[2,342],201:[2,343],202:[2,344],209:[2,695],591:[2,1142],653:[2,1107],654:[2,1108],710:[2,696],780:[2,1073],781:[2,1074],926:[2,446],927:[2,447],928:[2,448],987:[2,697],1288:[2,1152],1375:[2,1060],1433:[2,1150],1541:[2,507],1732:[2,1052],1777:[2,1100],1797:[2,1118],1800:[2,1124],1842:[2,1102],1845:[2,76],1887:[2,523]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        function _parseError (msg, hash) {\n            this.message = msg;\n            this.hash = hash;\n        }\n        _parseError.prototype = Error;\n\n        throw new _parseError(str, hash);\n    }\n},\nparse: function parse(input) {\n    var self = this,\n        stack = [0],\n        tstack = [], // token stack\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n    var args = lstack.slice.call(arguments, 1);\n\n    //this.reductionCount = this.shiftCount = 0;\n\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    // copy state\n    for (var k in this.yy) {\n      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n        sharedState.yy[k] = this.yy[k];\n      }\n    }\n\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n\n    var ranges = lexer.options && lexer.options.ranges;\n\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n\n    function popStack (n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n\n_token_stack:\n    var lex = function () {\n        var token;\n        token = lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length - 1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            // read action for current state and first input\n            action = table[state] && table[state][symbol];\n        }\n\n_handle_error:\n        // handle parse error\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var error_rule_depth;\n            var errStr = '';\n\n            // Return the rule stack depth where the nearest error rule can be found.\n            // Return FALSE when no error recovery rule was found.\n            function locateNearestErrorRecoveryRule(state) {\n                var stack_probe = stack.length - 1;\n                var depth = 0;\n\n                // try to recover from error\n                for(;;) {\n                    // check for error recovery rule in this state\n                    if ((TERROR.toString()) in table[state]) {\n                        return depth;\n                    }\n                    if (state === 0 || stack_probe < 2) {\n                        return false; // No suitable error recovery rule available.\n                    }\n                    stack_probe -= 2; // popStack(1): [symbol, action]\n                    state = stack[stack_probe];\n                    ++depth;\n                }\n            }\n\n            if (!recovering) {\n                // first see if there's any chance at hitting an error recovery rule:\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n\n                // Report error\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push(\"'\"+this.terminals_[p]+\"'\");\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + (this.terminals_[symbol] || symbol)+ \"'\";\n                } else {\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                  (symbol == EOF ? \"end of input\" :\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected,\n                    recoverable: (error_rule_depth !== false)\n                });\n            } else if (preErrorSymbol !== EOF) {\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n            }\n\n            // just recovered from another error\n            if (recovering == 3) {\n                if (symbol === EOF || preErrorSymbol === EOF) {\n                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');\n                }\n\n                // discard current lookahead and grab another\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                symbol = lex();\n            }\n\n            // try to recover from error\n            if (error_rule_depth === false) {\n                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');\n            }\n            popStack(error_rule_depth);\n\n            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token\n            symbol = TERROR;         // insert generic error symbol as new lookahead\n            state = stack[stack.length-1];\n            action = table[state] && table[state][TERROR];\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n        }\n\n        switch (action[0]) {\n            case 1: // shift\n                //this.shiftCount++;\n\n                stack.push(symbol);\n                vstack.push(lexer.yytext);\n                lstack.push(lexer.yylloc);\n                stack.push(action[1]); // push state\n                symbol = null;\n                if (!preErrorSymbol) { // normal execution/no error\n                    yyleng = lexer.yyleng;\n                    yytext = lexer.yytext;\n                    yylineno = lexer.yylineno;\n                    yyloc = lexer.yylloc;\n                    if (recovering > 0) {\n                        recovering--;\n                    }\n                } else {\n                    // error just occurred, resume old lookahead f/ before error\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                }\n                break;\n\n            case 2:\n                // reduce\n                //this.reductionCount++;\n\n                len = this.productions_[action[1]][1];\n\n                // perform semantic action\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                // default location, uses first token for firsts, last for lasts\n                yyval._$ = {\n                    first_line: lstack[lstack.length-(len||1)].first_line,\n                    last_line: lstack[lstack.length-1].last_line,\n                    first_column: lstack[lstack.length-(len||1)].first_column,\n                    last_column: lstack[lstack.length-1].last_column\n                };\n                if (ranges) {\n                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];\n                }\n                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n                if (typeof r !== 'undefined') {\n                    return r;\n                }\n\n                // pop off stack\n                if (len) {\n                    stack = stack.slice(0,-1*len*2);\n                    vstack = vstack.slice(0, -1*len);\n                    lstack = lstack.slice(0, -1*len);\n                }\n\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                vstack.push(yyval.$);\n                lstack.push(yyval._$);\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                stack.push(newState);\n                break;\n\n            case 3:\n                // accept\n                return true;\n        }\n\n    }\n\n    return true;\n}};\n\n// from https://www.postgresql.org/docs/current/static/sql-keywords-appendix.html\r\n// JSON.stringify([].slice.call(document.querySelectorAll('tr')).filter(x => x.children.length == 5 && x.children[2].innerText == 'reserved').map(x => x.children[0].innerText))\r\n\nvar nonReserved = [\"A\",\"ABSENT\",\"ABSOLUTE\",\"ACCORDING\",\"ACTION\",\"ADA\",\"ADD\",\"ADMIN\",\"AFTER\",\"ALWAYS\",\"ASC\",\"ASSERTION\",\"ASSIGNMENT\",\"ATTRIBUTE\",\"ATTRIBUTES\",\"BASE64\",\"BEFORE\",\"BERNOULLI\",\"BLOCKED\",\"BOM\",\"BREADTH\",\"C\",\"CASCADE\",\"CATALOG\",\"CATALOG_NAME\",\"CHAIN\",\"CHARACTERISTICS\",\"CHARACTERS\",\"CHARACTER_SET_CATALOG\",\"CHARACTER_SET_NAME\",\"CHARACTER_SET_SCHEMA\",\"CLASS_ORIGIN\",\"COBOL\",\"COLLATION\",\"COLLATION_CATALOG\",\"COLLATION_NAME\",\"COLLATION_SCHEMA\",\"COLUMNS\",\"COLUMN_NAME\",\"COMMAND_FUNCTION\",\"COMMAND_FUNCTION_CODE\",\"COMMITTED\",\"CONDITION_NUMBER\",\"CONNECTION\",\"CONNECTION_NAME\",\"CONSTRAINTS\",\"CONSTRAINT_CATALOG\",\"CONSTRAINT_NAME\",\"CONSTRAINT_SCHEMA\",\"CONSTRUCTOR\",\"CONTENT\",\"CONTINUE\",\"CONTROL\",\"CURSOR_NAME\",\"DATA\",\"DATETIME_INTERVAL_CODE\",\"DATETIME_INTERVAL_PRECISION\",\"DB\",\"DEFAULTS\",\"DEFERRABLE\",\"DEFERRED\",\"DEFINED\",\"DEFINER\",\"DEGREE\",\"DEPTH\",\"DERIVED\",\"DESC\",\"DESCRIPTOR\",\"DIAGNOSTICS\",\"DISPATCH\",\"DOCUMENT\",\"DOMAIN\",\"DYNAMIC_FUNCTION\",\"DYNAMIC_FUNCTION_CODE\",\"EMPTY\",\"ENCODING\",\"ENFORCED\",\"EXCLUDE\",\"EXCLUDING\",\"EXPRESSION\",\"FILE\",\"FINAL\",\"FIRST\",\"FLAG\",\"FOLLOWING\",\"FORTRAN\",\"FOUND\",\"FS\",\"G\",\"GENERAL\",\"GENERATED\",\"GO\",\"GOTO\",\"GRANTED\",\"HEX\",\"HIERARCHY\",\"ID\",\"IGNORE\",\"IMMEDIATE\",\"IMMEDIATELY\",\"IMPLEMENTATION\",\"INCLUDING\",\"INCREMENT\",\"INDENT\",\"INITIALLY\",\"INPUT\",\"INSTANCE\",\"INSTANTIABLE\",\"INSTEAD\",\"INTEGRITY\",\"INVOKER\",\"ISOLATION\",\"K\",\"KEY\",\"KEY_MEMBER\",\"KEY_TYPE\",\"LAST\",\"LENGTH\",\"LEVEL\",\"LIBRARY\",\"LIMIT\",\"LINK\",\"LOCATION\",\"LOCATOR\",\"M\",\"MAP\",\"MAPPING\",\"MATCHED\",\"MAXVALUE\",\"MESSAGE_LENGTH\",\"MESSAGE_OCTET_LENGTH\",\"MESSAGE_TEXT\",\"MINVALUE\",\"MORE\",\"MUMPS\",\"NAME\",\"NAMES\",\"NAMESPACE\",\"NESTING\",\"NEXT\",\"NFC\",\"NFD\",\"NFKC\",\"NFKD\",\"NIL\",\"NORMALIZED\",\"NULLABLE\",\"NULLS\",\"NUMBER\",\"OBJECT\",\"OCTETS\",\"OFF\",\"OPTION\",\"OPTIONS\",\"ORDERING\",\"ORDINALITY\",\"OTHERS\",\"OUTPUT\",\"OVERRIDING\",\"P\",\"PAD\",\"PARAMETER_MODE\",\"PARAMETER_NAME\",\"PARAMETER_ORDINAL_POSITION\",\"PARAMETER_SPECIFIC_CATALOG\",\"PARAMETER_SPECIFIC_NAME\",\"PARAMETER_SPECIFIC_SCHEMA\",\"PARTIAL\",\"PASCAL\",\"PASSING\",\"PASSTHROUGH\",\"PATH\",\"PERMISSION\",\"PLACING\",\"PLI\",\"PRECEDING\",\"PRESERVE\",\"PRIOR\",\"PRIVILEGES\",\"PUBLIC\",\"READ\",\"RECOVERY\",\"RELATIVE\",\"REPEATABLE\",\"REQUIRING\",\"RESPECT\",\"RESTART\",\"RESTORE\",\"RESTRICT\",\"RETURNED_CARDINALITY\",\"RETURNED_LENGTH\",\"RETURNED_OCTET_LENGTH\",\"RETURNED_SQLSTATE\",\"RETURNING\",\"ROLE\",\"ROUTINE\",\"ROUTINE_CATALOG\",\"ROUTINE_NAME\",\"ROUTINE_SCHEMA\",\"ROW_COUNT\",\"SCALE\",\"SCHEMA\",\"SCHEMA_NAME\",\"SCOPE_CATALOG\",\"SCOPE_NAME\",\"SCOPE_SCHEMA\",\"SECTION\",\"SECURITY\",\"SELECTIVE\",\"SELF\",\"SEQUENCE\",\"SERIALIZABLE\",\"SERVER\",\"SERVER_NAME\",\"SESSION\",\"SETS\",\"SIMPLE\",\"SIZE\",\"SOURCE\",\"SPACE\",\"SPECIFIC_NAME\",\"STANDALONE\",\"STATE\",\"STATEMENT\",\"STRIP\",\"STRUCTURE\",\"STYLE\",\"SUBCLASS_ORIGIN\",\"T\",\"TABLE_NAME\",\"TEMPORARY\",\"TIES\",\"TOKEN\",\"TOP_LEVEL_COUNT\",\"TRANSACTION\",\"TRANSACTIONS_COMMITTED\",\"TRANSACTIONS_ROLLED_BACK\",\"TRANSACTION_ACTIVE\",\"TRANSFORM\",\"TRANSFORMS\",\"TRIGGER_CATALOG\",\"TRIGGER_NAME\",\"TRIGGER_SCHEMA\",\"TYPE\",\"UNBOUNDED\",\"UNCOMMITTED\",\"UNDER\",\"UNLINK\",\"UNNAMED\",\"UNTYPED\",\"URI\",\"USAGE\",\"USER_DEFINED_TYPE_CATALOG\",\"USER_DEFINED_TYPE_CODE\",\"USER_DEFINED_TYPE_NAME\",\"USER_DEFINED_TYPE_SCHEMA\",\"VALID\",\"VERSION\",\"VIEW\",\"WHITESPACE\",\"WORK\",\"WRAPPER\",\"WRITE\",\"XMLDECLARATION\",\"XMLSCHEMA\",\"YES\",\"ZONE\"]\r\n\nparser.parseError = function(str, hash) {\r\n\tif (hash.expected && hash.expected.indexOf(\"'LITERAL'\") > -1 && /[a-zA-Z_][a-zA-Z_0-9]*/.test(hash.token) && nonReserved.indexOf(hash.token) > -1) {\r\n\t\treturn\r\n\t}\r\n\tthrow new SyntaxError(str)\r\n}\r\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"case-insensitive\":true},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return 266\nbreak;\ncase 1:return 302\nbreak;\ncase 2:return 420\nbreak;\ncase 3:return 299\nbreak;\ncase 4:return 5\nbreak;\ncase 5:return 5\nbreak;\ncase 6:return 296\nbreak;\ncase 7:return 296\nbreak;\ncase 8:return 132\nbreak;\ncase 9:return 132\nbreak;\ncase 10:return /* its a COMMENT */\nbreak;\ncase 11:/* skip whitespace */\nbreak;\ncase 12:return 316\nbreak;\ncase 13:return 319\nbreak;\ncase 14:yy_.yytext = 'VALUE';return 89\nbreak;\ncase 15:yy_.yytext = 'VALUE';return 189\nbreak;\ncase 16:yy_.yytext = 'ROW';return 189\nbreak;\ncase 17:yy_.yytext = 'COLUMN';return 189\nbreak;\ncase 18:yy_.yytext = 'MATRIX';return 189\nbreak;\ncase 19:yy_.yytext = 'INDEX';return 189\nbreak;\ncase 20:yy_.yytext = 'RECORDSET';return 189\nbreak;\ncase 21:yy_.yytext = 'TEXT';return 189\nbreak;\ncase 22:yy_.yytext = 'SELECT';return 189\nbreak;\ncase 23:return 520\nbreak;\ncase 24:return 381\nbreak;\ncase 25:return 402\nbreak;\ncase 26:return 515\nbreak;\ncase 27:return 287\nbreak;\ncase 28:return 269\nbreak;\ncase 29:return 269\nbreak;\ncase 30:return 164\nbreak;\ncase 31:return 400\nbreak;\ncase 32:return 170\nbreak;\ncase 33:return 229\nbreak;\ncase 34:return 166\nbreak;\ncase 35:return 207\nbreak;\ncase 36:return 288\nbreak;\ncase 37:return 76\nbreak;\ncase 38:return 418\nbreak;\ncase 39:return 242\nbreak;\ncase 40:return 404\nbreak;\ncase 41:return 356\nbreak;\ncase 42:return 284\nbreak;\ncase 43:return 514\nbreak;\ncase 44:return 437\nbreak;\ncase 45:return 330\nbreak;\ncase 46:return 441\nbreak;\ncase 47:return 331\nbreak;\ncase 48:return 315\nbreak;\ncase 49:return 119\nbreak;\ncase 50:return 112\nbreak;\ncase 51:return 315\nbreak;\ncase 52:return 112\nbreak;\ncase 53:return 315\nbreak;\ncase 54:return 112\nbreak;\ncase 55:return 315\nbreak;\ncase 56:return 508\nbreak;\ncase 57:return 303\nbreak;\ncase 58:return 271\nbreak;\ncase 59:return 368\nbreak;\ncase 60:return 130\nbreak;\ncase 61:return 'CLOSE'\nbreak;\ncase 62:return 243\nbreak;\ncase 63:return 190\nbreak;\ncase 64:return 190\nbreak;\ncase 65:return 434\nbreak;\ncase 66:return 367\nbreak;\ncase 67:return 470\nbreak;\ncase 68:return 440\nbreak;\ncase 69:return 273\nbreak;\ncase 70:return 240\nbreak;\ncase 71:return 281\nbreak;\ncase 72:return 267\nbreak;\ncase 73:return 206\nbreak;\ncase 74:return 238\nbreak;\ncase 75:return 265\nbreak;\ncase 76:return 'CURSOR'\nbreak;\ncase 77:return 405\nbreak;\ncase 78:return 291\nbreak;\ncase 79:return 292\nbreak;\ncase 80:return 448\nbreak;\ncase 81:return 343\nbreak;\ncase 82:return 338\nbreak;\ncase 83:return 'DELETED'\nbreak;\ncase 84:return 242\nbreak;\ncase 85:return 406\nbreak;\ncase 86:return 185\nbreak;\ncase 87:return 396\nbreak;\ncase 88:return 447\nbreak;\ncase 89:return 135\nbreak;\ncase 90:return 306\nbreak;\ncase 91:return 389\nbreak;\ncase 92:return 310\nbreak;\ncase 93:return 314\nbreak;\ncase 94:return 169\nbreak;\ncase 95:return 508\nbreak;\ncase 96:return 508\nbreak;\ncase 97:return 298\nbreak;\ncase 98:return 14\nbreak;\ncase 99:return 295\nbreak;\ncase 100:return 249\nbreak;\ncase 101:return 285\nbreak;\ncase 102:return 95\nbreak;\ncase 103:return 373\nbreak;\ncase 104:return 183\nbreak;\ncase 105:return 227\nbreak;\ncase 106:return 268\nbreak;\ncase 107:return 313\nbreak;\ncase 108:return 602\nbreak;\ncase 109:return 472\nbreak;\ncase 110:return 232\nbreak;\ncase 111:return 236\nbreak;\ncase 112:return 239\nbreak;\ncase 113:return 156\nbreak;\ncase 114:return 356\nbreak;\ncase 115:return 332\nbreak;\ncase 116:return 99\nbreak;\ncase 117:return 193\nbreak;\ncase 118:return 212\nbreak;\ncase 119:return 224\nbreak;\ncase 120:return 516\nbreak;\ncase 121:return 339\nbreak;\ncase 122:return 213\nbreak;\ncase 123:return 168\nbreak;\ncase 124:return 293\nbreak;\ncase 125:return 198\nbreak;\ncase 126:return 223\nbreak;\ncase 127:return 370\nbreak;\ncase 128:return 286\nbreak;\ncase 129:return 'LET'\nbreak;\ncase 130:return 225\nbreak;\ncase 131:return 112\nbreak;\ncase 132:return 245\nbreak;\ncase 133:return 460\nbreak;\ncase 134:return 191\nbreak;\ncase 135:return 283\nbreak;\ncase 136:return 390\nbreak;\ncase 137:return 282\nbreak;\ncase 138:return 452\nbreak;\ncase 139:return 169\nbreak;\ncase 140:return 403\nbreak;\ncase 141:return 222\nbreak;\ncase 142:return 645\nbreak;\ncase 143:return 270\nbreak;\ncase 144:return 244\nbreak;\ncase 145:return 380\nbreak;\ncase 146:return 154\nbreak;\ncase 147:return 297\nbreak;\ncase 148:return 433\nbreak;\ncase 149:return 230\nbreak;\ncase 150:return 415\nbreak;\ncase 151:return 129\nbreak;\ncase 152:return 247\nbreak;\ncase 153:return 'OPEN'\nbreak;\ncase 154:return 416\nbreak;\ncase 155:return 171\nbreak;\ncase 156:return 118\nbreak;\ncase 157:return 208\nbreak;\ncase 158:return 276\nbreak;\ncase 159:return 172\nbreak;\ncase 160:return 279\nbreak;\ncase 161:return 765\nbreak;\ncase 162:return 93\nbreak;\ncase 163:return 16\nbreak;\ncase 164:return 369\nbreak;\ncase 165:return 442\nbreak;\ncase 166:return 678\nbreak;\ncase 167:return 15\nbreak;\ncase 168:return 414\nbreak;\ncase 169:return 194\nbreak;\ncase 170:return 'REDUCE'\nbreak;\ncase 171:return 374\nbreak;\ncase 172:return 311\nbreak;\ncase 173:return 517\nbreak;\ncase 174:return 682\nbreak;\ncase 175:return 107\nbreak;\ncase 176:return 401\nbreak;\ncase 177:return 175\nbreak;\ncase 178:return 290\nbreak;\ncase 179:return 443\nbreak;\ncase 180:return 687\nbreak;\ncase 181:return 173\nbreak;\ncase 182:return 173\nbreak;\ncase 183:return 226\nbreak;\ncase 184:return 436\nbreak;\ncase 185:return 237\nbreak;\ncase 186:return 150\nbreak;\ncase 187:return 766\nbreak;\ncase 188:return 405\nbreak;\ncase 189:return 89\nbreak;\ncase 190:return 228\nbreak;\ncase 191:return 146\nbreak;\ncase 192:return 146\nbreak;\ncase 193:return 409\nbreak;\ncase 194:return 334\nbreak;\ncase 195:return 417\nbreak;\ncase 196:return 'STRATEGY'\nbreak;\ncase 197:return 'STORE'\nbreak;\ncase 198:return 280\nbreak;\ncase 199:return 353\nbreak;\ncase 200:return 353\nbreak;\ncase 201:return 463\nbreak;\ncase 202:return 357\nbreak;\ncase 203:return 357\nbreak;\ncase 204:return 192\nbreak;\ncase 205:return 309\nbreak;\ncase 206:return 'TIMEOUT'\nbreak;\ncase 207:return 148\nbreak;\ncase 208:return 195\nbreak;\ncase 209:return 435\nbreak;\ncase 210:return 435\nbreak;\ncase 211:return 509\nbreak;\ncase 212:return 294\nbreak;\ncase 213:return 451\nbreak;\ncase 214:return 162\nbreak;\ncase 215:return 187\nbreak;\ncase 216:return 98\nbreak;\ncase 217:return 335\nbreak;\ncase 218:return 408\nbreak;\ncase 219:return 231\nbreak;\ncase 220:return 149\nbreak;\ncase 221:return 344\nbreak;\ncase 222:return 134\nbreak;\ncase 223:return 410\nbreak;\ncase 224:return 308\nbreak;\ncase 225:return 128\nbreak;\ncase 226:return 439\nbreak;\ncase 227:return 72\nbreak;\ncase 228:return 435  /* Is this keyword required? */\nbreak;\ncase 229:return 131\nbreak;\ncase 230:return 131\nbreak;\ncase 231:return 115\nbreak;\ncase 232:return 137\nbreak;\ncase 233:return 179\nbreak;\ncase 234:return 317\nbreak;\ncase 235:return 180\nbreak;\ncase 236:return 133\nbreak;\ncase 237:return 138\nbreak;\ncase 238:return 326\nbreak;\ncase 239:return 323\nbreak;\ncase 240:return 325\nbreak;\ncase 241:return 322\nbreak;\ncase 242:return 320\nbreak;\ncase 243:return 318\nbreak;\ncase 244:return 319\nbreak;\ncase 245:return 142\nbreak;\ncase 246:return 141\nbreak;\ncase 247:return 139\nbreak;\ncase 248:return 321\nbreak;\ncase 249:return 324\nbreak;\ncase 250:return 140\nbreak;\ncase 251:return 124\nbreak;\ncase 252:return 324\nbreak;\ncase 253:return 77\nbreak;\ncase 254:return 78\nbreak;\ncase 255:return 145\nbreak;\ncase 256:return 424\nbreak;\ncase 257:return 426\nbreak;\ncase 258:return 300\nbreak;\ncase 259:return 505\nbreak;\ncase 260:return 507\nbreak;\ncase 261:return 122\nbreak;\ncase 262:return 116\nbreak;\ncase 263:return 74\nbreak;\ncase 264:return 333\nbreak;\ncase 265:return 152\nbreak;\ncase 266:return 764\nbreak;\ncase 267:return 143\nbreak;\ncase 268:return 181\nbreak;\ncase 269:return 136\nbreak;\ncase 270:return 123\nbreak;\ncase 271:return 312\nbreak;\ncase 272:return 4\nbreak;\ncase 273:return 10\nbreak;\ncase 274:return 'INVALID'\nbreak;\n}\n},\nrules: [/^(?:``([^\\`])+``)/i,/^(?:\\[\\?\\])/i,/^(?:@\\[)/i,/^(?:ARRAY\\[)/i,/^(?:\\[([^\\]])*?\\])/i,/^(?:`([^\\`])*?`)/i,/^(?:N(['](\\\\.|[^']|\\\\')*?['])+)/i,/^(?:X(['](\\\\.|[^']|\\\\')*?['])+)/i,/^(?:(['](\\\\.|[^']|\\\\')*?['])+)/i,/^(?:([\"](\\\\.|[^\"]|\\\\\")*?[\"])+)/i,/^(?:--(.*?)($|\\r\\n|\\r|\\n))/i,/^(?:\\s+)/i,/^(?:\\|\\|)/i,/^(?:\\|)/i,/^(?:VALUE\\s+OF\\s+SEARCH\\b)/i,/^(?:VALUE\\s+OF\\s+SELECT\\b)/i,/^(?:ROW\\s+OF\\s+SELECT\\b)/i,/^(?:COLUMN\\s+OF\\s+SELECT\\b)/i,/^(?:MATRIX\\s+OF\\s+SELECT\\b)/i,/^(?:INDEX\\s+OF\\s+SELECT\\b)/i,/^(?:RECORDSET\\s+OF\\s+SELECT\\b)/i,/^(?:TEXT\\s+OF\\s+SELECT\\b)/i,/^(?:SELECT\\b)/i,/^(?:ABSOLUTE\\b)/i,/^(?:ACTION\\b)/i,/^(?:ADD\\b)/i,/^(?:AFTER\\b)/i,/^(?:AGGR\\b)/i,/^(?:AGGREGATE\\b)/i,/^(?:AGGREGATOR\\b)/i,/^(?:ALL\\b)/i,/^(?:ALTER\\b)/i,/^(?:AND\\b)/i,/^(?:ANTI\\b)/i,/^(?:ANY\\b)/i,/^(?:APPLY\\b)/i,/^(?:ARRAY\\b)/i,/^(?:AS\\b)/i,/^(?:ASSERT\\b)/i,/^(?:ASC\\b)/i,/^(?:ATTACH\\b)/i,/^(?:AUTO(_)?INCREMENT\\b)/i,/^(?:AVG\\b)/i,/^(?:BEFORE\\b)/i,/^(?:BEGIN\\b)/i,/^(?:BETWEEN\\b)/i,/^(?:BREAK\\b)/i,/^(?:NOT\\s+BETWEEN\\b)/i,/^(?:NOT\\s+LIKE\\b)/i,/^(?:BY\\b)/i,/^(?:~~\\*)/i,/^(?:!~~\\*)/i,/^(?:~~)/i,/^(?:!~~)/i,/^(?:ILIKE\\b)/i,/^(?:NOT\\s+ILIKE\\b)/i,/^(?:CALL\\b)/i,/^(?:CASE\\b)/i,/^(?:CAST\\b)/i,/^(?:CHECK\\b)/i,/^(?:CLASS\\b)/i,/^(?:CLOSE\\b)/i,/^(?:COLLATE\\b)/i,/^(?:COLUMN\\b)/i,/^(?:COLUMNS\\b)/i,/^(?:COMMIT\\b)/i,/^(?:CONSTRAINT\\b)/i,/^(?:CONTENT\\b)/i,/^(?:CONTINUE\\b)/i,/^(?:CONVERT\\b)/i,/^(?:CORRESPONDING\\b)/i,/^(?:COUNT\\b)/i,/^(?:CREATE\\b)/i,/^(?:CROSS\\b)/i,/^(?:CUBE\\b)/i,/^(?:CURRENT_TIMESTAMP\\b)/i,/^(?:CURSOR\\b)/i,/^(?:DATABASE(S)?)/i,/^(?:DATEADD\\b)/i,/^(?:DATEDIFF\\b)/i,/^(?:DECLARE\\b)/i,/^(?:DEFAULT\\b)/i,/^(?:DELETE\\b)/i,/^(?:DELETED\\b)/i,/^(?:DESC\\b)/i,/^(?:DETACH\\b)/i,/^(?:DISTINCT\\b)/i,/^(?:DROP\\b)/i,/^(?:ECHO\\b)/i,/^(?:EDGE\\b)/i,/^(?:END\\b)/i,/^(?:ENUM\\b)/i,/^(?:ELSE\\b)/i,/^(?:ESCAPE\\b)/i,/^(?:EXCEPT\\b)/i,/^(?:EXEC\\b)/i,/^(?:EXECUTE\\b)/i,/^(?:EXISTS\\b)/i,/^(?:EXPLAIN\\b)/i,/^(?:FALSE\\b)/i,/^(?:FETCH\\b)/i,/^(?:FIRST\\b)/i,/^(?:FOR\\b)/i,/^(?:FOREIGN\\b)/i,/^(?:FROM\\b)/i,/^(?:FULL\\b)/i,/^(?:FUNCTION\\b)/i,/^(?:GLOB\\b)/i,/^(?:GO\\b)/i,/^(?:GRAPH\\b)/i,/^(?:GROUP\\b)/i,/^(?:GROUPING\\b)/i,/^(?:HAVING\\b)/i,/^(?:IF\\b)/i,/^(?:IDENTITY\\b)/i,/^(?:IS\\b)/i,/^(?:IN\\b)/i,/^(?:INDEX\\b)/i,/^(?:INDEXED\\b)/i,/^(?:INNER\\b)/i,/^(?:INSTEAD\\b)/i,/^(?:INSERT\\b)/i,/^(?:INSERTED\\b)/i,/^(?:INTERSECT\\b)/i,/^(?:INTERVAL\\b)/i,/^(?:INTO\\b)/i,/^(?:JOIN\\b)/i,/^(?:KEY\\b)/i,/^(?:LAST\\b)/i,/^(?:LET\\b)/i,/^(?:LEFT\\b)/i,/^(?:LIKE\\b)/i,/^(?:LIMIT\\b)/i,/^(?:MATCHED\\b)/i,/^(?:MATRIX\\b)/i,/^(?:MAX(\\s+)?(?=\\())/i,/^(?:MAX(\\s+)?(?=(,|\\))))/i,/^(?:MIN(\\s+)?(?=\\())/i,/^(?:MERGE\\b)/i,/^(?:MINUS\\b)/i,/^(?:MODIFY\\b)/i,/^(?:NATURAL\\b)/i,/^(?:NEXT\\b)/i,/^(?:NEW\\b)/i,/^(?:NOCASE\\b)/i,/^(?:NO\\b)/i,/^(?:NOT\\b)/i,/^(?:NULL\\b)/i,/^(?:OFF\\b)/i,/^(?:ON\\b)/i,/^(?:ONLY\\b)/i,/^(?:OF\\b)/i,/^(?:OFFSET\\b)/i,/^(?:OPEN\\b)/i,/^(?:OPTION\\b)/i,/^(?:OR\\b)/i,/^(?:ORDER\\b)/i,/^(?:OUTER\\b)/i,/^(?:OVER\\b)/i,/^(?:PATH\\b)/i,/^(?:PARTITION\\b)/i,/^(?:PERCENT\\b)/i,/^(?:PIVOT\\b)/i,/^(?:PLAN\\b)/i,/^(?:PRIMARY\\b)/i,/^(?:PRINT\\b)/i,/^(?:PRIOR\\b)/i,/^(?:QUERY\\b)/i,/^(?:READ\\b)/i,/^(?:RECORDSET\\b)/i,/^(?:REDUCE\\b)/i,/^(?:REFERENCES\\b)/i,/^(?:REGEXP\\b)/i,/^(?:REINDEX\\b)/i,/^(?:RELATIVE\\b)/i,/^(?:REMOVE\\b)/i,/^(?:RENAME\\b)/i,/^(?:REPEAT\\b)/i,/^(?:REPLACE\\b)/i,/^(?:REQUIRE\\b)/i,/^(?:RESTORE\\b)/i,/^(?:RETURN\\b)/i,/^(?:RETURNS\\b)/i,/^(?:RIGHT\\b)/i,/^(?:ROLLBACK\\b)/i,/^(?:ROLLUP\\b)/i,/^(?:ROW\\b)/i,/^(?:ROWS\\b)/i,/^(?:SCHEMA(S)?)/i,/^(?:SEARCH\\b)/i,/^(?:SEMI\\b)/i,/^(?:SET\\b)/i,/^(?:SETS\\b)/i,/^(?:SHOW\\b)/i,/^(?:SOME\\b)/i,/^(?:SOURCE\\b)/i,/^(?:STRATEGY\\b)/i,/^(?:STORE\\b)/i,/^(?:SUM\\b)/i,/^(?:TABLE\\b)/i,/^(?:TABLES\\b)/i,/^(?:TARGET\\b)/i,/^(?:TEMP\\b)/i,/^(?:TEMPORARY\\b)/i,/^(?:TEXTSTRING\\b)/i,/^(?:THEN\\b)/i,/^(?:TIMEOUT\\b)/i,/^(?:TO\\b)/i,/^(?:TOP\\b)/i,/^(?:TRAN\\b)/i,/^(?:TRANSACTION\\b)/i,/^(?:TRIGGER\\b)/i,/^(?:TRUE\\b)/i,/^(?:TRUNCATE\\b)/i,/^(?:UNION\\b)/i,/^(?:UNIQUE\\b)/i,/^(?:UNPIVOT\\b)/i,/^(?:UPDATE\\b)/i,/^(?:USE\\b)/i,/^(?:USING\\b)/i,/^(?:VALUE\\b)/i,/^(?:VALUES\\b)/i,/^(?:VERTEX\\b)/i,/^(?:VIEW\\b)/i,/^(?:WHEN\\b)/i,/^(?:WHERE\\b)/i,/^(?:WHILE\\b)/i,/^(?:WITH\\b)/i,/^(?:WORK\\b)/i,/^(?:(\\d*[.])?\\d+[eE]\\d+)/i,/^(?:(\\d*[.])?\\d+)/i,/^(?:->)/i,/^(?:#)/i,/^(?:\\+)/i,/^(?:-)/i,/^(?:\\*)/i,/^(?:\\/)/i,/^(?:%)/i,/^(?:!===)/i,/^(?:===)/i,/^(?:!==)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:&)/i,/^(?:\\|)/i,/^(?:<<)/i,/^(?:>>)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\\()/i,/^(?:\\))/i,/^(?:@)/i,/^(?:\\{)/i,/^(?:\\})/i,/^(?:\\])/i,/^(?::-)/i,/^(?:\\?-)/i,/^(?:\\.\\.)/i,/^(?:\\.)/i,/^(?:,)/i,/^(?:::)/i,/^(?::)/i,/^(?:;)/i,/^(?:\\$)/i,/^(?:\\?)/i,/^(?:!)/i,/^(?:\\^)/i,/^(?:~)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = alasqlparser;\nexports.Parser = alasqlparser.Parser;\nexports.parse = function () { return alasqlparser.parse.apply(alasqlparser, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}\n/**\n   12prettyflag.js - prettify\n   @todo move this functionality to plugin\n*/\n\n/**\n \tPretty flag - nice HTML output or standard text without any tags\n\t@type {boolean}\n*/\n\nalasql.prettyflag = false;\n\n/**\n\tPretty output of SQL functions\n\t@function\n\t@param {string} sql SQL statement\n\t@param {boolean} flag value\n\t@return {string} HTML or text string with pretty output \n*/\n\nalasql.pretty = function(sql, flag) {\n\tvar pf = alasql.prettyflag;\n\talasql.prettyflag = !flag;\n\tvar s = alasql.parse(sql).toString();\n\talasql.prettyflag = pf;\n\treturn s;\n};\n\n/*jshint unused:false*/\r\n/*\r\n    Utilities for Alasql.js\r\n\n    @todo Review the list of utilities\r\n    @todo Find more effective utilities\r\n*/\r\n\n/**\r\n    Alasql utility functions\r\n    @type {object}\r\n */\r\nvar utils = alasql.utils = {};\r\n\n/**\r\n    Convert NaN to undefined\r\n    @function\r\n    @param {string} s JavaScript string to be modified\r\n    @return {string} Covered expression\r\n\n    @example\r\n\n    123         => 123\r\n    undefined   => undefined\r\n    NaN         => undefined\r\n\n*/\r\nfunction n2u(s) {\r\n    return '(y='+s+',y===y?y:undefined)';\r\n}\r\n\n/**\r\n    Return undefined if s undefined\r\n    @param {string} s JavaScript string to be modified\r\n    @return {string} Covered expression\r\n\n    @example\r\n\n    123,a       => a\r\n    undefined,a => undefined\r\n    NaN,a       => undefined\r\n\n*/\r\nfunction und(s,r) {\r\n    return '(y='+s+',typeof y==\"undefined\"?undefined:'+r+')';\r\n}\r\n\n/**\r\n    Return always true. Stub for non-ecisting WHERE clause, because is faster then if(whenrfn) whenfn()\r\n    @function\r\n    @return {boolean} Always true\r\n*/\r\nfunction returnTrue () {return true;}\r\n\n/**\r\n    Return undefined. Stub for non-ecisting WHERE clause, because is faster then if(whenrfn) whenfn()\r\n    @function\r\n    @return {undefined} Always undefined\r\n*/\r\nfunction returnUndefined() {}\r\n\n/**\r\n    Escape string\r\n    @function\r\n    @param {string} s Source string\r\n    @return {string} Escaped string\r\n    @example\r\n\n    Pit\\er's => Pit\\\\er\\'s\r\n\n*/\r\n// based on joliss/js-string-escape\r\nvar escapeq = utils.escapeq = function(s) {\r\n\n  return ('' + s).replace(/[\"'\\\\\\n\\r\\u2028\\u2029]/g, function (character) {\r\n    // Escape all characters not included in SingleStringCharacters and\r\n    // DoubleStringCharacters on\r\n    // http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.4\r\n    switch (character) {\r\n      case '\"':\r\n      case \"'\":\r\n      case '\\\\':\r\n        return '\\\\' + character\r\n        // Four possible LineTerminator characters need to be escaped:\r\n      case '\\n':\r\n        return '\\\\n'\r\n      case '\\r':\r\n        return '\\\\r'\r\n      case '\\u2028':\r\n        return '\\\\u2028'\r\n      case '\\u2029':\r\n        return '\\\\u2029'\r\n    }\r\n  })\r\n};\r\n\n/**\r\n    Double quotes for SQL statements\r\n    @param {string} s Source string\r\n    @return {string} Escaped string\r\n\n    @example\r\n\n    Piter's => Piter''s\r\n\n */\r\nvar escapeqq = utils.undoubleq = function(s) {\r\n    return s.replace(/(\\')/g,'\\'\\'');\r\n};\r\n\n/**\r\n    Replace double quotes with single quote\r\n    @param {string} s Source string\r\n    @return {string} Replaced string\r\n    @example\r\n\n    Piter''s => Piter's\r\n\n */\r\nvar doubleq = utils.doubleq = function(s) {\r\n    return s.replace(/(\\'\\')/g,'\\\\\\'');\r\n};\r\n\n/**\r\n    Replace sigle quote to escaped single quote\r\n    @param {string} s Source string\r\n    @return {string} Replaced string\r\n\n    @todo Chack this functions\r\n\n*/\r\n var doubleqq = utils.doubleqq = function(s) {\r\n    return s.replace(/\\'/g,\"\\'\");\r\n};\r\n\n/**\r\n    Cut BOM first character for UTF-8 files (for merging two files)\r\n    @param {string} s Source string\r\n    @return {string} Replaced string\r\n*/\r\n\nvar cutbom = function(s) {\r\n    if(s[0] === String.fromCharCode(65279)){\r\n        s = s.substr(1);\r\n    }\r\n    return s;\r\n}\r\n\n/**\r\n    Get the blobal scope\r\n    Inspired by System.global\r\n    @return {object} The global scope\r\n*/\r\nutils.global = (function(){\r\n  try {\r\n    return Function('return this')();\r\n\n  }catch(e){\r\n    //If Content Security Policy\r\n    var global =  self || window || global;\r\n\n    if(global){\r\n    \treturn global;\r\n    } else {\r\n    \tthrow new Error('Unable to locate global object');\r\n    }\r\n  }\r\n})();\r\n\n/**\r\n    Find out if a function is native to the enviroment\r\n    @param {function} Function to check\r\n    @return {boolean} True if function is native\r\n*/\r\nvar isNativeFunction = utils.isNativeFunction = function(fn){\r\n  return typeof fn === \"function\" && !!~(fn.toString().indexOf(\"[native code]\"));\r\n}\r\n\n/**\r\n    Find out if code is running in a web worker enviroment\r\n    @return {boolean} True if code is running in a web worker enviroment\r\n*/\r\nutils.isWebWorker = (function(){\r\n  try{\r\n    var importScripts = utils.global.importScripts;\r\n    return (utils.isNativeFunction(importScripts));\r\n  }catch(e){\r\n    return false;\r\n  }\r\n})();\r\n\n/**\r\n    Find out if code is running in a node enviroment\r\n    @return {boolean} True if code is running in a node enviroment\r\n*/\r\nutils.isNode = (function(){\r\n  try{\r\n    return utils.isNativeFunction(utils.global.process.reallyExit);\r\n  }catch(e){\r\n    return false;\r\n  }\r\n})();\r\n\n/**\r\n    Find out if code is running in a browser enviroment\r\n    @return {boolean} True if code is running in a browser enviroment\r\n*/\r\nutils.isBrowser = (function(){\r\n  try{\r\n    return utils.isNativeFunction(utils.global.location.reload);\r\n  }catch(e){\r\n    return false;\r\n  }\r\n})();\r\n\n/**\r\n    Find out if code is running in a browser with a browserify setup\r\n    @return {boolean} True if code is running in a browser with a browserify setup\r\n*/\r\nutils.isBrowserify = (function(){\r\n\treturn utils.isBrowser && (typeof process !== \"undefined\") && process.browser;\r\n})();\r\n\n/**\r\n    Find out if code is running in a browser with a requireJS setup\r\n    @return {boolean} True if code is running in a browser with a requireJS setup\r\n*/\r\nutils.isRequireJS = (function(){\r\n\treturn utils.isBrowser && (typeof require === \"function\") && (typeof require.specified === \"function\");\r\n})();\r\n\n/**\r\n    Find out if code is running with Meteor in the enviroment\r\n    @return {boolean} True if code is running with Meteor in the enviroment\r\n\n    @todo Find out if this is the best way to do this\r\n*/\r\nutils.isMeteor = (function(){\r\n  return (typeof Meteor !== 'undefined' && Meteor.release)\r\n})();\r\n\n/**\r\n    Find out if code is running on a Meteor client\r\n    @return {boolean} True if code is running on a Meteor client\r\n*/\r\nutils.isMeteorClient = utils.isMeteorClient = (function(){\r\n  return utils.isMeteor && Meteor.isClient;\r\n})();\r\n\n/**\r\n    Find out if code is running on a Meteor server\r\n    @return {boolean} True if code is running on a Meteor server\r\n*/\r\nutils.isMeteorServer = (function(){\r\n  return utils.isMeteor && Meteor.isServer;\r\n})();\r\n\n/**\r\n    Find out code is running in a cordovar enviroment\r\n    @return {boolean} True if code is running in a web worker enviroment\r\n\n    @todo Find out if this is the best way to do this\r\n*/\r\nutils.isCordova = (function(){\r\n  return (typeof cordova === 'object')\r\n})();\r\n\nutils.isReactNative = (function(){\r\n  var isReact = false;\r\n  //*not-for-browser/*\r\n  try{\r\n\tif(typeof require('react-native') === 'object'){\r\n\t\tisReact = true;\r\n\t}\r\n  }catch(e){void 0\t}\r\n  //*/\r\n  return isReact;\r\n})();\r\n\nutils.hasIndexedDB = (function(){\r\n  return !!utils.global.indexedDB;\r\n})();\r\n\nutils.isArray = function(obj){\r\n\treturn \"[object Array]\"===Object.prototype.toString.call(obj);\r\n}\r\n/**\r\n    Load text file from anywhere\r\n    @param {string|object} path File path or HTML event\r\n    @param {boolean} asy True - async call, false - sync call\r\n    @param {function} success Success function\r\n    @param {function} error Error function\r\n    @return {string} Read data\r\n\n    @todo Define Event type\r\n    @todo Smaller if-else structures.\r\n*/\r\nvar loadFile = utils.loadFile = function(path, asy, success, error) {\r\n    var data, fs;\r\n    if(utils.isNode || utils.isMeteorServer) {\r\n    \t//*not-for-browser/*\r\n        if(utils.isMeteor) {\r\n            fs = Npm.require('fs');\r\n        } else {\r\n            fs = require('fs');\r\n        }\r\n\n        // If path is empty, than read data from stdin (for Node) \r\n        if(typeof path === 'undefined') {\r\n            var buff = '';\r\n            process.stdin.setEncoding('utf8');\r\n            process.stdin.on('readable', function() {\r\n                var chunk = process.stdin.read();\r\n                if (chunk !== null) {\r\n                    buff += chunk.toString();\r\n                }\r\n            });\r\n            process.stdin.on('end', function() {\r\n               success(cutbom(buff));\r\n            });\r\n        } else {\r\n            if(/^[a-z]+:\\/\\//i.test(path)) {\r\n                var request = require('request');\r\n                request(path,function(err, response, body) {\r\n                    if(err) {\r\n                        throw err;\r\n                    }\r\n                    success(cutbom(body.toString()));\r\n                });\r\n            } else {\r\n                //If async callthen call async\r\n                if(asy) {\r\n                    fs.readFile(path,function(err,data){\r\n                        if(err) {\r\n                            throw err;\r\n                        }\r\n                        success(cutbom(data.toString()));\r\n                    });\r\n                } else {\r\n                    // Call sync version \r\n                    data = fs.readFileSync(path);\r\n                    success(cutbom(data.toString()));\r\n                }\r\n            }\r\n        }\r\n\t} else if(utils.isReactNative) {\r\n        // If ReactNative\r\n\t\tvar RNFS = require('react-native-fs');\r\n        RNFS.readFile(path,'utf8').then(function(contents){\r\n\t\t\tsuccess(cutbom(contents));\r\n\t\t}).catch(function(err){\r\n\t\t\tthrow err;\r\n\t\t});\r\n\t//*/\r\n    } else if(utils.isCordova) {\r\n        /* If Cordova */\r\n        utils.global.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function (fileSystem) {\r\n            fileSystem.root.getFile(path, {create:false}, function (fileEntry) {\r\n                fileEntry.file(function(file){\r\n                    var fileReader = new FileReader();\r\n                    fileReader.onloadend = function(e){\r\n                        success(cutbom(this.result));\r\n                    };\r\n                    fileReader.readAsText(file);\r\n                });\r\n            });\r\n        });\r\n\n/** @todo Check eliminated code below */\r\n\n    } else {\r\n        /* For string */\r\n        if(typeof path === \"string\") {\r\n            // For browser read from tag\r\n            /*\r\n                SELECT * FROM TXT('#one') -- read data from HTML element with id=\"one\"\r\n            */\r\n            if((path.substr(0,1) === '#') && (typeof document !== 'undefined')) {\r\n                data = document.querySelector(path).textContent;\r\n                success(data);\r\n            } else {\r\n                /*\r\n                    Simply read file from HTTP request, like:\r\n                    SELECT * FROM TXT('http://alasql.org/README.md');\r\n                */\r\n                var xhr = new XMLHttpRequest();\r\n                xhr.onreadystatechange = function() {\r\n                    if (xhr.readyState === 4) {\r\n                        if (xhr.status === 200) {\r\n                            if (success){\r\n                                success(cutbom(xhr.responseText));\r\n                            }\r\n                        } else if (error){\r\n                            error(xhr);\r\n                        }\r\n                        // Todo: else...?\r\n\n                    }\r\n                };\r\n                xhr.open(\"GET\", path, asy); // Async\r\n                xhr.responseType = \"text\";\r\n                xhr.send();\r\n            }\r\n        } else if(path instanceof Event) {\r\n            /*\r\n                For browser read from files input element\r\n                <input type=\"files\" onchange=\"readFile(event)\">\r\n                <script>\r\n                    function readFile(event) {\r\n                        alasql('SELECT * FROM TXT(?)',[event])\r\n                    }\r\n                </script>\r\n            */\r\n            /** @type {array} List of files from <input> element */\r\n            var files = path.target.files;\r\n            /** type {object} */\r\n            var reader = new FileReader();\r\n            /** type {string} */\r\n            var name = files[0].name;\r\n            reader.onload = function(e) {\r\n                var data = e.target.result;\r\n                success(cutbom(data));\r\n            };\r\n            reader.readAsText(files[0]);\r\n        }\r\n    }\r\n};\r\n\n/**\r\n  @function Load binary file from anywhere\r\n  @param {string} path File path\r\n  @param {boolean} asy True - async call, false - sync call\r\n  @param {function} success Success function\r\n  @param {function} error Error function\r\n  @return 1 for Async, data - for sync version\r\n\n  @todo merge functionality from loadFile and LoadBinaryFile\r\n*/\r\n\nvar loadBinaryFile = utils.loadBinaryFile = function(path, asy, success, error) {\r\n    var fs;\r\n    if(utils.isNode || utils.isMeteorServer) {\r\n\t   \t//*not-for-browser/*\r\n        if(utils.isMeteorServer) {\r\n            fs = Npm.require('fs'); // For Meteor\r\n        } else {\r\n            fs = require('fs');\r\n        }\r\n\n        if(/^[a-z]+:\\/\\//i.test(path)) {\r\n            var request = require('request');\r\n            request({url:path,encoding:null},function(err, response, data) {\r\n                if(err) {\r\n                    throw err;\r\n                }\r\n                var arr = [];\r\n                for(var i = 0; i < data.length; ++i){\r\n                    arr[i] = String.fromCharCode(data[i]);\r\n                }\r\n                success(arr.join(\"\"));\r\n            });\r\n        } else {\r\n            if(asy) {\r\n                fs.readFile(path,function(err,data){\r\n                    if(err) {\r\n                        throw err;\r\n                    }\r\n                    var arr = [];\r\n                    for(var i = 0; i < data.length; ++i){\r\n                        arr[i] = String.fromCharCode(data[i]);\r\n                    }\r\n                    success(arr.join(\"\"));\r\n                });\r\n\n            } else {\r\n                var data = fs.readFileSync(path);\r\n                var arr = [];\r\n                for(var i = 0; i < data.length; ++i){\r\n                    arr[i] = String.fromCharCode(data[i]);\r\n                }\r\n                success(arr.join(\"\"));\r\n            }\r\n        }\r\n\t} else if(utils.isReactNative) {\r\n        // If ReactNative\r\n\t\t//var RNFS = require('react-native-fs');\r\n\t\tvar RNFetchBlob = require('react-native-fetch-blob').default\r\n\t\tvar dirs = RNFetchBlob.fs.dirs\r\n\t\t//should use readStream instead if the file is large\r\n\t\tRNFetchBlob.fs.readFile(path, 'base64').then(function(data){\r\n\t\t\t//RNFetchBlob.base64.decode(data) //need more test on excel\r\n\t\t    success(data);\r\n\t\t})\r\n\t//*/\r\n    } else {\r\n        if(typeof path === \"string\") {\r\n            // For browser\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open(\"GET\", path, asy); // Async\r\n            xhr.responseType = \"arraybuffer\";\r\n            xhr.onload = function() {\r\n                var data = new Uint8Array(xhr.response);\r\n                var arr = [];\r\n                for(var i = 0; i < data.length; ++i){\r\n                    arr[i] = String.fromCharCode(data[i]);\r\n                }\r\n                success(arr.join(\"\"));\r\n            }\r\n           // xhr.responseType = \"blob\";\r\n            xhr.send();\r\n        } else if(path instanceof Event) {\r\n\n            var files = path.target.files;\r\n            var reader = new FileReader();\r\n            var name = files[0].name;\r\n            reader.onload = function(e) {\r\n                var data = e.target.result;\r\n                success(data);\r\n            };\r\n            reader.readAsArrayBuffer(files[0]);\r\n        } else if(path instanceof Blob) {\r\n        \tsuccess(path);\r\n        }\r\n    }\r\n};\r\n\nvar removeFile = utils.removeFile = function(path,cb) {\r\n    if(utils.isNode) {\r\n        //*not-for-browser/*\r\n        var fs = require('fs');\r\n        fs.remove(path,cb);\r\n    } else if(utils.isCordova) {\r\n        utils.global.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function (fileSystem) {\r\n            fileSystem.root.getFile(path, {create:false}, function (fileEntry) {\r\n                fileEntry.remove(cb);\r\n                cb && cb(); // jshint ignore:line\r\n            }, function(){\r\n                cb && cb(); // jshint ignore:line\r\n            });\r\n        });\r\n\t} else if(utils.isReactNative) {\r\n        // If ReactNative\r\n\t\tvar RNFS = require('react-native-fs');\r\n        RNFS.unlink(path).then(function(){\r\n\t\t\tcb && cb();\r\n\t\t}).catch(function(err){\r\n\t\t\tthrow err;\r\n\t\t});\r\n\t//*/\r\n    } else {\r\n        throw new Error('You can remove files only in Node.js and Apache Cordova');\r\n    }\r\n};\r\n\n// Todo: check if it makes sense to support cordova and Meteor server\r\nvar deleteFile = utils.deleteFile = function(path,cb){\r\n    //*not-for-browser/*\r\n    if(utils.isNode) {\r\n        var fs = require('fs');\r\n        fs.unlink(path, cb);\r\n\t} else if(utils.isReactNative) {\r\n        // If ReactNative\r\n\t\tvar RNFS = require('react-native-fs');\r\n        RNFS.unlink(path).then(function(){\r\n\t\t\tcb && cb();\r\n\t\t}).catch(function(err){\r\n\t\t\tthrow err;\r\n\t\t});\r\n    }\r\n    //*/\r\n\n};\r\n\nutils.autoExtFilename = function(filename,ext,config) {\r\n\tconfig = config || {};\r\n\tif(typeof filename !== 'string' || filename.match(/^[A-z]+:\\/\\/|\\n|\\..{2,4}$/) || config.autoExt === 0 || config.autoExt === false){\r\n\t\treturn filename;\r\n\t}\r\n\treturn filename+'.'+ext\r\n}\r\n\nvar fileExists = utils.fileExists = function(path,cb){\r\n    if(utils.isNode) {\r\n        //*not-for-browser/*\r\n        var fs = require('fs');\r\n        fs.exists(path,cb);\r\n    } else if(utils.isCordova) {\r\n        utils.global.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function (fileSystem) {\r\n            fileSystem.root.getFile(path, {create:false}, function (fileEntry) {\r\n                cb(true);\r\n            }, function(){\r\n                cb(false);\r\n            });\r\n        });\r\n\t} else if(utils.isReactNative) {\r\n        // If ReactNative\r\n\t\tvar RNFS = require('react-native-fs');\r\n        RNFS.exists(path).then(function(yes){\r\n\t\t\tcb && cb(yes);\r\n\t\t}).catch(function(err){\r\n\t\t\tthrow err;\r\n\t\t});\r\n\t//*/\r\n    } else {\r\n        // TODO Cordova, etc.\r\n        throw new Error('You can use exists() only in Node.js or Apach Cordova');\r\n    }\r\n};\r\n\n/**\r\n  Save text file from anywhere\r\n  @param {string} path File path\r\n  @param {array} data Data object\r\n  @param {function} cb Callback\r\n  @param {object=} opts\r\n*/\r\n\nvar saveFile = utils.saveFile = function(path, data, cb, opts) {\r\n    var res = 1;\r\n    if(path === undefined) {\r\n        //\r\n        // Return data into result variable\r\n        // like: alasql('SELECT * INTO TXT() FROM ?',[data]);\r\n        //\r\n        res = data;\r\n        if(cb){\r\n            res = cb(res);\r\n        }\r\n    } else {\r\n        if(utils.isNode) {\r\n            //*not-for-browser/*\r\n            var fs = require('fs');\r\n            data = fs.writeFileSync(path,data);\r\n            if(cb){\r\n                res = cb(res);\r\n            }\r\n        }else if(utils.isReactNative) {\r\n\t\t\tvar RNFS = require('react-native-fs');\r\n\t\t\tRNFS.writeFile(path, data).then(function(success){ //, 'utf8'\r\n\t\t\t\tif(cb) res = cb(res);\r\n\t\t\t}).catch(function(err){\r\n\t\t\t\tconsole.log(err.message);\r\n\t\t\t});\r\n        } else if(utils.isCordova) {\r\n            utils.global.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function (fileSystem) {\r\n\n                    fileSystem.root.getFile(path, {create:true}, function (fileEntry) {\r\n                        fileEntry.createWriter(function(fileWriter) {\r\n                            fileWriter.onwriteend = function(){\r\n                                if(cb){\r\n                                    res = cb(res);\r\n                                }\r\n                            }\r\n                            fileWriter.write(data);\r\n                        });\r\n                    });\r\n\n            });\r\n            //*/\r\n\n        } else {\r\n        \tif(isIE() === 9) {\r\n        \t\t// Solution was taken from\r\n        \t\t// http://megatuto.com/formation-JAVASCRIPT.php?JAVASCRIPT_Example=Javascript+Save+CSV+file+in+IE+8/IE+9+without+using+window.open()+Categorie+javascript+internet-explorer-8&category=&article=7993\r\n\n\t\t\t\t// Prepare data\r\n\t\t\t\tvar ndata = data.replace(/\\r\\n/g,'&#A;&#D;');\r\n\t\t\t\tndata = ndata.replace(/\\n/g,'&#D;');\r\n\t\t\t\tndata = ndata.replace(/\\t/g,'&#9;');\r\n\t\t\t\tvar testlink = utils.global.open(\"about:blank\", \"_blank\");\r\n\t\t\t\ttestlink.document.write(ndata); //fileData has contents for the file\r\n\t\t\t\ttestlink.document.close();\r\n\t\t\t\ttestlink.document.execCommand('SaveAs', false, path);\r\n\t\t\t\ttestlink.close();\r\n        \t} else {\r\n                var opt = {\r\n                    disableAutoBom: false\r\n                };\r\n                alasql.utils.extend(opt, opts);\r\n\t            var blob = new Blob([data], {type: \"text/plain;charset=utf-8\"});\r\n\t            saveAs(blob, path, opt.disableAutoBom);\r\n\t            if(cb){\r\n                    res = cb(res);\r\n                }\r\n        \t}\r\n        }\r\n    }\r\n\n    return res;\r\n}\r\n\n/**\r\n    @function Is this IE9\r\n    @return {boolean} True for IE9 and false for other browsers\r\n\n    For IE9 compatibility issues\r\n*/\r\nfunction isIE () {\r\n  var myNav = navigator.userAgent.toLowerCase();\r\n  return (myNav.indexOf('msie') !== -1) ? parseInt(myNav.split('msie')[1]) : false;\r\n}\r\n\n/**\r\n  @function Hash a string to signed integer\r\n  @param {string} source string\r\n  @return {integer} hash number\r\n*/\r\n\n// sdbm hash function\r\nvar hash = utils.hash = function(str){\r\n  var hash = 5381,\r\n      i    = str.length\r\n\n  while(i)\r\n    hash = (hash * 33) ^ str.charCodeAt(--i)\r\n\n  return hash;\r\n}\r\n\n/**\r\n    Union arrays\r\n    @function\r\n    @param {array} a\r\n    @param {array} b\r\n    @return {array}\r\n*/\r\nvar arrayUnion = utils.arrayUnion = function (a,b) {\r\n    var r = b.slice(0);\r\n    a.forEach(function(i){\r\n                            if (r.indexOf(i) < 0){\r\n                                r.push(i);\r\n                            }\r\n                        });\r\n    return r;\r\n}\r\n\n/**\r\n Array Difference\r\n */\r\nvar arrayDiff = utils.arrayDiff  = function (a,b) {\r\n    return a.filter(function(i) {return b.indexOf(i) < 0;});\r\n};\r\n\n/**\r\n  Arrays deep intersect (with records)\r\n */\r\nvar arrayIntersect = utils.arrayIntersect  = function(a,b) {\r\n    var r = [];\r\n    a.forEach(function(ai) {\r\n        var found = false;\r\n\n        b.forEach(function(bi){\r\n            found = found || (ai===bi);\r\n        });\r\n\n        if(found) {\r\n            r.push(ai);\r\n        }\r\n    });\r\n    return r;\r\n};\r\n\n/**\r\n  Arrays deep union (with records)\r\n */\r\nvar arrayUnionDeep = utils.arrayUnionDeep = function (a,b) {\r\n    var r = b.slice(0);\r\n    a.forEach(function(ai) {\r\n        var found = false;\r\n\n        r.forEach(function(ri){\r\n\n            found = found || deepEqual(ai, ri);\r\n        });\r\n\n        if(!found) {\r\n            r.push(ai);\r\n        }\r\n    });\r\n    return r;\r\n};\r\n\n/**\r\n  Arrays deep union (with records)\r\n */\r\nvar arrayExceptDeep = utils.arrayExceptDeep = function (a,b) {\r\n    var r = [];\r\n    a.forEach(function(ai) {\r\n        var found = false;\r\n\n        b.forEach(function(bi){\r\n\n            found = found || deepEqual(ai, bi);\r\n        });\r\n\n        if(!found) {\r\n            r.push(ai);\r\n        }\r\n    });\r\n    return r;\r\n};\r\n\n/**\r\n  Arrays deep intersect (with records)\r\n */\r\nvar arrayIntersectDeep = utils.arrayIntersectDeep  = function(a,b) {\r\n    var r = [];\r\n    a.forEach(function(ai) {\r\n        var found = false;\r\n\n        b.forEach(function(bi){\r\n\n            found = found || deepEqual(ai, bi, true);\r\n        });\r\n\n        if(found) {\r\n            r.push(ai);\r\n        }\r\n    });\r\n    return r;\r\n};\r\n\n/**\r\n  Deep clone obects\r\n */\r\nvar cloneDeep = utils.cloneDeep = function cloneDeep(obj) {\r\n    if(null === obj || typeof(obj) !== 'object'){\r\n        return obj;\r\n    }\r\n\n    if(obj instanceof Date) {\r\n\treturn new Date(obj);\r\n    }\r\n\n    var temp = obj.constructor(); // changed\r\n\n    for(var key in obj) {\r\n        if(obj.hasOwnProperty(key)) {\r\n            temp[key] = cloneDeep(obj[key]);\r\n        }\r\n    }\r\n    return temp;\r\n};\r\n\n/**\r\n  Check equality of objects\r\n*/\r\n\n/**\r\n  Compare two object in deep\r\n */\r\nvar deepEqual = utils.deepEqual = function(x, y) {\r\n\n\tif(x===y){\r\n\t\treturn true;\r\n\t}\r\n\n    if (typeof x === \"object\" && null !== x && (typeof y === \"object\" && null !== y)) {\r\n        if (Object.keys(x).length !== Object.keys(y).length) {\r\n            return false;\r\n        }\r\n        for (var prop in x) {\r\n\t\t\tif (!deepEqual(x[prop], y[prop])) {\r\n\t\t\t\treturn false;\r\n            }\r\n        }\r\n        return true;\r\n    }  \r\n\n    return false;\r\n\n};\r\n/**\r\n    Array with distinct records\r\n    @param {array} data\r\n    @return {array}\r\n*/\r\nvar distinctArray = utils.distinctArray = function(data) {\r\n    var uniq = {};\r\n    // TODO: Speedup, because Object.keys is slow\r\n    for(var i=0,ilen=data.length;i<ilen;i++) {\r\n        var uix;\r\n        if(typeof data[i] === 'object') {\r\n            uix = Object.keys(data[i]).sort().map(function(k){return k+'`'+data[i][k];}).join('`');\r\n        } else {\r\n            uix = data[i];\r\n        }\r\n        uniq[uix] = data[i];\r\n    }\r\n    var res = [];\r\n    for(var key in uniq){\r\n        res.push(uniq[key]);\r\n    }\r\n    return res;\r\n};\r\n\n/**\r\n    Extend object a with properties of b\r\n    @function\r\n    @param {object} a\r\n    @param {object} b\r\n    @return {object}\r\n*/\r\nvar extend = utils.extend = function extend (a,b){\r\n    a = a || {};\r\n    for(var key in b) {\r\n        if(b.hasOwnProperty(key)) {\r\n            a[key] = b[key];\r\n        }\r\n    }\r\n    return a;\r\n};\r\n\n/**\r\n   Flat array by first row\r\n */\r\nvar flatArray = utils.flatArray = function(a) {\r\n\n    if(!a || 0 === a.length){\r\n        return [];\r\n    }\r\n\n    // For recordsets\r\n    if(typeof a === 'object' && a instanceof alasql.Recordset) {\r\n        return a.data.map(function(ai){return ai[a.columns[0].columnid];});\r\n    }\r\n    // Else for other arrays\r\n    var key = Object.keys(a[0])[0];\r\n    if(key === undefined){\r\n        return [];\r\n    }\r\n    return a.map(function(ai) {return ai[key];});\r\n};\r\n\n/**\r\n  Convert array of objects to array of arrays\r\n */\r\nvar arrayOfArrays = utils.arrayOfArrays = function (a) {\r\n    return a.map(function(aa){\r\n        var ar = [];\r\n        for(var key in aa){\r\n            ar.push(aa[key]);\r\n        }\r\n        return ar;\r\n    });\r\n};\r\n\nif (!Array.isArray) {\r\n  Array.isArray = function(arg) {\r\n    return Object.prototype.toString.call(arg) === '[object Array]';\r\n  };\r\n}\r\n\n/**\r\n    Excel:convert number to Excel column, like 1 => 'A'\r\n    @param {integer} i Column number, starting with 0\r\n    @return {string} Column name, starting with 'A'\r\n*/\r\n\nvar xlsnc = utils.xlsnc = function(i) {\r\n    var addr = String.fromCharCode(65+i%26);\r\n    if(i>=26) {\r\n        i=((i/26)|0)-1;\r\n        addr = String.fromCharCode(65+i%26)+addr;\r\n        if(i>26) {\r\n            i=((i/26)|0)-1;\r\n            addr = String.fromCharCode(65+i%26)+addr;\r\n        }\r\n    }\r\n    return addr;\r\n};\r\n\n/**\r\n    Excel:conver Excel column name to number\r\n    @param {string} s Column number, like 'A' or 'BE'\r\n    @return {string} Column name, starting with 0\r\n*/\r\nvar xlscn = utils.xlscn = function(s) {\r\n    var n = s.charCodeAt(0)-65;\r\n    if(s.length>1) {\r\n        n = (n+1)*26+s.charCodeAt(1)-65;\r\n\n        if(s.length>2) {\r\n            n = (n+1)*26+s.charCodeAt(2)-65;\r\n        }\r\n    }\r\n    return n;\r\n};\r\n\nvar domEmptyChildren = utils.domEmptyChildren = function (container){\r\n  var len = container.childNodes.length;\r\n  while (len--) {\r\n    container.removeChild(container.lastChild);\r\n  }\r\n};\r\n\n/**\r\n    SQL LIKE emulation\r\n    @parameter {string} pattern Search pattern\r\n    @parameter {string} value Searched value\r\n    @parameter {string} escape Escape character (optional)\r\n    @return {boolean} If value LIKE pattern ESCAPE escape\r\n*/\r\n\nvar like = utils.like = function (pattern,value,escape) {\r\n    // Verify escape character\r\n    if(!escape) escape = '';\r\n\n    var i=0;\r\n    var s = '^';\r\n\n    while(i<pattern.length) {\r\n      var c = pattern[i], c1 = '';\r\n      if(i<pattern.length-1) c1 = pattern[i+1];\r\n\n      if(c === escape) {\r\n        s += '\\\\'+c1;\r\n        i++;\r\n      } else if(c==='[' && c1 === '^') {\r\n        s += '[^';\r\n        i++;\r\n      } else if(c==='[' || c===']' ) {\r\n        s += c;\r\n      } else if(c==='%') {\r\n        s += '.*';\r\n      } else if(c === '_') {\r\n        s += '.';\r\n      } else if('/.*+?|(){}'.indexOf(c)>-1) {\r\n        s += '\\\\'+c;\r\n      } else {\r\n        s += c;\r\n      }\r\n      i++;\r\n    }\r\n\n    s += '$';\r\n\n    return (''+(value||'')).toUpperCase().search(RegExp(s.toUpperCase()))>-1;\r\n   };\r\n\nutils.glob = function (value,pattern) {\r\n\n    var i=0;\r\n    var s = '^';\r\n\n    while(i<pattern.length) {\r\n      var c = pattern[i], c1 = '';\r\n      if(i<pattern.length-1) c1 = pattern[i+1];\r\n\n      if(c==='[' && c1 === '^') {\r\n        s += '[^';\r\n        i++;\r\n      } else if(c==='[' || c===']' ) {\r\n        s += c;\r\n      } else if(c==='*') {\r\n        s += '.*';\r\n      } else if(c === '?') {\r\n        s += '.';\r\n      } else if('/.*+?|(){}'.indexOf(c)>-1) {\r\n        s += '\\\\'+c;\r\n      } else {\r\n        s += c;\r\n      }\r\n      i++;\r\n    }\r\n\n    s += '$';\r\n    return (''+(value||'')).toUpperCase().search(RegExp(s.toUpperCase()))>-1;\r\n   };\r\n\n/**\r\n\tGet path of alasql.js\r\n\t@todo Rewrite and simplify the code. Review, is this function is required separately\r\n*/\r\nutils.findAlaSQLPath = function() {\r\n\t/** type {string} Path to alasql library and plugins */\r\n\n\tif (utils.isWebWorker) {\r\n\t\treturn '';\r\n\t\t/** @todo Check how to get path in worker */\r\n\n\t} else if(utils.isMeteorClient) {\r\n\t\treturn '/packages/dist/';\r\n\n\t} else if(utils.isMeteorServer) {\r\n\t\treturn 'assets/packages/dist/';\r\n\n\t} else if(utils.isNode) {\r\n\t\treturn __dirname;\r\n\n\t} else if(utils.isBrowser) {\r\n\t\tvar sc = document.getElementsByTagName('script');\r\n\n\t\tfor(var i=0;i<sc.length;i++) {\r\n\t\t\tif (sc[i].src.substr(-16).toLowerCase() === 'alasql-worker.js') {\r\n\t\t\t\treturn sc[i].src.substr(0,sc[i].src.length-16);\r\n\n\t\t\t} else if (sc[i].src.substr(-20).toLowerCase() === 'alasql-worker.min.js') {\r\n\t\t\t\treturn sc[i].src.substr(0,sc[i].src.length-20);\r\n\n\t\t\t} else if (sc[i].src.substr(-9).toLowerCase() === 'alasql.js') {\r\n\t\t\t\treturn sc[i].src.substr(0,sc[i].src.length-9);\r\n\n\t\t\t} else if (sc[i].src.substr(-13).toLowerCase() === 'alasql.min.js') {\r\n\t\t\t\treturn sc[i].src.substr(0,sc[i].src.length-13);\r\n\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn '';\r\n}\r\n\nvar getXLSX = function(){\r\n\tvar XLSX = null;\r\n\t/* If require() shuold be supported else take from global scope */\r\n\tif(utils.isNode || utils.isBrowserify  || utils.isMeteorServer) {\r\n\t\t//*not-for-browser/*\r\n\t\tXLSX = require('xlsx') || null;\r\n\t\t//*/\r\n\t} else {\r\n\t\tXLSX = utils.global.XLSX || null;\r\n\t}\r\n\n\tif(null === XLSX){\r\n        throw new Error('Please include the xlsx.js library');\r\n\t}\r\n\n\treturn XLSX;\r\n}\r\n\nvar getXLS = function(){\r\n\treturn getXLSX();\r\n}\r\n\n// set AlaSQl path\r\nalasql.path = alasql.utils.findAlaSQLPath();\r\n\n/**\n \tStrip all comments.\n \t@function\n \t@param {string} str\n \t@return {string}\n \tBased om the https://github.com/lehni/uncomment.js/blob/master/uncomment.js\n \tI just replaced JavaScript's '//' to SQL's '--' and remove other stuff\n\n \t@todo Fixed [aaa/*bbb] for column names\n \t@todo Bug if -- comments in the last line\n\t@todo Check if it possible to model it with Jison parser\n\t@todo Remove unused code\n */\n\nalasql.utils.uncomment = function uncomment(str) {\n\t// Add some padding so we can always look ahead and behind by two chars\n\tstr = ('__' + str + '__').split('');\n\tvar quote = false,\n\t\tquoteSign,\n\t\t// regularExpression = false,\n\t\t// characterClass = false,\n\t\tblockComment = false,\n\t\tlineComment = false;\n\t\t// preserveComment = false;\n\n\tfor (var i = 0, l = str.length; i < l; i++) {\n\n\t\t// When checking for quote escaping, we also need to check that the\n\t\t// escape sign itself is not escaped, as otherwise '\\\\' would cause\n\t\t// the wrong impression of an unclosed string:\n\t\tvar unescaped = str[i - 1] !== '\\\\' || str[i - 2] === '\\\\';\n\n\t\tif (quote) {\n\t\t\tif (str[i] === quoteSign && unescaped){\n\t\t\t\tquote = false;\n\t\t\t}\n\n\t\t} else if (blockComment) {\n\t\t\t// Is the block comment closing?\n\t\t\tif (str[i] === '*' && str[i + 1] === '/') {\n\t\t\t\t// if (!preserveComment)\n\t\t\t\t\tstr[i] = str[i + 1] = '';\n\t\t\t\tblockComment /* = preserveComment*/ = false;\n\t\t\t\t// Increase by 1 to skip closing '/', as it would be mistaken\n\t\t\t\t// for a regexp otherwise\n\t\t\t\ti++;\n\t\t\t} else { //if (!preserveComment) {\n\t\t\t\tstr[i] = '';\n\t\t\t}\n\t\t} else if (lineComment) {\n\t\t\t// One-line comments end with the line-break\n\t\t\tif (str[i + 1] === '\\n' || str[i + 1] === '\\r'){\n\t\t\t\tlineComment = false;\n\t\t\t}\n\t\t\tstr[i] = '';\n\t\t} else {\n\t\t\tif (str[i] === '\"' || str[i] === \"'\") {\n\t\t\t\tquote = true;\n\t\t\t\tquoteSign = str[i];\n\t\t\t} else if (str[i] === '[' && str[i-1] !== \"@\") {\n\t\t\t\tquote = true;\n\t\t\t\tquoteSign = ']';\n\t\t\t// } else if (str[i] === '-' &&  str[i + 1] === '-') {\n\t\t\t// \tstr[i] = '';\n\t\t\t// \tlineComment = true;\n\t\t\t} else if (str[i] === '/' && str[i + 1] === '*') {\n\t\t\t\t\t// Do not filter out conditional comments /*@ ... */\n\t\t\t\t\t// and comments marked as protected /*! ... */\n\n\t\t\t\t\tstr[i] = '';\n\t\t\t\t\tblockComment = true;\n\n\t\t\t}\n\t\t}\n\t}\n\t// Remove padding again.\n\tstr = str.join('').slice(2, -2);\n\n\treturn str;\n};\n\n/**\r\n\tDatabase class for Alasql.js\r\n*/\r\n\n// Initial parameters\r\n\n/**\r\n\tJison parser\r\n*/\r\nalasql.parser = alasqlparser;\r\n\nalasql.parser.parseError = function(str, hash){\r\n\tthrow new Error(\"Have you used a reserved keyword without `escaping` it?\\n\"+str);\r\n}\r\n\n/**\r\n \tJison parser\r\n \t@param {string} sql SQL statement\r\n \t@return {object} AST (Abstract Syntax Tree)\r\n\n \t@todo Create class AST\r\n \t@todo Add other parsers\r\n\n \t@example\r\n \talasql.parse = function(sql) {\r\n\t\t// My own parser here\r\n \t}\r\n */\r\nalasql.parse = function(sql) {\r\n\treturn alasqlparser.parse(alasql.utils.uncomment(sql));\r\n};\r\n\n/**\r\n \tList of engines of external databases\r\n \t@type {object}\r\n \t@todo Create collection type\r\n */\r\nalasql.engines = {};\r\n\n/**\r\n \tList of databases\r\n \t@type {object}\r\n */\r\nalasql.databases = {};\r\n\n/**\r\n\tNumber of databases\r\n\t@type {number}\r\n*/\r\nalasql.databasenum = 0;\r\n\n/**\r\n \tAlasql options object\r\n */\r\nalasql.options = {};\r\nalasql.options.errorlog = false; // Log or throw error\r\nalasql.options.valueof = false; // Use valueof in orderfn\r\nalasql.options.dropifnotexists = false; // DROP database in any case\r\nalasql.options.datetimeformat = 'sql'; // How to handle DATE and DATETIME types\r\n\t\t\t\t\t\t\t\t// Another value is 'javascript'\r\nalasql.options.casesensitive = true; // Table and column names are case sensitive and converted to lower-case\r\nalasql.options.logtarget = 'output'; // target for log. Values: 'console', 'output', 'id' of html tag\r\nalasql.options.logprompt = true; // Print SQL at log\r\n\nalasql.options.progress = false; // Callback for async queries progress\r\n\n// Default modifier\r\n// values: RECORDSET, VALUE, ROW, COLUMN, MATRIX, TEXTSTRING, INDEX\r\nalasql.options.modifier = undefined;\r\n// How many rows to lookup to define columns\r\nalasql.options.columnlookup = 10;\r\n// Create vertex if not found\r\nalasql.options.autovertex = true;\r\n\n// Use dbo as current database (for partial T-SQL comaptibility)\r\nalasql.options.usedbo = true;\r\n\n// AUTOCOMMIT ON | OFF\r\nalasql.options.autocommit = true;\r\n\n// Use cache\r\nalasql.options.cache = true;\r\n\n// Compatibility flags\r\nalasql.options.tsql = true;\r\nalasql.options.mysql = true;\r\nalasql.options.postgres = true;\r\nalasql.options.oracle = true;\r\nalasql.options.sqlite = true;\r\nalasql.options.orientdb = true;\r\n\n// for SET NOCOUNT OFF\r\nalasql.options.nocount = false;\r\n\n// Check for NaN and convert it to undefined\r\nalasql.options.nan = false;\r\n\nalasql.options.joinstar = 'overwrite'; // Option for SELECT * FROM a,b\r\n\n//alasql.options.worker = false;\r\n// Variables\r\nalasql.vars = {};\r\nalasql.declares = {};\r\n\nalasql.prompthistory = [];\r\n\nalasql.plugins = {}; // If plugin already loaded\r\n\nalasql.from = {}; // FROM functions\r\nalasql.into = {}; // INTO functions\r\n\nalasql.fn = {};\r\nalasql.aggr = {};\r\n\nalasql.busy = 0;\r\n\n// Cache\r\nalasql.MAXSQLCACHESIZE = 10000;\r\nalasql.DEFAULTDATABASEID = 'alasql';\r\n\n/* WebWorker */\r\nalasql.lastid = 0;\r\nalasql.buffer = {};\r\n\n/**\r\n  Select current database\r\n  @param {string} databaseid Selected database identificator\r\n */\r\nalasql.use = function (databaseid) {\r\n\tif(!databaseid){\r\n\t\tdatabaseid = alasql.DEFAULTDATABASEID;\r\n\t}\r\n\tif(alasql.useid === databaseid){\r\n\t\treturn;\r\n\t}\r\n\talasql.useid = databaseid;\r\n\tvar db = alasql.databases[alasql.useid];\r\n\talasql.tables = db.tables;\r\n//\talasql.fn = db.fn;\r\n\tdb.resetSqlCache();\r\n\tif(alasql.options.usedbo) {\r\n\t    alasql.databases.dbo = db; // Operator???\r\n\t}\r\n\n};\r\n\nalasql.autoval = function(tablename, colname, getNext, databaseid){\r\n\n\t\tvar db = databaseid?alasql.databases[databaseid]:alasql.databases[alasql.useid];\r\n\n\t\tif(!db.tables[tablename]){\r\n\t\t\tthrow new Error('Tablename not found: '+tablename);\r\n\t\t}\r\n\n\t\tif(!db.tables[tablename].identities[colname]){\r\n\t\t\tthrow new Error('Colname not found: '+colname);\r\n\t\t}\r\n\n\t\tif(getNext){\r\n\t\t\treturn db.tables[tablename].identities[colname].value || null;\r\n\t\t}\r\n\n\t\treturn (db.tables[tablename].identities[colname].value - db.tables[tablename].identities[colname].step) || null\r\n\n}\r\n\n/**\r\n Run single SQL statement on current database\r\n */\r\nalasql.exec = function (sql, params, cb, scope) {\r\n\n\t// Avoid setting params if not needed even with callback\r\n\tif(typeof params === 'function'){\r\n\t\tscope = cb;\r\n\t\tcb = params;\r\n\t\tparams = {};\r\n\t}\r\n\n\tdelete alasql.error;\r\n\tparams = params || {};\r\n\tif(alasql.options.errorlog){\r\n\t\ttry {\r\n\t\t\treturn alasql.dexec(alasql.useid, sql, params, cb, scope);\r\n\t\t} catch(err){\r\n\t\t\talasql.error = err;\r\n\t\t\tif(cb){\r\n\t\t\t\tcb(null,alasql.error);\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\treturn alasql.dexec(alasql.useid, sql, params, cb, scope);\r\n\t}\r\n};\r\n\n/**\r\n Run SQL statement on specific database\r\n */\r\nalasql.dexec = function (databaseid, sql, params, cb, scope) {\r\n\tvar db = alasql.databases[databaseid];\r\n//\tif(db.databaseid != databaseid) console.trace('got!');\r\n\n\tvar hh;\r\n\t// Create hash\r\n\tif(alasql.options.cache) {\r\n\t\thh = hash(sql);\r\n\t\tvar statement = db.sqlCache[hh];\r\n\t\t// If database structure was not changed sinse lat time return cache\r\n\t\tif(statement && db.dbversion === statement.dbversion) {\r\n\t\t\treturn statement(params, cb);\r\n\t\t}\r\n\t}\r\n\n\t// Create AST\r\n\tvar ast = alasql.parse(sql);\r\n\tif(!ast.statements){\r\n\t\treturn;\r\n\t}\r\n\tif(0 === ast.statements.length){\r\n\t\treturn 0;\r\n\t}\r\n\telse if(1 === ast.statements.length) {\r\n\t\tif(ast.statements[0].compile) {\r\n\n\t\t\t// Compile and Execute\r\n\t\t\tvar statement = ast.statements[0].compile(databaseid, params);\r\n\t\t\tif(!statement){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tstatement.sql = sql;\r\n\t\t\tstatement.dbversion = db.dbversion;\r\n\n\t\t\tif(alasql.options.cache) {\r\n\t\t\t\t// Secure sqlCache size\r\n\t\t\t\tif (db.sqlCacheSize > alasql.MAXSQLCACHESIZE) {\r\n\t\t\t\t\tdb.resetSqlCache();\r\n\t\t\t\t}\r\n\t\t\t\tdb.sqlCacheSize++;\r\n\t\t\t\tdb.sqlCache[hh] = statement;\r\n\t\t\t}\r\n\t\t\tvar res = alasql.res = statement(params, cb, scope);\r\n\t\t\treturn res;\r\n\n\t\t} else {\r\n\n\t\t\talasql.precompile(ast.statements[0],alasql.useid,params);\r\n\t\t\tvar res = alasql.res = ast.statements[0].execute(databaseid, params, cb, scope);\r\n\t\t\treturn res;\r\n\t\t}\r\n\t} else {\r\n\t\t// Multiple statements\r\n\t\tif(cb) {\r\n\t\t\talasql.adrun(databaseid, ast, params, cb, scope);\r\n\t\t} else {\r\n\t\t\treturn alasql.drun(databaseid, ast, params, cb, scope);\r\n\t\t}\r\n\t}\r\n};\r\n\n/**\r\n  Run multiple statements and return array of results sync\r\n */\r\nalasql.drun = function (databaseid, ast, params, cb, scope) {\r\n\tvar useid = alasql.useid;\r\n\n\tif(useid !== databaseid){\r\n\t\talasql.use(databaseid);\r\n\t}\r\n\n\tvar res = [];\r\n\tfor (var i=0, ilen=ast.statements.length; i<ilen; i++) {\r\n\t\tif(ast.statements[i]) {\r\n\t\t\tif(ast.statements[i].compile) {\r\n\t\t\t\tvar statement = ast.statements[i].compile(alasql.useid);\r\n\t\t\t\tres.push(alasql.res = statement(params,null,scope));\r\n\t\t\t} else {\r\n\t\t\t\talasql.precompile(ast.statements[i],alasql.useid,params);\r\n\t\t\t\tres.push(alasql.res = ast.statements[i].execute(alasql.useid, params));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif(useid !== databaseid){\r\n\t\talasql.use(useid);\r\n\t}\r\n\n\tif(cb){\r\n\t\tcb(res);\r\n\t}\r\n\n\talasql.res = res;\r\n\n\treturn res;\r\n};\r\n\n/**\r\n  Run multiple statements and return array of results async\r\n */\r\nalasql.adrun = function (databaseid, ast, params, cb, scope) {\r\n\n\tvar idx = 0;\r\n\tvar noqueries = ast.statements.length;\r\n\tif (alasql.options.progress !== false) {\r\n\t  alasql.options.progress(noqueries, idx++);\r\n\t}\r\n\n//\talasql.busy++;\r\n\tvar useid = alasql.useid;\r\n\tif(useid !== databaseid) {\r\n\t\talasql.use(databaseid);\r\n\t}\r\n\tvar res = [];\r\n\n\tfunction adrunone(data) {\r\n\t\tif(data !== undefined){\r\n\t\t\tres.push(data);\r\n\t\t}\r\n\t\tvar astatement = ast.statements.shift();\r\n\t\tif(!astatement) {\r\n\t\t\tif(useid !== databaseid){\r\n\t\t\t\talasql.use(useid);\r\n\t\t\t}\r\n\t\t\tcb(res);\r\n\n\t\t} else {\r\n\t\t\tif(astatement.compile) {\r\n\t\t\t\tvar statement = astatement.compile(alasql.useid);\r\n\t\t\t\tstatement(params, adrunone, scope);\r\n\t\t\t\tif (alasql.options.progress !== false) {\r\n\t\t\t\t  alasql.options.progress(noqueries, idx++);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\talasql.precompile(ast.statements[0],alasql.useid,params);\r\n\t\t\t\tastatement.execute(alasql.useid, params, adrunone);\r\n\t\t\t\tif (alasql.options.progress !== false) {\r\n\t\t\t\t  alasql.options.progress(noqueries, idx++);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\n\tadrunone(); /** @todo Check, why data is empty here */\r\n};\r\n\n/**\r\n Compile statement to JavaScript function\r\n @param {string} sql SQL statement\r\n @param {string} databaseid Database identificator\r\n @return {functions} Compiled statement functions\r\n*/\r\nalasql.compile = function(sql, databaseid) {\r\n\n\tdatabaseid = databaseid || alasql.useid;\r\n\n\tvar ast = alasql.parse(sql); // Create AST\r\n\n\tif(1 === ast.statements.length) {\r\n\t\tvar statement = ast.statements[0].compile(databaseid)\r\n\t\tstatement.promise = function(params){\r\n\t\t    return new Promise(function(resolve, reject){\r\n\t\t        statement(params, function(data,err) {\r\n\t\t             if(err) {\r\n\t\t                 reject(err);\r\n\t\t             } else {\r\n\t\t                 resolve(data);\r\n\t\t             }\r\n\t\t        });\r\n\t\t    });\r\n\t\t};\r\n\n\t\treturn statement;\r\n\n\t} else {\r\n\t\tthrow new Error('Cannot compile, because number of statements in SQL is not equal to 1');\r\n\t}\r\n};\r\n\n//\n// Promises for AlaSQL\n//\n\nif(!utils.global.Promise){\n\n\tif(utils.isNode){\n\t\t//*not-for-browser/*\n\t\tutils.global.Promise = require('es6-promise').Promise;\n\t\t//*/\n\t} else {\n\t\t/*!\n\t\t * @overview es6-promise - a tiny implementation of Promises/A+.\n\t\t * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n\t\t * @license   Licensed under MIT license\n\t\t *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE\n\t\t * @version   3.2.1\n\t\t */\n\t\t(function(){\"use strict\";function t(t){return\"function\"==typeof t||\"object\"==typeof t&&null!==t}function e(t){return\"function\"==typeof t}function n(t){G=t}function r(t){Q=t}function o(){return function(){process.nextTick(a)}}function i(){return function(){B(a)}}function s(){var t=0,e=new X(a),n=document.createTextNode(\"\");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}function u(){var t=new MessageChannel;return t.port1.onmessage=a,function(){t.port2.postMessage(0)}}function c(){return function(){setTimeout(a,1)}}function a(){for(var t=0;J>t;t+=2){var e=tt[t],n=tt[t+1];e(n),tt[t]=void 0,tt[t+1]=void 0}J=0}function f(){try{var t=require,e=t(\"vertx\");return B=e.runOnLoop||e.runOnContext,i()}catch(n){return c()}}function l(t,e){var n=this,r=new this.constructor(p);void 0===r[rt]&&k(r);var o=n._state;if(o){var i=arguments[o-1];Q(function(){x(o,r,i,n._result)})}else E(n,r,t,e);return r}function h(t){var e=this;if(t&&\"object\"==typeof t&&t.constructor===e)return t;var n=new e(p);return g(n,t),n}function p(){}function _(){return new TypeError(\"You cannot resolve a promise with itself\")}function d(){return new TypeError(\"A promises callback cannot return that same promise.\")}function v(t){try{return t.then}catch(e){return ut.error=e,ut}}function y(t,e,n,r){try{t.call(e,n,r)}catch(o){return o}}function m(t,e,n){Q(function(t){var r=!1,o=y(n,e,function(n){r||(r=!0,e!==n?g(t,n):S(t,n))},function(e){r||(r=!0,j(t,e))},\"Settle: \"+(t._label||\" unknown promise\"));!r&&o&&(r=!0,j(t,o))},t)}function b(t,e){e._state===it?S(t,e._result):e._state===st?j(t,e._result):E(e,void 0,function(e){g(t,e)},function(e){j(t,e)})}function w(t,n,r){n.constructor===t.constructor&&r===et&&constructor.resolve===nt?b(t,n):r===ut?j(t,ut.error):void 0===r?S(t,n):e(r)?m(t,n,r):S(t,n)}function g(e,n){e===n?j(e,_()):t(n)?w(e,n,v(n)):S(e,n)}function A(t){t._onerror&&t._onerror(t._result),T(t)}function S(t,e){t._state===ot&&(t._result=e,t._state=it,0!==t._subscribers.length&&Q(T,t))}function j(t,e){t._state===ot&&(t._state=st,t._result=e,Q(A,t))}function E(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+it]=n,o[i+st]=r,0===i&&t._state&&Q(T,t)}function T(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r,o,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?x(n,r,o,i):o(i);t._subscribers.length=0}}function M(){this.error=null}function P(t,e){try{return t(e)}catch(n){return ct.error=n,ct}}function x(t,n,r,o){var i,s,u,c,a=e(r);if(a){if(i=P(r,o),i===ct?(c=!0,s=i.error,i=null):u=!0,n===i)return void j(n,d())}else i=o,u=!0;n._state!==ot||(a&&u?g(n,i):c?j(n,s):t===it?S(n,i):t===st&&j(n,i))}function C(t,e){try{e(function(e){g(t,e)},function(e){j(t,e)})}catch(n){j(t,n)}}function O(){return at++}function k(t){t[rt]=at++,t._state=void 0,t._result=void 0,t._subscribers=[]}function Y(t){return new _t(this,t).promise}function q(t){var e=this;return new e(I(t)?function(n,r){for(var o=t.length,i=0;o>i;i++)e.resolve(t[i]).then(n,r)}:function(t,e){e(new TypeError(\"You must pass an array to race.\"))})}function F(t){var e=this,n=new e(p);return j(n,t),n}function D(){throw new TypeError(\"You must pass a resolver function as the first argument to the promise constructor\")}function K(){throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\")}function L(t){this[rt]=O(),this._result=this._state=void 0,this._subscribers=[],p!==t&&(\"function\"!=typeof t&&D(),this instanceof L?C(this,t):K())}function N(t,e){this._instanceConstructor=t,this.promise=new t(p),this.promise[rt]||k(this.promise),Array.isArray(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?S(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&S(this.promise,this._result))):j(this.promise,U())}function U(){return new Error(\"Array Methods must be provided an Array\")}function W(){var t;if(\"undefined\"!=typeof global)t=global;else if(\"undefined\"!=typeof self)t=self;else try{t=Function(\"return this\")()}catch(e){throw new Error(\"polyfill failed because global object is unavailable in this environment\")}var n=t.Promise;(!n||\"[object Promise]\"!==Object.prototype.toString.call(n.resolve())||n.cast)&&(t.Promise=pt)}var z;z=Array.isArray?Array.isArray:function(t){return\"[object Array]\"===Object.prototype.toString.call(t)};var B,G,H,I=z,J=0,Q=function(t,e){tt[J]=t,tt[J+1]=e,J+=2,2===J&&(G?G(a):H())},R=\"undefined\"!=typeof window?window:void 0,V=R||{},X=V.MutationObserver||V.WebKitMutationObserver,Z=\"undefined\"==typeof self&&\"undefined\"!=typeof process&&\"[object process]\"==={}.toString.call(process),$=\"undefined\"!=typeof Uint8ClampedArray&&\"undefined\"!=typeof importScripts&&\"undefined\"!=typeof MessageChannel,tt=new Array(1e3);H=Z?o():X?s():$?u():void 0===R&&\"function\"==typeof require?f():c();var et=l,nt=h,rt=Math.random().toString(36).substring(16),ot=void 0,it=1,st=2,ut=new M,ct=new M,at=0,ft=Y,lt=q,ht=F,pt=L;L.all=ft,L.race=lt,L.resolve=nt,L.reject=ht,L._setScheduler=n,L._setAsap=r,L._asap=Q,L.prototype={constructor:L,then:et,\"catch\":function(t){return this.then(null,t)}};var _t=N;N.prototype._enumerate=function(){for(var t=this.length,e=this._input,n=0;this._state===ot&&t>n;n++)this._eachEntry(e[n],n)},N.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,r=n.resolve;if(r===nt){var o=v(t);if(o===et&&t._state!==ot)this._settledAt(t._state,e,t._result);else if(\"function\"!=typeof o)this._remaining--,this._result[e]=t;else if(n===pt){var i=new n(p);w(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new n(function(e){e(t)}),e)}else this._willSettleAt(r(t),e)},N.prototype._settledAt=function(t,e,n){var r=this.promise;r._state===ot&&(this._remaining--,t===st?j(r,n):this._result[e]=n),0===this._remaining&&S(r,this._result)},N.prototype._willSettleAt=function(t,e){var n=this;E(t,void 0,function(t){n._settledAt(it,e,t)},function(t){n._settledAt(st,e,t)})};var dt=W,vt={Promise:pt,polyfill:dt};\"function\"==typeof define&&define.amd?define(function(){return vt}):\"undefined\"!=typeof module&&module.exports?module.exports=vt:\"undefined\"!=typeof this&&(this.ES6Promise=vt),dt()}).call(this);\n\n\t}\n}\n\nvar promiseExec = function(sql, params, counterStep, counterTotal){\n\t return new utils.global.Promise(function(resolve, reject){\n        alasql(sql, params, function(data,err) {\n             if(err) {\n                 reject(err);\n             } else {\n\t\t\t\tif (counterStep && counterTotal && alasql.options.progress !== false) {\n\t\t\t\t\talasql.options.progress(counterStep, counterTotal);\n\t\t\t\t}\n                resolve(data);\n             }\n        });\n    });\n}\n\nvar promiseAll = function(sqlParamsArray){\n\tif(sqlParamsArray.length<1){\n\t\treturn ;\n\t}\n\n\tvar active, sql, params;\n\n\tvar execArray = []; \n\n\tfor (var i = 0; i < sqlParamsArray.length; i++) {\n\t\tactive = sqlParamsArray[i];\n\n\t\tif(typeof active === 'string'){\n\t\t\tactive = [active];\n\t\t}\n\n\t\tif(!utils.isArray(active) || active.length<1 || 2<active.length){\n\t\t\tthrow new Error('Error in .promise parameter');\n\t\t}\n\n\t\tsql = active[0];\n\t\tparams = active[1]||undefined;\n\n\t\texecArray.push(promiseExec(sql, params, i, sqlParamsArray.length));\n\t}\n\n\treturn utils.global.Promise.all(execArray); \n}\n\nalasql.promise = function(sql, params) {\n\tif(typeof Promise === \"undefined\"){\n\t\tthrow new Error('Please include a Promise/A+ library');\n\t}\n\n\tif(typeof sql === 'string'){\n\t\treturn promiseExec(sql, params);\n\t}\n\n\tif(!utils.isArray(sql) || sql.length<1 || typeof params !== \"undefined\"){\n\t\tthrow new Error('Error in .promise parameters');\n\t}\n\treturn promiseAll(sql);\n};\n\n/*\n//\n// Database class for Alasql.js\n// Date: 03.11.2014\n// (c) 2014, Andrey Gershun\n//\n*/\n\n// Main Database class\n\n/**\n    @class Database \n */\n\nvar Database = alasql.Database = function (databaseid) {\n\tvar self = this;\n\n\tif(self === alasql) {\n\t\tif(databaseid) {\n\n\t\t\t\tself = alasql.databases[databaseid];\n\n\t\t\t\talasql.databases[databaseid] = self;\n\n\t\t\tif(!self) {\n\t\t\t\tthrow new Error('Database \"'+databaseid+'\" not found');\n\t\t\t}\n\t\t} else {\n\t\t\t// Create new database (or get alasql?)\n\t\t\tself = alasql.databases.alasql;\n\t\t\t// For SQL Server examples, USE tempdb\n\t\t\tif(alasql.options.tsql){\n\t\t\t\talasql.databases.tempdb = alasql.databases.alasql;\n\t\t\t}\n\n\t\t}\n\t}\n\tif(!databaseid) {\n\t\tdatabaseid = \"db\"+(alasql.databasenum++); // Random name\n\t}\n\n\t// Step 1\n\tself.databaseid = databaseid;\n\talasql.databases[databaseid] = self;\n\tself.dbversion = 0;\n\n\t//Steps 2-5\n\tself.tables = {};\n\tself.views = {};\n\tself.triggers = {};\n\tself.indices = {};\n\n\t// Step 6: Objects storage\n\tself.objects = {};\n\tself.counter = 0;\n\n\tself.resetSqlCache();\n\treturn self;\n};\n\n/**\n    Reset SQL statements cache\n */\n\nDatabase.prototype.resetSqlCache = function () {\n\tthis.sqlCache = {}; // Cache for compiled SQL statements\n\tthis.sqlCacheSize = 0;\t\n}\n\n// Main SQL function\n\n/**\n    Run SQL statement on database\n    @param {string} sql SQL statement\n    @param [object] params Parameters\n    @param {function} cb callback\n */\n\nDatabase.prototype.exec = function(sql, params, cb) {\n\treturn alasql.dexec(this.databaseid, sql, params, cb);\n};\n\nDatabase.prototype.autoval = function(tablename, colname, getNext) {\n\treturn alasql.autoval(tablename, colname, getNext, this.databaseid);\n};\n\n// Aliases like MS SQL\n\n/*\r\n//\r\n// Transactio class for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nDatabase.prototype.transaction = function(cb) {\r\n\tvar tx = new alasql.Transaction(this.databaseid);\r\n\tvar res = cb(tx);\r\n\treturn res;\r\n};\r\n\n// Transaction class (for WebSQL compatibility)\r\n\n/** \r\n Transaction class\r\n @class Transaction\r\n */\r\n\nvar Transaction = alasql.Transaction = function (databaseid) {\r\n\tthis.transactionid = Date.now();\r\n\tthis.databaseid = databaseid;\r\n\tthis.commited = false; \r\n\tthis.dbversion = alasql.databases[databaseid].dbversion;\r\n//\tthis.bank = cloneDeep(alasql.databases[databaseid]);\r\n\tthis.bank = JSON.stringify(alasql.databases[databaseid]);\r\n\t// TODO CLone Tables with insertfns\r\n\n\treturn this;\r\n};\r\n\n// Main class \r\n\n// Commit\r\n\n/**\r\n Commit transaction\r\n */\r\nTransaction.prototype.commit = function() {\r\n\tthis.commited = true;\r\n\talasql.databases[this.databaseid].dbversion = Date.now();\r\n\tdelete this.bank;\r\n};\r\n\n// Rollback\r\n/**\r\n Rollback transaction\r\n */\r\nTransaction.prototype.rollback = function() {\r\n\tif(!this.commited) {\r\n\t\talasql.databases[this.databaseid] = JSON.parse(this.bank);\r\n\t\t// alasql.databases[this.databaseid].tables = this.bank;\r\n\t\t// alasql.databases[this.databaseid].dbversion = this.dbversion;\r\n\t\tdelete this.bank;\r\n\t} else {\r\n\t\tthrow new Error('Transaction already commited');\r\n\t}\r\n};\r\n\n// Transactions stub\r\n\n/**\r\n Execute SQL statement\r\n @param {string} sql SQL statement\r\n @param {object} params Parameters\r\n @param {function} cb Callback function \r\n @return result\r\n */\r\nTransaction.prototype.exec = function(sql, params, cb) {\r\n\n\treturn alasql.dexec(this.databaseid,sql,params,cb);\r\n};\r\n\nTransaction.prototype.executeSQL = Transaction.prototype.exec;\r\n\n/*\r\n//\r\n// Table class for Alasql.js\r\n// Date: 14.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n// Table class\r\nvar Table = alasql.Table = function(params){\r\n\n\t// Step 1: Data array\r\n\tthis.data = [];\r\n\n\t// Step 2: Columns\r\n\tthis.columns = [];\r\n\tthis.xcolumns = {};\r\n\n\t// Step 3: indices\r\n\tthis.inddefs = {};\r\n\tthis.indices = {};\r\n\tthis.uniqs = {};\r\n\tthis.uniqdefs = {};\t\r\n\n\t// Step 4: identities\r\n\tthis.identities = {};\r\n\n\t// Step 5: checkfn...\r\n\tthis.checks = [];\r\n\tthis.checkfns = []; // For restore... to be done...\r\n\n\t// Step 6: INSERT/DELETE/UPDATE\r\n\n\t// Step 7: Triggers...\r\n\t// Create trigger hubs\r\n\tthis.beforeinsert = {};\r\n\tthis.afterinsert = {};\r\n\tthis.insteadofinsert = {};\r\n\n\tthis.beforedelete = {};\r\n\tthis.afterdelete = {};\r\n\tthis.insteadofdelete = {};\r\n\n\tthis.beforeupdate = {};\r\n\tthis.afterupdate = {};\r\n\tthis.insteadofupdate = {};\r\n\n\t// Done\r\n\textend(this,params);\r\n};\r\n\nTable.prototype.indexColumns = function() {\r\n\tvar self = this;\r\n\tself.xcolumns = {};\r\n\tself.columns.forEach(function(col){\r\n\t\tself.xcolumns[col.columnid] = col;\r\n\t});\t\r\n}\r\n\n/*\r\n//\r\n// View class for Alasql.js\r\n// Date: 14.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n// Table class\r\nvar View = alasql.View = function(params){\r\n\t// Columns\r\n\tthis.columns = [];\r\n\tthis.xcolumns = {};\r\n\t// Data array\r\n\tthis.query = [];\r\n\n\textend(this,params);\r\n};\r\n\n/*\r\n//\r\n// Query class for Alasql.js\r\n// Date: 14.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n// Table class\r\n\n/**\r\n @class Query Main query class\r\n */\r\nvar Query = alasql.Query = function(params){\r\n\tthis.alasql = alasql;\r\n\n\t// Columns\r\n\tthis.columns = [];\r\n\tthis.xcolumns = {};\r\n\tthis.selectGroup = [];\r\n\tthis.groupColumns = {};\r\n\t// Data array\r\n\textend(this,params);\r\n};\r\n\n/**\r\n @class Recordset data object\r\n */\r\nvar Recordset = alasql.Recordset = function(params){\r\n\t// Data array\r\n\textend(this,params);\r\n};\r\n\n/*\r\n//\r\n// Parser helper for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nvar yy = alasqlparser.yy = alasql.yy = {};\r\n\n// Utility\r\nyy.extend = extend;\r\n// Option for case sensitive\r\nyy.casesensitive = alasql.options.casesensitive; \r\n\n// Base class for all yy classes\r\nvar Base = yy.Base = function (params) { return yy.extend(this, params); };\r\n\nBase.prototype.toString = function() {}\r\nBase.prototype.toType = function() {}\r\nBase.prototype.toJS = function() {}\r\n\nBase.prototype.compile = returnUndefined;\r\nBase.prototype.exec = function() {}\r\n\nBase.prototype.compile = returnUndefined;\r\nBase.prototype.exec = function() {}\r\n\n/*\r\n//\r\n// Statements class for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n// Statements container\r\nyy.Statements = function(params) { return yy.extend(this, params); };\r\n\nyy.Statements.prototype.toString = function () {\r\n\treturn this.statements.map(function(st){return st.toString()}).join('; ');\r\n};\r\n\n// Compile array of statements into single statement\r\nyy.Statements.prototype.compile = function(db) {\r\n\tvar statements = this.statements.map(function(st){\r\n\t\treturn st.compile(db)\r\n\t});\r\n\tif(statements.length === 1) {\r\n\t\treturn statements[0];\t\r\n\t} else {\r\n\t\treturn function(params, cb){\r\n\t\t\tvar res = statements.map(function(st){ return st(params); });\r\n\t\t\tif(cb){\r\n\t\t\t\tcb(res);\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t}\r\n\t}\r\n};\r\n\n/* global alasql */\r\n/* global yy */\r\n/*\r\n//\r\n// SEARCH for Alasql.js\r\n// Date: 04.05.2015\r\n// (c) 2015, Andrey Gershun\r\n//\r\n*/\r\n\nfunction doSearch(databaseid, params, cb) {\r\n\tvar res;\r\n\tvar stope = {};\r\n\tvar fromdata;\r\n\tvar selectors = cloneDeep(this.selectors);\r\n\n\tfunction processSelector(selectors,sidx,value) {\r\n\n\t\tvar \r\n\t\t\tval,\t// temp values use many places\r\n\t\t\tnest, \t// temp value used many places\r\n\t\t\tr,\t\t// temp value used many places\r\n\t\t\tsel = selectors[sidx];\r\n\n\t\tvar SECURITY_BREAK = 100000;\r\n\n\t\tif(sel.selid) {\r\n\t\t\t// TODO Process Selector\r\n\t\t\tif(sel.selid === 'PATH') {\r\n\t\t\t\tvar queue = [{node:value,stack:[]}];\r\n\t\t\t\tvar visited = {};\r\n\t\t\t\t//var path = [];\r\n\t\t\t\tvar objects = alasql.databases[alasql.useid].objects;\r\n\t\t\t\twhile (queue.length > 0) {\r\n\t\t\t\t\tvar q = queue.shift()\r\n\t\t\t\t\tvar node = q.node;\r\n\t\t\t\t\tvar stack = q.stack;\r\n\t\t\t\t\tvar r = processSelector(sel.args,0,node);\r\n\t\t\t\t\tif(r.length > 0) {\r\n\t\t\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\t\t\treturn stack;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar rv = [];\r\n\t\t\t\t\t\t\tif(stack && stack.length > 0) {\r\n\t\t\t\t\t\t\t\tstack.forEach(function(stv){\r\n\t\t\t\t\t\t\t\t\trv = rv.concat(processSelector(selectors,sidx+1,stv));\r\n\t\t\t\t\t\t\t\t});\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn rv;\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(typeof visited[node.$id] !== 'undefined') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t} else {\r\n\n\t\t\t\t\t\t\tvisited[node.$id] = true;\r\n\t\t\t\t\t\t\tif(node.$out && node.$out.length > 0) {\r\n\t\t\t\t\t\t\t\tnode.$out.forEach(function(edgeid){\r\n\t\t\t\t\t\t\t\t\tvar edge = objects[edgeid];\r\n\t\t\t\t\t\t\t\t\tvar stack2 = stack.concat(edge);\r\n\t\t\t\t\t\t\t\t\tstack2.push(objects[edge.$out[0]]);\r\n\t\t\t\t\t\t\t\t\tqueue.push({node:objects[edge.$out[0]],\r\n\t\t\t\t\t\t\t\t\t\tstack:stack2});\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Else return fail\r\n\t\t\t\treturn [];\r\n\t\t\t} if(sel.selid === 'NOT') {\r\n\t\t\t\tvar nest = processSelector(sel.args,0,value);\r\n\n\t\t\t\tif(nest.length>0) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\t\treturn [value];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn processSelector(selectors,sidx+1,value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if(sel.selid === 'DISTINCT') {\r\n\t\t\t\tvar nest;\r\n\t\t\t\tif(typeof sel.args === 'undefined' || sel.args.length === 0) {\r\n\t\t\t\t\tnest = distinctArray(value);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnest = processSelector(sel.args,0,value);\r\n\t\t\t\t}\r\n\t\t\t\tif(nest.length === 0) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar res = distinctArray(nest);\r\n\t\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn processSelector(selectors,sidx+1,res);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if(sel.selid === 'AND') {\r\n\t\t\t\tvar res = true;\r\n\t\t\t\tsel.args.forEach(function(se){\r\n\t\t\t\t\tres = res && (processSelector(se,0,value).length>0);\r\n\t\t\t\t});\r\n\t\t\t\tif(!res) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\t\treturn [value];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn processSelector(selectors,sidx+1,value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if(sel.selid === 'OR') {\r\n\t\t\t\tvar res = false;\r\n\t\t\t\tsel.args.forEach(function(se){\r\n\t\t\t\t\tres = res || (processSelector(se,0,value).length>0);\r\n\t\t\t\t});\r\n\t\t\t\tif(!res) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\t\treturn [value];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn processSelector(selectors,sidx+1,value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if(sel.selid === 'ALL') {\r\n\t\t\t\tvar nest = processSelector(sel.args[0],0,value);\r\n\t\t\t\tif(nest.length === 0) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\t\treturn nest;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn processSelector(selectors,sidx+1,nest);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if(sel.selid === 'ANY') {\r\n\t\t\t\tvar nest = processSelector(sel.args[0],0,value);\r\n\n\t\t\t\tif(nest.length === 0) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\t\treturn [nest[0]];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn processSelector(selectors,sidx+1,[nest[0]]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if(sel.selid === 'UNIONALL') {\r\n\t\t\t\tvar nest = [];\r\n\t\t\t\tsel.args.forEach(function(se){\r\n\t\t\t\t\tnest = nest.concat(processSelector(se,0,value));\r\n\t\t\t\t});\r\n\t\t\t\tif(nest.length === 0) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\t\treturn nest;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn processSelector(selectors,sidx+1,nest);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if(sel.selid === 'UNION') {\r\n\t\t\t\tvar nest = [];\r\n\t\t\t\tsel.args.forEach(function(se){\r\n\t\t\t\t\tnest = nest.concat(processSelector(se,0,value));\r\n\t\t\t\t});\r\n\t\t\t\tvar nest = distinctArray(nest);\r\n\t\t\t\tif(nest.length === 0) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\t\treturn nest;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn processSelector(selectors,sidx+1,nest);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else \tif(sel.selid === 'IF') {\r\n\t\t\t\tvar nest = processSelector(sel.args,0,value);\r\n\n\t\t\t\tif(nest.length===0) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\t\treturn [value];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn processSelector(selectors,sidx+1,value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else \tif(sel.selid === 'REPEAT') {\r\n\n\t\t\t\tvar \r\n\t\t\t\t\tlvar, \r\n\t\t\t\t\tlmax,\r\n\t\t\t\t\tlmin = sel.args[0].value;\r\n\t\t\t\tif(!sel.args[1]) {\r\n\t\t\t\t\tlmax = lmin; // Add security break\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlmax = sel.args[1].value;\r\n\t\t\t\t}\r\n\t\t\t\tif(sel.args[2]) {\r\n\t\t\t\t\tlvar = sel.args[2].variable;\r\n\t\t\t\t} \r\n\t\t\t\t//var lsel = sel.sels;\r\n\n\t\t\t\tvar retval = [];\r\n\n\t\t\t\tif (lmin === 0) {\r\n\t\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\t\tretval = [value];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(lvar){\r\n\t\t\t\t\t\t\talasql.vars[lvar] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tretval = retval.concat(processSelector(selectors,sidx+1,value));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\n\t\t\t\t\t// var nests = processSelector(sel.sels,0,value).slice();\r\n\t\t\t\tif(lmax > 0) {\r\n\t\t\t\t\tvar nests = [{value:value,lvl:1}];\r\n\n\t\t\t\t\tvar i = 0;\r\n\t\t\t\t\twhile (nests.length > 0) {\r\n\n\t\t\t\t\t\tvar nest = nests[0];\r\n\n\t\t\t\t\t\tnests.shift();\r\n\t\t\t\t\t\tif(nest.lvl <= lmax) {\r\n\t\t\t\t\t\t\tif(lvar){\r\n\t\t\t\t\t\t\t\talasql.vars[lvar] = nest.lvl;\r\n\t\t\t\t\t\t\t}\r\n\n\t\t\t\t\t\t\tvar nest1 = processSelector(sel.sels,0,nest.value);\r\n\n\t\t\t\t\t\t\tnest1.forEach(function(n){\r\n\t\t\t\t\t\t\t\tnests.push({value:n,lvl:nest.lvl+1});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tif(nest.lvl >= lmin) {\r\n\t\t\t\t\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\t\t\t\t\tretval = retval.concat(nest1);\r\n\t\t\t\t\t\t\t\t\t//return nests;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tnest1.forEach(function(n){\r\n\t\t\t\t\t\t\t\t\t\tretval = retval.concat(processSelector(selectors,sidx+1,n));\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Security brake\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\tif(i>SECURITY_BREAK) {\r\n\t\t\t\t\t\t\tthrow new Error('Security brake. Number of iterations = '+i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\n\t\t\t\t}\r\n\t\t\t\treturn retval;\r\n\t\t\t} else if(sel.selid ==='OF') {\r\n\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\treturn [value];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar r1 = [];\r\n\t\t\t\t\tObject.keys(value).forEach(function(keyv){\r\n\t\t\t\t\t\talasql.vars[sel.args[0].variable] = keyv;\r\n\t\t\t\t\t\tr1 = r1.concat(processSelector(selectors,sidx+1,value[keyv]));\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn r1;\r\n\t\t\t\t}\r\n\t\t\t} else \tif(sel.selid ==='TO') {\r\n\n\t\t\t\tvar oldv = alasql.vars[sel.args[0]];\r\n\t\t\t\tvar newv = [];\r\n\t\t\t\tif(oldv !== undefined) {\r\n\n\t\t\t\t\tnewv = oldv.slice(0);\r\n\n\t\t\t\t} else {\r\n\t\t\t\t\tnewv = [];\r\n\t\t\t\t}\r\n\t\t\t\tnewv.push(value);\r\n\n\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\treturn [value];\r\n\t\t\t\t} else {\r\n\t\t\t\t\talasql.vars[sel.args[0]] = newv;\r\n\t\t\t\t\tvar r1 = processSelector(selectors,sidx+1,value);\r\n\n\t\t\t\t\talasql.vars[sel.args[0]] = oldv;\r\n\t\t\t\t\treturn r1;\r\n\t\t\t\t}\r\n\n\t\t\t} else if(sel.selid === 'ARRAY') {\r\n\t\t\t\tvar nest = processSelector(sel.args,0,value);\r\n\t\t\t\tif(nest.length > 0) {\r\n\t\t\t\t\tval = nest;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\treturn [val];\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn processSelector(selectors,sidx+1,val);\r\n\t\t\t\t}\r\n\t\t\t} else if(sel.selid === 'SUM') {\r\n\t\t\t\tvar nest = processSelector(sel.args,0,value);\r\n\t\t\t\tif(nest.length > 0) {\r\n\t\t\t\t\tvar val = nest.reduce(function(sum, current) {\r\n\t  \t\t\t\t\treturn sum + current;\r\n\t\t\t\t\t}, 0);\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\treturn [val];\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn processSelector(selectors,sidx+1,val);\r\n\t\t\t\t}\r\n\t\t\t} else if(sel.selid === 'AVG') {\r\n\t\t\t\tnest = processSelector(sel.args,0,value);\r\n\t\t\t\tif(nest.length > 0) {\r\n\t\t\t\t\tval = nest.reduce(function(sum, current) {\r\n\t  \t\t\t\t\treturn sum + current;\r\n\t\t\t\t\t}, 0)/nest.length;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\treturn [val];\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn processSelector(selectors,sidx+1,val);\r\n\t\t\t\t}\r\n\t\t\t} else if(sel.selid === 'COUNT') {\r\n\t\t\t\tnest = processSelector(sel.args,0,value);\r\n\t\t\t\tif(nest.length > 0) {\r\n\t\t\t\t\tval = nest.length;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\treturn [val];\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn processSelector(selectors,sidx+1,val);\r\n\t\t\t\t}\r\n\t\t\t} else \tif(sel.selid === 'FIRST') {\r\n\t\t\t\tnest = processSelector(sel.args,0,value);\r\n\t\t\t\tif(nest.length > 0){\r\n\t\t\t\t\tval = nest[0];\r\n\t\t\t\t} else { \r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\n\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\treturn [val];\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn processSelector(selectors,sidx+1,val);\r\n\t\t\t\t}\r\n\t\t\t} else \tif(sel.selid === 'LAST') {\r\n\t\t\t\tnest = processSelector(sel.args,0,value);\r\n\t\t\t\tif(nest.length > 0) {\r\n\t\t\t\t\tval = nest[nest.length-1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\n\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\treturn [val];\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn processSelector(selectors,sidx+1,val);\r\n\t\t\t\t}\r\n\t\t\t} else if(sel.selid === 'MIN') {\r\n\t\t\t\tnest = processSelector(sel.args,0,value);\r\n\t\t\t\tif(nest.length === 0){\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t\tvar val = nest.reduce(function(min, current) {\r\n  \t\t\t\t\treturn Math.min(min,current);\r\n\t\t\t\t}, Infinity);\r\n\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\treturn [val];\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn processSelector(selectors,sidx+1,val);\r\n\t\t\t\t}\r\n\t\t\t} else \tif(sel.selid === 'MAX') {\r\n\t\t\t\tvar nest = processSelector(sel.args,0,value);\r\n\t\t\t\tif(nest.length === 0){\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t\tvar val = nest.reduce(function(max, current) {\r\n  \t\t\t\t\treturn Math.max(max,current);\r\n\t\t\t\t}, -Infinity);\r\n\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\treturn [val];\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn processSelector(selectors,sidx+1,val);\r\n\t\t\t\t}\r\n\t\t\t} else \tif(sel.selid === 'PLUS') {\r\n\t\t\t\tvar retval = [];\r\n\n\t\t\t\tvar nests = processSelector(sel.args,0,value).slice();\r\n\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\tretval = retval.concat(nests);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnests.forEach(function(n){\r\n\t\t\t\t\t\tretval = retval.concat(processSelector(selectors,sidx+1,n));\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\n\t\t\t\tvar i = 0;\r\n\t\t\t\twhile (nests.length > 0) {\r\n\n\t\t\t\t\tvar nest = nests.shift();\r\n\n\t\t\t\t\tnest = processSelector(sel.args,0,nest);\r\n\n\t\t\t\t\tnests = nests.concat(nest);\r\n\n\t\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\t\tretval = retval.concat(nest);\r\n\t\t\t\t\t\t//return retval;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnest.forEach(function(n){\r\n\n\t\t\t\t\t\t\tvar rn = processSelector(selectors,sidx+1,n);\r\n\n\t\t\t\t\t\t\tretval = retval.concat(rn);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\n\t\t\t\t\t// Security brake\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tif(i>SECURITY_BREAK) {\r\n\t\t\t\t\t\tthrow new Error('Security brake. Number of iterations = '+i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn retval;\r\n\n\t\t\t} else \tif(sel.selid === 'STAR') {\r\n\t\t\t\tvar retval = [];\r\n\t\t\t\tretval = processSelector(selectors,sidx+1,value);\r\n\t\t\t\tvar nests = processSelector(sel.args,0,value).slice();\r\n\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\tretval = retval.concat(nests);\r\n\t\t\t\t\t//return nests;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnests.forEach(function(n){\r\n\t\t\t\t\t\tretval = retval.concat(processSelector(selectors,sidx+1,n));\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tvar i = 0;\r\n\t\t\t\twhile (nests.length > 0) {\r\n\t\t\t\t\tvar nest = nests[0];\r\n\t\t\t\t\tnests.shift();\r\n\n\t\t\t\t\tnest = processSelector(sel.args,0,nest);\r\n\n\t\t\t\t\tnests = nests.concat(nest);\r\n\n\t\t\t\t\tif(sidx+1+1 <= selectors.length) {\r\n\t\t\t\t\t\tnest.forEach(function(n){\r\n\t\t\t\t\t\t\tretval = retval.concat(processSelector(selectors,sidx+1,n));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\n\t\t\t\t\t// Security brake\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tif(i>SECURITY_BREAK) {\r\n\t\t\t\t\t\tthrow new Error('Loop brake. Number of iterations = '+i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\n\t\t\t\treturn retval;\r\n\t\t\t} else \tif(sel.selid === 'QUESTION') {\r\n\t\t\t\tvar retval = [];\r\n\t\t\t\tretval = retval.concat(processSelector(selectors,sidx+1,value))\r\n\t\t\t\tvar nest = processSelector(sel.args,0,value);\r\n\t\t\t\tif(sidx+1+1 <= selectors.length) {\r\n\t\t\t\t\tnest.forEach(function(n){\r\n\t\t\t\t\t\tretval = retval.concat(processSelector(selectors,sidx+1,n));\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn retval;\r\n\t\t\t} else if(sel.selid === 'WITH') {\r\n\t\t\t\tvar nest = processSelector(sel.args,0,value);\r\n\n\t\t\t\tif(nest.length===0) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t} else {\r\n\n\t\t\t\t\tvar r = {status:1,values:nest};\r\n\t\t\t\t}\r\n\t\t\t} else if(sel.selid === 'ROOT') {\r\n\t\t\t\tif(sidx+1+1 > selectors.length) {\r\n\t\t\t\t\treturn [value];\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn processSelector(selectors,sidx+1,fromdata);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error('Wrong selector '+sel.selid);\r\n\t\t\t}\r\n\n\t\t} else if(sel.srchid) {\r\n\t\t\tvar r = alasql.srch[sel.srchid.toUpperCase()](value,sel.args,stope,params);\r\n\n\t\t} else {\r\n\t\t\tthrow new Error('Selector not found');\r\n\t\t}\r\n\n\t\tif(typeof r === 'undefined') {\r\n\t\t\tr = {status: 1, values: [value]};\r\n\t\t}\r\n\n\t\tvar res = [];\r\n\t\tif(r.status === 1) {\r\n\n\t\t\tvar arr = r.values;\r\n\n\t\t\tif(sidx+1+1 > selectors.length) {\r\n\n\t\t\t\tres = arr;\t\t\t\t\t\r\n\n\t\t\t} else {\r\n\t\t\t\tfor(var i=0;i<r.values.length;i++) {\r\n\t\t\t\t\tres = res.concat(processSelector(selectors,sidx+1,arr[i]));\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\n\tif(selectors !== undefined && selectors.length > 0) {\r\n\n\t\tif(selectors && selectors[0] && selectors[0].srchid === 'PROP' && selectors[0].args && selectors[0].args[0]) {\r\n\n\t\t\tif(selectors[0].args[0].toUpperCase() === 'XML') {\r\n\t\t\t\tstope.mode = 'XML';\r\n\t\t\t\tselectors.shift();\r\n\t\t\t} else if(selectors[0].args[0].toUpperCase() === 'HTML') {\r\n\t\t\t\tstope.mode = 'HTML';\r\n\t\t\t\tselectors.shift();\r\n\t\t\t} else if(selectors[0].args[0].toUpperCase() === 'JSON') {\r\n\t\t\t\tstope.mode = 'JSON';\r\n\t\t\t\tselectors.shift();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(selectors.length > 0 && selectors[0].srchid === 'VALUE') {\r\n\t\t\tstope.value = true;\r\n\t\t\tselectors.shift();\r\n\t\t}\r\n\t}\r\n\n\tif(this.from instanceof yy.Column) {\r\n\t\tvar dbid = this.from.databaseid || databaseid;\r\n\t\tfromdata = alasql.databases[dbid].tables[this.from.columnid].data;\r\n\t\t//selectors.unshift({srchid:'CHILD'});\r\n\t} else if(\r\n\t\t\t\tthis.from instanceof yy.FuncValue &&\t\t\t\t \r\n\t\t\t\talasql.from[this.from.funcid.toUpperCase()]\r\n\t\t\t) {\r\n\t\tvar args = this.from.args.map(function(arg){\r\n\t\tvar as = arg.toJS();\r\n\n\t\tvar fn = new Function('params,alasql','var y;return '+as).bind(this);\r\n\t\treturn fn(params,alasql);\r\n\t\t});\r\n\n\t\tfromdata = alasql.from[this.from.funcid.toUpperCase()].apply(this,args);\r\n\n\t} else if(typeof this.from === 'undefined') {\r\n\t\tfromdata = alasql.databases[databaseid].objects;\r\n\t} else {\r\n\t\tvar fromfn = new Function('params,alasql','var y;return '+this.from.toJS());\r\n\t\tfromdata = fromfn(params,alasql);\t\t\t\r\n\t\t// Check for Mogo Collections\r\n\t\tif(\r\n\t\t\ttypeof Mongo === 'object' && typeof Mongo.Collection !== 'object' && \r\n\t\t\tfromdata instanceof Mongo.Collection\r\n\t\t) {\r\n\t\t\tfromdata = fromdata.find().fetch();\r\n\t\t}\r\n\n\t}\r\n\n\t// If source data is array than first step is to run over array\r\n//\tvar selidx = 0;\r\n//\tvar selvalue = fromdata;\r\n\n\tif(selectors !== undefined && selectors.length > 0) {\r\n\t\t// Init variables for TO() selectors\r\n\n\t\tif(false) {\r\n\t\t\tselectors.forEach(function(selector){\r\n\t\t\t\tif(selector.srchid === 'TO') {  //* @todo move to TO selector\r\n\t\t\t\t\talasql.vars[selector.args[0]] = [];\r\n\t\t\t\t\t// TODO - process nested selectors\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\n\t\tres = processSelector(selectors,0,fromdata);\r\n\t} else {\r\n\t\tres = fromdata; \t\r\n\t}\r\n\n\tif(this.into) {\r\n\t\tvar a1,a2;\r\n\t\tif(typeof this.into.args[0] !== 'undefined') {\r\n\t\t\ta1 = \r\n\t\t\t\tnew Function('params,alasql','var y;return ' +\r\n\t\t\t\tthis.into.args[0].toJS())(params,alasql);\r\n\t\t}\r\n\t\tif(typeof this.into.args[1] !== 'undefined') {\r\n\t\t\ta2 =  \r\n\t\t\t\tnew Function('params,alasql','var y;return ' +\r\n\t\t\t\tthis.into.args[1].toJS())(params,alasql);\r\n\t\t}\r\n\t\tres = alasql.into[this.into.funcid.toUpperCase()](a1,a2,res,[],cb);\r\n\t} else {\r\n\t\tif(stope.value && res.length > 0){\r\n\t\t\tres = res[0];\r\n\t\t}\r\n\t\tif (cb){\r\n\t\t\tres = cb(res);\r\n\t\t}\r\n\t}\r\n\treturn res;\r\n\n}\r\n\n/**\t\r\n\tSearch class\r\n\t@class\r\n\t@example\r\n\tSEARCH SUM(/a) FROM ? -- search over parameter object\r\n*/\r\n\nyy.Search = function (params) { return yy.extend(this, params); }\r\n\nyy.Search.prototype.toString = function () {\r\n\tvar s = 'SEARCH' + ' ';\r\n\tif (this.selectors){\r\n\t\ts += this.selectors.toString();\r\n\t}\r\n\tif (this.from){\r\n\t\ts += 'FROM' + ' ' + this.from.toString();\r\n\t}\r\n\n\treturn s;\r\n};\r\n\nyy.Search.prototype.toJS = function(context) {\r\n\n\tvar s = 'this.queriesfn['+(this.queriesidx-1)+'](this.params,null,'+context+')';\r\n\t// var s = '';\r\n\treturn s;\r\n};\r\n\nyy.Search.prototype.compile = function(databaseid) {\r\n\tvar dbid = databaseid;\r\n\tvar self = this;\r\n\n\tvar statement = function(params,cb){\r\n\n\t\tvar res;\r\n\t\tdoSearch.bind(self)(dbid,params,function(data){\r\n\n\t\t\tres = modify(statement.query,data);\r\n\n\t\t\tif(cb){\r\n\t\t\t\tres = cb(res);\r\n\t\t\t}\r\n\t\t});\r\n\n\t\treturn res;\r\n\t};\r\n\tstatement.query = {};\r\n\treturn statement;\r\n};\r\n\n// List of search functions\r\nalasql.srch = {};\r\n\nalasql.srch.PROP = function(val,args,stope) {\r\n\n\tif(stope.mode === 'XML') {\r\n\t\tvar arr = [];\r\n\t\tval.children.forEach(function(v){\r\n\t\t\tif(v.name.toUpperCase() === args[0].toUpperCase()) {\r\n\t\t\t\tarr.push(v)\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(arr.length>0) {\r\n\t\t\treturn {status: 1, values: arr};\r\n\t\t} else {\r\n\t\t\treturn {status: -1, values: []};\r\n\t\t}\t\t\r\n\t} else {\r\n\t\tif(\r\n\t\t\t(typeof val !== 'object') \t|| \r\n\t\t\t(val === null) \t\t\t\t|| \r\n\t\t\t(typeof args !== 'object') \t|| \r\n\t\t\t(typeof val[args[0]] === 'undefined')\r\n\t\t) {\r\n\t\t\treturn {status: -1, values: []};\r\n\t\t} else {\r\n\t\t\treturn {status: 1, values: [val[args[0]]]};\r\n\t\t}\t\t\r\n\t}\r\n};\r\n\nalasql.srch.APROP = function(val, args) {\r\n\tif(\r\n\t\t(typeof val !== 'object') \t|| \r\n\t\t(val === null)\t\t\t\t||\r\n\t\t(typeof args !== 'object')\t|| \r\n\t\t(typeof val[args[0]] === 'undefined')) {\r\n\t\treturn {status: 1, values: [undefined]};\r\n\t} else {\r\n\t\treturn {status: 1, values: [val[args[0]]]};\r\n\t}\t\t\r\n};\r\n\n// Test expression\r\nalasql.srch.EQ = function(val,args,stope,params) {\r\n  var exprs = args[0].toJS('x','');\r\n  var exprfn = new Function('x,alasql,params','return '+exprs);\r\n  if(val === exprfn(val,alasql,params)) {\r\n    return {status: 1, values: [val]};\r\n  } else {\r\n    return {status: -1, values: []};        \r\n  }\r\n};\r\n\n// Test expression\r\nalasql.srch.LIKE = function(val,args,stope,params) {\r\n  var exprs = args[0].toJS('x','');\r\n  var exprfn = new Function('x,alasql,params','return '+exprs);\r\n  if(val.toUpperCase().match(new RegExp('^'+exprfn(val,alasql,params).toUpperCase()\r\n  \t.replace(/%/g,'.*').replace(/\\?|_/g,'.')+'$'),'g')) {\r\n    return {status: 1, values: [val]};\r\n  } else {\r\n    return {status: -1, values: []};        \r\n  }\r\n};\r\n\nalasql.srch.ATTR = function(val,args,stope) {\r\n\tif(stope.mode === 'XML') {\r\n\t\tif(typeof args === 'undefined') {\r\n\t      return {status: 1, values: [val.attributes]};\r\n\t\t} else {\r\n\t\t\tif(\r\n\t\t\t\ttypeof val === 'object' \t\t\t&& \r\n\t\t\t\ttypeof val.attributes === 'object'\t&&\r\n\t\t\t\ttypeof val.attributes[args[0]] !== 'undefined'\r\n\t\t\t){\r\n\t\t\t\treturn {status: 1, values: [val.attributes[args[0]]]};\r\n\t\t\t} else {\r\n\t\t\t\treturn {status: -1, values: []};\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t} else {\r\n\t\tthrow new Error('ATTR is not using in usual mode');\r\n\t}\r\n};\r\n\nalasql.srch.CONTENT = function(val,args,stope) {\r\n\tif(stope.mode === 'XML') {\r\n\t\treturn {status: 1, values: [val.content]};\r\n\t} else {\r\n\t\tthrow new Error('ATTR is not using in usual mode');\r\n\t}\r\n};\r\n\nalasql.srch.SHARP = function(val,args) {\r\n\tvar obj = alasql.databases[alasql.useid].objects[args[0]];\r\n\tif(typeof val !== 'undefined' && val === obj) {\r\n\t\treturn {status: 1, values: [val]};\r\n\t} else {\r\n\t\treturn {status: -1, values: []};\r\n\t}\r\n};\r\n\nalasql.srch.PARENT = function(/*val,args,stope*/) {\r\n\t// TODO: implement\r\n\tconsole.log('PARENT not implemented', arguments);\r\n\n\treturn {status: -1, values: []};\r\n};\r\n\nalasql.srch.CHILD = function(val,args,stope) {\r\n\n  if(typeof val === 'object') {\r\n    if(Array.isArray(val)){\r\n      return {status: 1, values: val};\r\n    } else {\r\n    \tif(stope.mode === 'XML') {\r\n\t      return {status: 1, values: Object.keys(val.children).map(function(key){return val.children[key];})};          \r\n    \t} else {\r\n\t      return {status: 1, values: Object.keys(val).map(function(key){return val[key];})};          \r\n    \t}\r\n    }\r\n  } else {\r\n    // If primitive value\r\n    return {status: 1, values:[]};\r\n  }\r\n};\r\n\n// Return all keys\r\nalasql.srch.KEYS = function(val) {\r\n  if(typeof val === 'object' && val !== null) {\r\n\t  return {status: 1, values: Object.keys(val)};          \r\n  } else {\r\n    // If primitive value\r\n    return {status: 1, values:[]};\r\n  }\r\n};\r\n\n// Test expression\r\nalasql.srch.WHERE = function(val,args,stope,params) {\r\n  var exprs = args[0].toJS('x','');\r\n  var exprfn = new Function('x,alasql,params','return '+exprs);\r\n  if(exprfn(val,alasql,params)) {\r\n    return {status: 1, values: [val]};\r\n  } else {\r\n    return {status: -1, values: []};        \r\n  }\r\n};\r\n\nalasql.srch.NAME = function(val,args) {\r\n  if(val.name === args[0]) {\r\n    return {status: 1, values: [val]};\r\n  } else {\r\n    return {status: -1, values: []};        \r\n  }\r\n};\r\n\nalasql.srch.CLASS = function(val,args) {\r\n\n  // Please avoid `===` here\r\n  if(val.$class == args) { \t\t\t\t\t// jshint ignore:line\r\n    return {status: 1, values: [val]};\r\n  } else {\r\n    return {status: -1, values: []};        \r\n  }\r\n};\r\n\n// Transform expression\r\nalasql.srch.VERTEX = function(val) {\r\n  if(val.$node === 'VERTEX') {\r\n    return {status: 1, values: [val]};\r\n  } else {\r\n    return {status: -1, values: []};        \r\n  }\r\n};\r\n\n// Transform expression\r\nalasql.srch.INSTANCEOF = function(val,args) {\r\n  if(val instanceof alasql.fn[args[0]]) {\r\n    return {status: 1, values: [val]};\r\n  } else {\r\n    return {status: -1, values: []};        \r\n  }\r\n};\r\n\n// Transform expression\r\nalasql.srch.EDGE = function(val ) {\r\n  if(val.$node === 'EDGE') {\r\n    return {status: 1, values: [val]};\r\n  } else {\r\n    return {status: -1, values: []};        \r\n  }\r\n};\r\n\n// Transform expression\r\nalasql.srch.EX = function(val,args,stope,params) {\r\n  var exprs = args[0].toJS('x','');\r\n  var exprfn = new Function('x,alasql,params','return '+exprs);\r\n  return {status: 1, values: [exprfn(val,alasql,params)]};\r\n};\r\n\n// Transform expression\r\nalasql.srch.RETURN = function(val,args,stope,params) {\r\n\tvar res = {};\r\n\tif(args && args.length > 0) {\r\n\t\targs.forEach(function(arg){\r\n\t\t  \tvar exprs = arg.toJS('x','');\r\n  \t\t\tvar exprfn = new Function('x,alasql,params','return '+exprs);\r\n  \t\t\tif(typeof arg.as === 'undefined'){\r\n  \t\t\t\targ.as = arg.toString();\r\n  \t\t\t}\r\n  \t\t\tres[arg.as] = exprfn(val,alasql,params);\r\n\t\t});\r\n\t}\r\n  return {status: 1, values: [res]};\r\n};\r\n\n// Transform expression\r\nalasql.srch.REF = function(val ) {\r\n  return {status: 1, values: [alasql.databases[alasql.useid].objects[val]]};\r\n};\r\n\n// Transform expression\r\nalasql.srch.OUT = function(val ) {\r\n\tif(val.$out && val.$out.length > 0) {\r\n\t\tvar res = val.$out.map(function(v){ \r\n\t\t\treturn alasql.databases[alasql.useid].objects[v]\r\n\t\t}); \r\n\t\treturn {status: 1, values: res};\r\n\t} else {\r\n\t\treturn {status: -1, values: []};\r\n\t}\r\n};\r\n\nalasql.srch.OUTOUT = function(val ) {\r\n\tif(val.$out && val.$out.length > 0) {\r\n\t\tvar res = [];\r\n\t\tval.$out.forEach(function(v){ \r\n\t\t\tvar av = alasql.databases[alasql.useid].objects[v];\r\n\t\t\tif(av && av.$out && av.$out.length > 0) {\r\n\t\t\t\tav.$out.forEach(function(vv){\r\n\t\t\t\t\tres = res.concat(alasql.databases[alasql.useid].objects[vv]);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}); \r\n\t\treturn {status: 1, values: res};\r\n\t} else {\r\n\t\treturn {status: -1, values: []};\r\n\t}\r\n};\r\n\n// Transform expression\r\nalasql.srch.IN = function(val) {\r\n\tif(val.$in && val.$in.length > 0) {\r\n\t\tvar res = val.$in.map(function(v){ \r\n\t\t\treturn alasql.databases[alasql.useid].objects[v]\r\n\t\t}); \r\n\t\treturn {status: 1, values: res};\r\n\t} else {\r\n\t\treturn {status: -1, values: []};\r\n\t}\r\n};\r\n\nalasql.srch.ININ = function(val ) {\r\n\tif(val.$in && val.$in.length > 0) {\r\n\t\tvar res = [];\r\n\t\tval.$in.forEach(function(v){ \r\n\t\t\tvar av = alasql.databases[alasql.useid].objects[v];\r\n\t\t\tif(av && av.$in && av.$in.length > 0) {\r\n\t\t\t\tav.$in.forEach(function(vv){\r\n\t\t\t\t\tres = res.concat(alasql.databases[alasql.useid].objects[vv]);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}); \r\n\t\treturn {status: 1, values: res};\r\n\t} else {\r\n\t\treturn {status: -1, values: []};\r\n\t}\r\n};\r\n\n// Transform expression\r\nalasql.srch.AS = function(val,args) {\r\n\talasql.vars[args[0]] = val;\r\n  return {status: 1, values: [val]};\r\n};\r\n\n// Transform expression\r\nalasql.srch.AT = function(val,args) {\r\n\tvar v = alasql.vars[args[0]];\r\n  return {status: 1, values: [v]};\r\n};\r\n\n// Transform expression\r\nalasql.srch.CLONEDEEP = function(val) {\r\n\t// TODO something wrong\r\n\tvar z = cloneDeep(val);\r\n \treturn {status: 1, values: [z]};\r\n};\r\n\n// // Transform expression\r\n// alasql.srch.DELETE = function(val,args) {\r\n\n// };\r\n\n// Transform expression\r\nalasql.srch.SET = function(val,args,stope,params) {\r\n\n\tvar s = args.map(function(st){\r\n\n\t\tif(st.method === '@') {\r\n\t\t\treturn 'alasql.vars[\\''+st.variable+'\\']='+st.expression.toJS('x','');\r\n\t\t} else if(st.method === '$') {\r\n\t\t\treturn 'params[\\''+st.variable+'\\']='+st.expression.toJS('x','');\r\n\t\t} else {\r\n\t\t\treturn 'x[\\''+st.column.columnid+'\\']='+st.expression.toJS('x','');\r\n\t\t}\r\n\t}).join(';');\r\n\tvar setfn = new Function('x,params,alasql',s);\r\n\n\tsetfn(val,params,alasql);\r\n\n  return {status: 1, values: [val]};\r\n};\r\n\nalasql.srch.ROW = function(val,args,stope,params) {\r\n  var s = 'var y;return [';\r\n\n\ts += args.map(function(arg){\r\n\t\treturn arg.toJS('x','');\r\n\t}).join(',');\r\n\ts += ']'\r\n\tvar setfn = new Function('x,params,alasql',s);\r\n\tvar rv = setfn(val,params,alasql);\r\n\n  return {status: 1, values: [rv]};\r\n};\r\n\nalasql.srch.D3 = function(val) {\r\n\tif(val.$node !== 'VERTEX' && val.$node === 'EDGE') {\r\n\t\tval.source = val.$in[0];\r\n\t\tval.target = val.$out[0];\r\n\t}\r\n\n  \treturn {status: 1, values: [val]};\r\n};\r\n\nvar compileSearchOrder = function (order) {\r\n\tif(order) {\r\n\n\t\tif(\r\n\t\t\torder \t\t\t\t&& \r\n\t\t\torder.length === 1 \t&& \r\n\t\t\torder[0].expression &&\r\n\t\t\ttypeof order[0].expression === \"function\"\r\n\t\t){\r\n\n\t\t\tvar func = order[0].expression;\r\n\n\t\t\treturn function(a,b){\r\n\t\t\t\tvar ra = func(a),rb = func(b);\r\n\t\t\t\tif(ra>rb){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\tif(ra===rb){\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\n\t\tvar s = '';\r\n\t\tvar sk = '';\r\n\t\torder.forEach(function(ord){\r\n\n\t\t\t// Date conversion\r\n\t\t\tvar dg = ''; \r\n\n\t\t\tif(ord.expression instanceof yy.NumValue) {\r\n\t\t\t\tord.expression = self.columns[ord.expression.value-1];\r\n\t\t\t}\r\n\n\t\t\tif(ord.expression instanceof yy.Column) {\r\n\t\t\t\tvar columnid = ord.expression.columnid; \r\n\n\t\t\t\tif(alasql.options.valueof){\r\n\t\t\t\t\tdg = '.valueOf()'; // TODO Check\r\n\t\t\t\t}\r\n\t\t\t\t// COLLATE NOCASE\r\n\t\t\t\tif(ord.nocase){\r\n\t\t\t\t\tdg += '.toUpperCase()';\r\n\t\t\t\t}\r\n\n\t\t\t\tif(columnid === '_') {\r\n\t\t\t\t\ts += 'if(a'+dg+(ord.direction === 'ASC'?'>':'<')+'b'+dg+')return 1;';\r\n\t\t\t\t\ts += 'if(a'+dg+'==b'+dg+'){';\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts += 'if((a[\\''+columnid+\"']||'')\"+dg+(ord.direction === 'ASC'?'>':'<')+'(b[\\''+columnid+\"']||'')\"+dg+')return 1;';\r\n\t\t\t\t\ts += 'if((a[\\''+columnid+\"']||'')\"+dg+'==(b[\\''+columnid+\"']||'')\"+dg+'){';\r\n\t\t\t\t}\r\n\n\t\t\t} else {\r\n\t\t\t\tdg = '.valueOf()';\r\n\t\t\t\t// COLLATE NOCASE\r\n\t\t\t\tif(ord.nocase){\r\n\t\t\t\t\tdg += '.toUpperCase()';\r\n\t\t\t\t}\r\n\t\t\t\ts += 'if(('+ord.toJS('a','')+\"||'')\"+dg+(ord.direction === 'ASC'?'>(':'<(')+ord.toJS('b','')+\"||'')\"+dg+')return 1;';\r\n\t\t\t\ts += 'if(('+ord.toJS('a','')+\"||'')\"+dg+'==('+ord.toJS('b','')+\"||'')\"+dg+'){';\r\n\t\t\t}\t\t\t\r\n\n\t\t\t// TODO Add date comparision\r\n\t\t\t\t// s += 'if(a[\\''+columnid+\"']\"+dg+(ord.direction == 'ASC'?'>':'<')+'b[\\''+columnid+\"']\"+dg+')return 1;';\r\n\t\t\t\t// s += 'if(a[\\''+columnid+\"']\"+dg+'==b[\\''+columnid+\"']\"+dg+'){';\r\n\n\t\t\tsk += '}';\r\n\t\t});\r\n\t\ts += 'return 0;';\r\n\t\ts += sk+'return -1';\r\n\n\t\treturn new Function('a,b',s);\r\n\t}\r\n};\r\n\nalasql.srch.ORDERBY = function(val,args /*,stope*/) {\r\n\n\tvar res = val.sort(compileSearchOrder(args));\r\n\treturn {status: 1, values: res};\r\n};\r\n\n// Main query procedure\r\nfunction queryfn(query,oldscope,cb, A,B) {\r\n\n\tvar aaa = query.sources.length;\r\n\n\tvar ms;\r\n\tquery.sourceslen = query.sources.length;\r\n\tvar slen = query.sourceslen;\r\n\tquery.query = query; // TODO Remove to prevent memory leaks\r\n\tquery.A = A;\r\n\tquery.B = B;\r\n\tquery.cb = cb;\r\n\tquery.oldscope = oldscope;\r\n\n\t// Run all subqueries before main statement\r\n\tif(query.queriesfn) {\r\n\t\tquery.sourceslen += query.queriesfn.length;\r\n\t\tslen += query.queriesfn.length;\r\n\n\t\tquery.queriesdata = [];\r\n\n\t\tquery.queriesfn.forEach(function(q,idx){\r\n\n\t\t\tq.query.params = query.params;\r\n\n//\tif(false) {\r\n\n//\t} else {\r\n\t\t\tqueryfn2([],(-idx-1),query);\r\n//\t}\r\n\n\t\t});\r\n\n\t}\r\n\n\tvar scope;\r\n\tif(!oldscope) scope = {};\r\n\telse scope = cloneDeep(oldscope);\r\n\tquery.scope = scope;\r\n\n\t// First - refresh data sources\r\n\n\tvar result;\r\n\tquery.sources.forEach(function(source, idx){\r\n\n\t\tsource.query = query;\r\n\t\tvar rs = source.datafn(query, query.params, queryfn2, idx, alasql); \r\n\n\t\tif(typeof rs !== 'undefined') {\r\n\t\t\t// TODO - this is a hack: check if result is array - check all cases and\r\n\t\t\t// make it more logical\r\n\t\t\tif((query.intofn || query.intoallfn) && Array.isArray(rs)) rs = rs.length;\r\n\t\t\tresult = rs;\r\n\t\t}\r\n//\r\n// Ugly hack to use in query.wherefn and source.srcwherefns functions\r\n// constructions like this.queriesdata['test'].\r\n// I can elimite it with source.srcwherefn.bind(this)()\r\n// but it may be slow.\r\n// \r\n\t\tsource.queriesdata = query.queriesdata;  \r\n\t});\r\n\tif(query.sources.length==0 || 0 === slen ) \r\n\t\tresult = queryfn3(query);\r\n\n\treturn result;\r\n}\r\n\nfunction queryfn2(data,idx,query) {\r\n\n//console.trace();\r\n\n\tif(idx>=0) {\r\n\t\tvar source = query.sources[idx];\r\n\t\tsource.data = data;\r\n\t\tif(typeof source.data == 'function') {\r\n\t\t\tsource.getfn = source.data;\r\n\t\t\tsource.dontcache = source.getfn.dontcache;\r\n\n\t//\t\t\tvar prevsource = query.sources[h-1];\r\n\t\t\tif(source.joinmode == 'OUTER' || source.joinmode == 'RIGHT' || source.joinmode == 'ANTI') {\r\n\t\t\t\tsource.dontcache = false;\r\n\t\t\t}\r\n\t\t\tsource.data = {};\r\n\t\t}\r\n\t} else {\r\n\t\t// subqueries\r\n\n\t\tquery.queriesdata[-idx-1] = flatArray(data);\r\n\n\t}\r\n\n\tquery.sourceslen--;\r\n\tif(query.sourceslen>0) return;\r\n\n\treturn queryfn3(query);\r\n}\r\n\nfunction queryfn3(query) {\r\n\n\tvar scope = query.scope,\r\n        jlen;\r\n\n\t// Preindexation of data sources\r\n//\tif(!oldscope) {\r\n\t\tpreIndex(query);\r\n//\t}\r\n\n\t// query.sources.forEach(function(source) {\r\n\n\t// });\r\n\n\t// Prepare variables\r\n\tquery.data = [];\r\n\tquery.xgroups = {};\r\n\tquery.groups = [];\r\n\n\t// Level of Joins\r\n\tvar h = 0;\r\n\n\t// Start walking over data\r\n\n\tdoJoin(query, scope, h);\r\n\n\t// If groupping, then filter groups with HAVING function\r\n\n\tif(query.groupfn) {\r\n\t\tquery.data = [];\r\n\t\tif(0 === query.groups.length) {\r\n\t\t\tvar g = {};\r\n\t\t\tif(query.selectGroup.length>0) {\r\n\n\t\t\t\tquery.selectGroup.forEach(function(sg){\r\n\t\t\t\t\tif(sg.aggregatorid == \"COUNT\" || sg.aggregatorid == \"SUM\") {\r\n\t\t\t\t\t\tg[sg.nick] = 0;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tg[sg.nick] = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tquery.groups = [g];\r\n\n\t\t}\r\n\n\t\t// ******\r\n\n\t\tif(query.aggrKeys.length > 0) {\r\n\t\t\tvar gfns = '';\r\n\t\t\tquery.aggrKeys.forEach(function(col){\r\n\t\t\t\tgfns += 'g[\\''+col.nick+'\\']=alasql.aggr[\\''+col.funcid+'\\'](undefined,g[\\''+col.nick+'\\'],3);'; \r\n\n\t\t\t});\r\n\n\t\t\tvar gfn = new Function('g,params,alasql','var y;'+gfns); \r\n\n\t\t}\r\n\n\t\t// *******\r\n\n\t\t// \tdebugger;\r\n\t\t// if(false && (query.groups.length == 1) && (Object.keys(query.groups[0]).length == 0)) {\r\n\n\t\t// } else {\r\n\t\t\tfor(var i=0,ilen=query.groups.length;i<ilen;i++) {\r\n\t\t\t\tvar g = query.groups[i];\r\n\n\t\t\t\tif(gfn) gfn(g,query.params,alasql);\r\n\n\t\t\t\tif((!query.havingfn) || query.havingfn(g,query.params,alasql)) {\r\n\n\t\t\t\t\tvar d = query.selectgfn(g,query.params,alasql);\r\n\t\t\t\t\tquery.data.push(d);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t// }\r\n\n\t}\r\n\t// Remove distinct values\t\r\n\tdoDistinct(query);\r\n\n\t// UNION / UNION ALL\r\n\tif(query.unionallfn) {\r\n// TODO Simplify this part of program\r\n\t\tvar ud, nd;\r\n\t\tif(query.corresponding) {\r\n\t\t\tif(!query.unionallfn.query.modifier) query.unionallfn.query.modifier = undefined;\r\n\t\t\tud = query.unionallfn(query.params);\r\n\t\t} else {\r\n\t\t\tif(!query.unionallfn.query.modifier) query.unionallfn.query.modifier = 'RECORDSET';\r\n\t\t\tnd = query.unionallfn(query.params);\r\n\t\t\tud = [];\r\n\t\t\tilen=nd.data.length\r\n\t\t\tfor(var i=0;i<ilen;i++) {\r\n\t\t\t\tvar r = {};\r\n\t\t\t\tfor(var j=Math.min(query.columns.length,nd.columns.length)-1;0<=j;j--) {\r\n\t\t\t\t\tr[query.columns[j].columnid] = nd.data[i][nd.columns[j].columnid];\r\n\t\t\t\t}\r\n\t\t\t\tud.push(r);\r\n\t\t\t}\r\n\t\t}\r\n\t\tquery.data = query.data.concat(ud);\r\n\t} else if(query.unionfn) {\r\n\n\t\tif(query.corresponding) {\r\n\t\t\tif(!query.unionfn.query.modifier) query.unionfn.query.modifier = 'ARRAY';\r\n\t\t\tud = query.unionfn(query.params);\r\n\t\t} else {\r\n\t\t\tif(!query.unionfn.query.modifier) query.unionfn.query.modifier = 'RECORDSET';\r\n\t\t\tnd = query.unionfn(query.params);\r\n\t\t\tud = [];\r\n\t\t\tilen=nd.data.length\r\n\t\t\tfor(var i=0;i<ilen;i++) {\r\n\t\t\t\tr = {};\r\n\t\t\t\tjlen=Math.min(query.columns.length,nd.columns.length);\r\n\t\t\t\tfor(var j=0;j<jlen;j++) {\r\n\t\t\t\t\tr[query.columns[j].columnid] = nd.data[i][nd.columns[j].columnid];\r\n\t\t\t\t}\r\n\t\t\t\tud.push(r);\r\n\t\t\t}\r\n\t\t}\r\n\n\t\tquery.data = arrayUnionDeep(query.data, ud);\r\n\n\t} else if(query.exceptfn) {\r\n\t\tif(query.corresponding) {\r\n\t\t\tif(!query.exceptfn.query.modifier) query.exceptfn.query.modifier = 'ARRAY';\r\n\t\t\tvar ud = query.exceptfn(query.params);\r\n\t\t} else {\r\n\t\t\tif(!query.exceptfn.query.modifier) query.exceptfn.query.modifier = 'RECORDSET';\r\n\t\t\tvar nd = query.exceptfn(query.params);\r\n\t\t\tvar ud = [];\r\n\t\t\tfor(var i=0,ilen=nd.data.length;i<ilen;i++) {\r\n\t\t\t\tvar r = {};\r\n\t\t\t\tfor(var j=Math.min(query.columns.length,nd.columns.length)-1;0<=j;j--) {\r\n\t\t\t\t\tr[query.columns[j].columnid] = nd.data[i][nd.columns[j].columnid];\r\n\t\t\t\t}\r\n\t\t\t\tud.push(r);\r\n\t\t\t}\r\n\t\t}\r\n\n\t\tquery.data = arrayExceptDeep(query.data, ud);\r\n\t} else if(query.intersectfn) {\r\n\t\tif(query.corresponding) {\r\n\t\t\tif(!query.intersectfn.query.modifier) \r\n\t\t\t\tquery.intersectfn.query.modifier = undefined;\r\n\t\t\tud = query.intersectfn(query.params);\r\n\t\t} else {\r\n\t\t\tif(!query.intersectfn.query.modifier) \r\n\t\t\t\tquery.intersectfn.query.modifier = 'RECORDSET';\r\n\t\t\tnd = query.intersectfn(query.params);\r\n\t\t\tud = [];\r\n\t\t\tilen=nd.data.length;\r\n\t\t\tfor(i=0;i<ilen;i++) {\r\n\t\t\t\tr = {};\r\n\t\t\t\tjlen=Math.min(query.columns.length,nd.columns.length);\r\n\t\t\t\tfor(j=0;j<jlen;j++) {\r\n\t\t\t\t\tr[query.columns[j].columnid] = nd.data[i][nd.columns[j].columnid];\r\n\t\t\t\t}\r\n\t\t\t\tud.push(r);\r\n\t\t\t}\r\n\t\t}\r\n\n\t\tquery.data = arrayIntersectDeep(query.data, ud);\r\n\t}\r\n\n\t// Ordering\r\n\tif(query.orderfn) {\r\n\t\tif(query.explain) var ms = Date.now();\r\n\t\tquery.data = query.data.sort(query.orderfn);\r\n\t\tif(query.explain) { \r\n\t\t\tquery.explaination.push({explid: query.explid++, description:'QUERY BY',ms:Date.now()-ms});\r\n\t\t}\r\n\t}\r\n\n\t// Reduce to limit and offset\r\n\tdoLimit(query);\r\n\n\t// Remove Angular.js artifacts and other unnecessary columns\r\n\t// Issue #25\r\n\n    // TODO: Check what artefacts rest from Angular.js\r\n    if(typeof angular != \"undefined\") {\r\n    \tquery.removeKeys.push('$$hashKey');\r\n    }\r\n\n\tif(query.removeKeys.length > 0) {\r\n\t    var removeKeys = query.removeKeys;\r\n\n\t    // Remove from data\r\n\t\tjlen = removeKeys.length;\r\n\t\tif(jlen > 0) {\r\n\t\t\tilen=query.data.length;\t\r\n\t\t\tfor(i=0;i<ilen;i++) {\r\n\t\t\t\tfor(j=0; j<jlen;j++) {\r\n\t\t\t\t\tdelete query.data[i][removeKeys[j]];\r\n\t\t\t\t}\r\n\t\t\t}    \r\n\t\t}\r\n\n\t    // Remove from columns list\r\n\t\tif(query.columns.length > 0) {\r\n\t\t\tquery.columns = query.columns.filter(function(column){\r\n\t\t\t\tvar found = false;\r\n\t\t\t\tremoveKeys.forEach(function(key){\r\n\t\t\t\t\tif(column.columnid == key) found = true;\r\n\t\t\t\t});\r\n\t\t\t\treturn !found;\r\n\t\t\t});\r\n\t\t}\r\n\n\t}\r\n\n\tif(typeof query.removeLikeKeys != 'undefined' && query.removeLikeKeys.length > 0) {\r\n\n\t    var removeLikeKeys = query.removeLikeKeys;\r\n\n\t\t// Remove unused columns\r\n\t\t// SELECT * REMOVE COLUMNS LIKE \"%b\"\r\n\t\tfor(var i=0,ilen=query.data.length;i<ilen;i++) {\r\n\t\t\tr = query.data[i];\r\n\t\t\tfor(var k in r) {\r\n\t\t\t\tfor(j=0;j<query.removeLikeKeys.length;j++) {\r\n\t\t\t\t\tif(alasql.utils.like(query.removeLikeKeys[j],k)) {\r\n\n\t\t\t\t\t\tdelete r[k];\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t}\r\n\n\t\tif(query.columns.length > 0) {\r\n\t\t\tquery.columns = query.columns.filter(function(column){\r\n\t\t\t\tvar found = false;\r\n\t\t\t\tremoveLikeKeys.forEach(function(key){\r\n\n\t\t\t\t\tif(alasql.utils.like(key,column.columnid)) {\r\n\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn !found;\r\n\t\t\t});\r\n\t\t}\r\n\n\t}\r\n\n\tif(query.pivotfn) query.pivotfn();\r\n\tif(query.unpivotfn) query.unpivotfn();\r\n\n\tif(query.intoallfn) {\r\n\n\t\tvar res = query.intoallfn(query.columns,query.cb,query.params,query.alasql); \r\n\n\t\treturn res;\t\r\n\t} else if(query.intofn) {\r\n\t\tilen=query.data.length;\r\n\t\tfor(i=0;i<ilen;i++){\r\n\t\t\tquery.intofn(query.data[i],i,query.params,query.alasql);\r\n\t\t}\r\n\n\t\tif(query.cb) \r\n\t\t\tquery.cb(query.data.length,query.A, query.B);\r\n\t\treturn query.data.length;\r\n\t} else {\r\n\n\t\tres = query.data;\r\n\t\tif(query.cb) \r\n\t\t\tres = query.cb(query.data,query.A, query.B);\r\n\t\treturn res;\r\n\t}\r\n\n}\r\n\n// Limiting\r\nfunction doLimit (query) {\r\n\n\tif(query.limit) {\r\n\t\tvar offset = 0;\r\n\t\tif(query.offset) offset = ((query.offset|0)-1)||0;\r\n\t\tvar limit;\r\n\t\tif(query.percent) {\r\n\t\t\tlimit = ((query.data.length*query.limit/100)| 0)+offset;\t\t\t\r\n\t\t} else {\r\n\t\t\tlimit = (query.limit|0) + offset;\r\n\t\t}\r\n\t\tquery.data = query.data.slice(offset,limit);\r\n\t}\r\n}\r\n\n// Distinct\r\nfunction doDistinct (query) {\r\n\tif(query.distinct) {\r\n\t\tvar uniq = {};\r\n\t\t// TODO: Speedup, because Object.keys is slow\r\n\t\t// TODO: Problem with DISTINCT on objects\r\n\t\tfor(var i=0,ilen=query.data.length;i<ilen;i++) {\r\n\t\t\tvar uix = Object.keys(query.data[i]).map(function(k){return query.data[i][k];}).join('`');\r\n\t\t\tuniq[uix] = query.data[i];\r\n\t\t}\r\n\t\tquery.data = [];\r\n\t\tfor(var key in uniq){\r\n\t\t\tquery.data.push(uniq[key]);\r\n\t\t}\r\n\t}\r\n}\r\n\n// Optimization: preliminary indexation of joins\r\nvar preIndex = function(query) {\r\n\n\t// Loop over all sources\r\n\t// Todo: make this loop smaller and more graspable\r\n\tfor(var k=0, klen = query.sources.length;k<klen;k++) {\r\n\t\tvar source = query.sources[k];\r\n\t\tdelete source.ix;\r\n\t\t// If there is indexation rule\r\n\n\t\tif(k > 0 && source.optimization == 'ix' && source.onleftfn && source.onrightfn) {\r\n\t\t\t// If there is no table.indices - create it\r\n\t\t\tif(source.databaseid && alasql.databases[source.databaseid].tables[source.tableid]) {\r\n\t\t\t\tif(!alasql.databases[source.databaseid].tables[source.tableid].indices) query.database.tables[source.tableid].indices = {};\r\n\t\t\t\t\t// Check if index already exists\r\n\t\t\t\tvar ixx = alasql.databases[source.databaseid].tables[source.tableid].indices[hash(source.onrightfns+'`'+source.srcwherefns)];\r\n\t\t\t\tif( !alasql.databases[source.databaseid].tables[source.tableid].dirty && ixx) {\r\n\t\t\t\t\tsource.ix = ixx; \r\n\t\t\t\t}\r\n\t\t\t}\r\n\n\t\t\tif(!source.ix) {\r\n\t\t\t\tsource.ix = {};\r\n\t\t\t\t// Walking over source data\r\n\t\t\t\tvar scope = {};\r\n\t\t\t\tvar i = 0;\r\n\t\t\t\tvar ilen = source.data.length;\r\n\t\t\t\tvar dataw;\r\n\n\t\t\t\twhile((dataw = source.data[i]) || (source.getfn && (dataw = source.getfn(i))) || (i<ilen)) {\r\n\t\t\t\t\tif(source.getfn && !source.dontcache) source.data[i] = dataw;\r\n\n\t\t\t\t\t// Prepare scope for indexation\r\n\t\t\t\t\tscope[source.alias || source.tableid] = dataw;\r\n\n\t\t\t\t\t// Check if it apply to where function \r\n\t\t\t\t\tif(source.srcwherefn(scope, query.params, alasql)) {\r\n\t\t\t\t\t\t// Create index entry for each address\r\n\t\t\t\t\t\tvar addr = source.onrightfn(scope, query.params, alasql);\r\n\t\t\t\t\t\tvar group = source.ix [addr]; \r\n\t\t\t\t\t\tif(!group) {\r\n\t\t\t\t\t\t\tgroup = source.ix [addr] = []; \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tgroup.push(dataw);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\n\t\t\t\tif(source.databaseid && alasql.databases[source.databaseid].tables[source.tableid]){\r\n\t\t\t\t\t// Save index to original table\t\t\t\t\r\n\t\t\t\t\talasql.databases[source.databaseid].tables[source.tableid].indices[hash(source.onrightfns+'`'+source.srcwherefns)] = source.ix;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\n\t\t\t// Optimization for WHERE column = expression\r\n\t\t} else if (source.wxleftfn) {\r\n\t\t\t\tif(!alasql.databases[source.databaseid].engineid) {\r\n\t\t\t\t\t// Check if index exists\r\n\t\t\t\t\tixx = alasql.databases[source.databaseid].tables[source.tableid].indices[hash(source.wxleftfns+'`')];\r\n\t\t\t\t}\r\n\t\t\t\tif( !alasql.databases[source.databaseid].tables[source.tableid].dirty && ixx) {\r\n\t\t\t\t\t// Use old index if exists\r\n\t\t\t\t\tsource.ix = ixx;\r\n\t\t\t\t\t// Reduce data (apply filter)\r\n\t\t\t\t\tsource.data = source.ix[source.wxrightfn(null, query.params, alasql)]; \r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Create new index\r\n\t\t\t\t\tsource.ix = {};\r\n\t\t\t\t\t// Prepare scope\r\n\t\t\t\t\tscope = {};\r\n\t\t\t\t\t// Walking on each source line\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\tilen = source.data.length;\r\n\t\t\t\t\tdataw;\r\n\t//\t\t\t\twhile(source.getfn i<ilen) {\r\n\n\t\t\t\t\twhile((dataw = source.data[i]) || (source.getfn && (dataw = source.getfn(i))) || (i<ilen)) {\r\n\t\t\t\t\t\tif(source.getfn && !source.dontcache) \r\n\t\t\t\t\t\t\tsource.data[i] = dataw;\r\n\t//\t\t\t\t\tfor(var i=0, ilen=source.data.length; i<ilen; i++) {\r\n\t\t\t\t\t\tscope[source.alias || source.tableid] = source.data[i];\r\n\t\t\t\t\t\t// Create index entry\r\n\t\t\t\t\t\taddr = source.wxleftfn(scope, query.params, alasql);\r\n\t\t\t\t\t\tgroup = source.ix[addr]; \r\n\t\t\t\t\t\tif(!group) {\r\n\t\t\t\t\t\t\tgroup = source.ix[addr] = []; \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tgroup.push(source.data[i]);\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t}\r\n\t//\t\t\t\t\tquery.database.tables[source.tableid].indices[hash(source.wxleftfns+'`'+source.onwherefns)] = source.ix;\r\n\t\t\t\t\tif(!alasql.databases[source.databaseid].engineid) {\r\n\t\t\t\t\t\talasql.databases[source.databaseid].tables[source.tableid].indices[hash(source.wxleftfns+'`')] = source.ix;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Apply where filter to reduces rows\r\n\t\t\t\tif(source.srcwherefns) {\r\n\t\t\t\t\tif(source.data) {\r\n\t\t\t\t\t\tscope = {};\r\n\t\t\t\t\t\tsource.data = source.data.filter(function(r) {\r\n\t\t\t\t\t\t\tscope[source.alias] = r;\r\n\t\t\t\t\t\t\treturn source.srcwherefn(scope, query.params, alasql);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsource.data = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\n\t\t// If there is no any optimization than apply srcwhere filter\r\n\t\t} else if(source.srcwherefns && !source.dontcache) {\r\n\t\t\tif(source.data) {\r\n\t\t\t\tvar scope = {};\r\n\t\t\t\t// TODO!!!!! Data as Function\r\n\n\t\t\t\tsource.data = source.data.filter(function(r) {\r\n\t\t\t\t\tscope[source.alias] = r;\r\n\n\t\t\t\t\treturn source.srcwherefn(scope, query.params, alasql);\r\n\t\t\t\t});\r\n\n\t\t\t\tscope = {};\r\n\t\t\t\ti = 0;\r\n\t\t\t\tilen = source.data.length;\r\n\t\t\t\t//var dataw;\r\n\t\t\t\tvar res = [];\r\n\n\t\t\t\twhile((dataw = source.data[i]) || (source.getfn && (dataw = source.getfn(i))) || (i<ilen)) {\r\n\t\t\t\t\tif(source.getfn && !source.dontcache) source.data[i] = dataw;\r\n\t\t\t\t\tscope[source.alias] = dataw;\r\n\t\t\t\t\tif(source.srcwherefn(scope, query.params, alasql)) res.push(dataw);\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t\tsource.data = res;\r\n\n\t\t\t} else {\r\n\t\t\t\tsource.data = [];\r\n\t\t\t}\r\n\t\t}\t\t\t\r\n\t\t// Change this to another place (this is a wrong)\r\n\t\tif(source.databaseid && alasql.databases[source.databaseid].tables[source.tableid]) {\r\n\t\t\t//query.database.tables[source.tableid].dirty = false;\r\n\t\t} else {\r\n\t\t\t// this is a subquery?\r\n\t\t}\r\n\t}\r\n};\r\n\n//\r\n// Join all lines over sources \r\n//\r\n\nfunction doJoin (query, scope, h) {\r\n\n\t// Check, if this is a last join?\r\n\tif(h>=query.sources.length) { // Todo: check if this runs once too many\r\n\n\t\t// Then apply where and select\r\n\n\t\tif(query.wherefn(scope,query.params, alasql)) {\r\n\n\t\t\t// If there is a GROUP BY then pipe to groupping function\r\n\t\t\tif(query.groupfn) {\r\n\t\t\t\tquery.groupfn(scope, query.params, alasql)\r\n\t\t\t} else {\r\n\n\t\t\t\tquery.data.push(query.selectfn(scope, query.params, alasql));\r\n\t\t\t}\t\r\n\t\t}\r\n\t} else if(query.sources[h].applyselect) {\r\n\n\t\tvar source = query.sources[h];\r\n\t\tsource.applyselect(query.params, function(data){\r\n\t\t\tif(data.length > 0) {\r\n\n\t\t\t\tfor(var i=0;i<data.length;i++) {\r\n\t\t\t\t\tscope[source.alias] = data[i];\r\n\t\t\t\t\tdoJoin(query, scope, h+1);\r\n\t\t\t\t};\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tif (source.applymode == 'OUTER') {\r\n\t\t\t\t\tscope[source.alias] = {};\r\n\t\t\t\t\tdoJoin(query, scope, h+1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},scope);\r\n\n\t} else {\r\n\n// STEP 1\r\n\n\t\tvar source = query.sources[h];\r\n\t\tvar nextsource = query.sources[h+1];\r\n\n\t\t// Todo: check if this is smart\r\n\t\tif(true) {//source.joinmode != \"ANTI\") {\r\n\n\t\t\tvar tableid = source.alias || source.tableid; \r\n\t\t\tvar pass = false; // For LEFT JOIN\r\n\t\t\tvar data = source.data;\r\n\t\t\tvar opt = false;\r\n\n\t\t\t// Reduce data for looping if there is optimization hint\r\n\t\t\tif(!source.getfn || (source.getfn && !source.dontcache)) {\r\n\t\t\t\tif(source.joinmode != \"RIGHT\" && source.joinmode != \"OUTER\" && source.joinmode != \"ANTI\" && source.optimization == 'ix') {\r\n\t\t\t\t\tdata = source.ix[ source.onleftfn(scope, query.params, alasql) ] || [];\r\n\t\t\t\t\topt = true;\r\n\n\t\t\t\t}\r\n\t\t\t}\r\n\n\t\t\t// Main cycle\r\n\t\t\tvar i = 0;\r\n\t\t\tif(typeof data == 'undefined') {\r\n\t\t\t\tthrow new Error('Data source number '+h+' in undefined')\r\n\t\t\t}\r\n\t\t\tvar ilen=data.length;\r\n\t\t\tvar dataw;\r\n\n\t\t\twhile((dataw = data[i]) || (!opt && (source.getfn && (dataw = source.getfn(i)))) || (i<ilen) ) {\r\n\t\t\t\tif(!opt && source.getfn && !source.dontcache) data[i] = dataw;\r\n\n\t\t\t\tscope[tableid] = dataw;\r\n\t\t\t\t// Reduce with ON and USING clause\r\n\t\t\t\tif(!source.onleftfn || (source.onleftfn(scope, query.params, alasql) == source.onrightfn(scope, query.params, alasql))) {\r\n\t\t\t\t\t// For all non-standard JOINs like a-b=0\r\n\t\t\t\t\tif(source.onmiddlefn(scope, query.params, alasql)) {\r\n\t\t\t\t\t\t// Recursively call new join\r\n\n\t\t\t\t\t\tif(source.joinmode != \"SEMI\" && source.joinmode != \"ANTI\") { \r\n\n\t\t\t\t\t\t\tdoJoin(query, scope, h+1);\r\n\t\t\t\t\t\t}\r\n\n\t\t\t\t\t\t// if(source.data[i].f = 200) debugger;\r\n\n\t\t\t\t\t\tif(source.joinmode != \"LEFT\" && source.joinmode != \"INNER\") {\r\n\t\t\t\t\t\t\tdataw._rightjoin = true;\r\n\t\t\t\t\t\t}\r\n\n\t\t\t\t\t\t// for LEFT JOIN\r\n\t\t\t\t\t\tpass = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\ti++;\r\n\t\t\t};\r\n\n\t\t\t// Additional join for LEFT JOINS\r\n\t\t\tif((source.joinmode == 'LEFT' || source.joinmode == 'OUTER' || source.joinmode == 'SEMI' ) && !pass) {\r\n\t\t\t// Clear the scope after the loop\r\n\t\t\t\tscope[tableid] = {};\r\n\t\t\t\tdoJoin(query,scope,h+1);\r\n\t\t\t}\t\r\n\n\t\t}\r\n\n\t\t// When there is no records\r\n\n// STEP 2\r\n\n\t\tif(h+1 < query.sources.length) {\r\n\n\t\t\tif(nextsource.joinmode == \"OUTER\" || nextsource.joinmode == \"RIGHT\" \r\n\t\t\t\t|| nextsource.joinmode == \"ANTI\") {\r\n\n\t\t\t\tscope[source.alias] = {};\r\n\n\t\t\t\tvar j = 0;\r\n\t\t\t\tvar jlen = nextsource.data.length;\r\n\t\t\t\tvar dataw;\r\n\n\t\t\t\twhile((dataw = nextsource.data[j]) || (nextsource.getfn && (dataw = nextsource.getfn(j))) || (j<jlen)) {\r\n\t\t\t\t\tif(nextsource.getfn && !nextsource.dontcache) {\r\n\t\t\t\t\t\tnextsource.data[j] = dataw;\r\n\t\t\t\t\t}\r\n\n\t\t\t\t\tif(dataw._rightjoin) {\r\n\t\t\t\t\t\tdelete dataw._rightjoin;\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\n\t\t\t\t\t\tif(h==0) {\r\n\t\t\t\t\t\t\tscope[nextsource.alias] = dataw;\r\n\t\t\t\t\t\t\tdoJoin(query, scope, h+2);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//scope[nextsource.alias] = dataw;\r\n\t\t\t\t\t\t\t//doJoin(query, scope, h+2);\r\n\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}\r\n\n\t\t\t} else {\r\n\n\t\t\t};\r\n\t\t} else {\r\n\n\t\t};\r\n\n\t\tscope[tableid] = undefined;\r\n\n\t}\r\n\n};\r\n\nfunction swapSources(query, h) {\r\n\tvar source = query.sources[h];\r\n\tvar nextsource = query.sources[h+1];\r\n\n\tvar onleftfn = source.onleftfn;\r\n\tvar onleftfns = source.onleftfns;\r\n\tvar onrightfn = source.onrightfn;\r\n\tvar onrightfns = source.onrightfns;\r\n\tvar optimization = source.optimization;\r\n\n\tsource.onleftfn = nextsource.onrightfn;\r\n\tsource.onleftfns = nextsource.onrightfns;\r\n\tsource.onrightfn = nextsource.onleftfn;\r\n\tsource.onrightfns = nextsource.onleftfns;\r\n\tsource.optimization = nextsource.optimization;\r\n\n\tnextsource.onleftfn = onleftfn;\r\n\tnextsource.onleftfns = onleftfns;\r\n\tnextsource.onrightfn = onrightfn;\r\n\tnextsource.onrightfns = onrightfns;\r\n\tnextsource.optimization = optimization;\r\n\n\tquery.sources[h] = nextsource;\r\n\tquery.sources[h+1] = source;\r\n}\r\n\n/*\r\n//\r\n// Select run-time part for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n//\r\n// Main part of SELECT procedure\r\n//\r\n\nyy.Select = function (params) { return yy.extend(this, params); }\r\nyy.Select.prototype.toString = function() {\r\n\tvar s;\r\n\ts = '';\r\n\tif (this.explain) {\r\n\t\ts += 'EXPLAIN ';\r\n\t}\r\n\ts += 'SELECT ';\r\n\tif (this.modifier) {\r\n\t\ts += this.modifier + ' ';\r\n\t}\r\n\tif (this.distinct) {\r\n\t\ts += 'DISTINCT ';\r\n\t}\r\n\tif (this.top) {\r\n\t\ts += 'TOP ' + this.top.value + ' ';\r\n\t\tif (this.percent) {\r\n\t\t\ts += 'PERCENT ';\r\n\t\t}\r\n\t}\r\n\ts += this.columns.map(function(col) {\r\n\t\tvar s;\r\n\t\ts = col.toString();\r\n\t\tif (typeof col.as !== 'undefined') {\r\n\t\t\ts += ' AS ' + col.as;\r\n\t\t}\r\n\t\treturn s;\r\n\t}).join(', ');\r\n\tif (this.from) {\r\n\t\ts += ' FROM ' + this.from.map(function(f) {\r\n\t\t\tvar ss;\r\n\t\t\tss = f.toString();\r\n\t\t\tif (f.as) {\r\n\t\t\t\tss += ' AS ' + f.as;\r\n\t\t\t}\r\n\t\t\treturn ss;\r\n\t\t}).join(',');\r\n\t}\r\n\tif (this.joins) {\r\n\t\ts += this.joins.map(function(jn) {\r\n\t\t\tvar ss;\r\n\t\t\tss = ' ';\r\n\t\t\tif (jn.joinmode) {\r\n\t\t\t\tss += jn.joinmode + ' ';\r\n\t\t\t}\r\n\t\t\tif (jn.table) {\r\n\t\t\t\tss += 'JOIN ' + jn.table.toString();\r\n\t\t\t} else if (jn.select) {\r\n\t\t\t\tss += 'JOIN (' + jn.select.toString() + ')';\r\n\t\t\t} else if (jn instanceof alasql.yy.Apply) {\r\n\t\t\t\tss += jn.toString();\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error('Wrong type in JOIN mode');\r\n\t\t\t}\r\n\t\t\tif (jn.as) {\r\n\t\t\t\tss += ' AS ' + jn.as;\r\n\t\t\t}\r\n\t\t\tif (jn.using) {\r\n\t\t\t\tss += ' USING ' + jn.using.toString();\r\n\t\t\t}\r\n\t\t\tif (jn.on) {\r\n\t\t\t\tss += ' ON ' + jn.on.toString();\r\n\t\t\t}\r\n\t\t\treturn ss;\r\n\t\t});\r\n\t}\r\n\tif (this.where) {\r\n\t\ts += ' WHERE ' + this.where.toString();\r\n\t}\r\n\tif (this.group && this.group.length > 0) {\r\n\t\ts += ' GROUP BY ' + this.group.map(function(grp) {\r\n\t\t\treturn grp.toString();\r\n\t\t}).join(', ');\r\n\t}\r\n\tif (this.having) {\r\n\t\ts += ' HAVING ' + this.having.toString();\r\n\t}\r\n\tif (this.order && this.order.length > 0) {\r\n\t\ts += ' ORDER BY ' + this.order.map(function(ord) {\r\n\t\t\treturn ord.toString();\r\n\t\t}).join(', ');\r\n\t}\r\n\tif (this.limit) {\r\n\t\ts += ' LIMIT ' + this.limit.value;\r\n\t}\r\n\tif (this.offset) {\r\n\t\ts += ' OFFSET ' + this.offset.value;\r\n\t}\r\n\tif (this.union) {\r\n\t\ts += ' UNION ' + (this.corresponding ? 'CORRESPONDING ' : '') + this.union.toString();\r\n\t}\r\n\tif (this.unionall) {\r\n\t\ts += ' UNION ALL ' + (this.corresponding ? 'CORRESPONDING ' : '') + this.unionall.toString();\r\n\t}\r\n\tif (this.except) {\r\n\t\ts += ' EXCEPT ' + (this.corresponding ? 'CORRESPONDING ' : '') + this.except.toString();\r\n\t}\r\n\tif (this.intersect) {\r\n\t\ts += ' INTERSECT ' + (this.corresponding ? 'CORRESPONDING ' : '') + this.intersect.toString();\r\n\t}\r\n\treturn s;\r\n};\r\n\n/**\r\n Select statement in expression\r\n */\r\nyy.Select.prototype.toJS = function(context) {\r\n\n//\tif(this.expression.reduced) return 'true';\r\n//\treturn this.expression.toJS(context, tableid, defcols);\r\n\n//\tvar s = 'this.queriesdata['+(this.queriesidx-1)+'][0]';\r\n\n\tvar s = 'alasql.utils.flatArray(this.queriesfn['+(this.queriesidx-1)+'](this.params,null,'+context+'))[0]';\r\n\n\treturn s;\r\n};\r\n\n// Compile SELECT statement\r\nyy.Select.prototype.compile = function(databaseid, params) {\r\n\tvar db = alasql.databases[databaseid];\r\n\t// Create variable for query\r\n\tvar query = new Query();\r\n\n\t// Array with columns to be removed\r\n    query.removeKeys = [];\r\n    query.aggrKeys = [];\r\n\n\tquery.explain = this.explain; // Explain\r\n\tquery.explaination = [];\r\n\tquery.explid = 1;\r\n\n\tquery.modifier = this.modifier;\r\n\n\tquery.database = db;\r\n\t// 0. Precompile whereexists\r\n\tthis.compileWhereExists(query);\r\n\n\t// 0. Precompile queries for IN, NOT IN, ANY and ALL operators\r\n\tthis.compileQueries(query);\r\n\n\tquery.defcols = this.compileDefCols(query, databaseid);\r\n\n\t// 1. Compile FROM clause\r\n\tquery.fromfn = this.compileFrom(query);\r\n\n\t// 2. Compile JOIN clauses\r\n\tif(this.joins){\r\n\t\tthis.compileJoins(query);\r\n\t}\r\n\n\t// todo?: 3. Compile SELECT clause\r\n\n\t// For ROWNUM()\r\n\tquery.rownums = [];\r\n\n\tthis.compileSelectGroup0(query);\r\n\n\tif(this.group || query.selectGroup.length>0) {\r\n\t\tquery.selectgfns = this.compileSelectGroup1(query);\r\n\t} else {\r\n\t\tquery.selectfns = this.compileSelect1(query, params);\r\n\t}\r\n\n\t// Remove columns clause\r\n\tthis.compileRemoveColumns(query);\r\n\n\t// 5. Optimize WHERE and JOINS\r\n\tif(this.where){\r\n\t\tthis.compileWhereJoins(query);\r\n\t}\r\n\n\t// 4. Compile WHERE clause\r\n\tquery.wherefn = this.compileWhere(query);\r\n\n\t// 6. Compile GROUP BY\r\n\tif(this.group || query.selectGroup.length>0){\r\n\t\tquery.groupfn = this.compileGroup(query);\r\n\t}\r\n\n\t// 6. Compile HAVING\r\n\tif(this.having){\r\n\t\tquery.havingfn = this.compileHaving(query);\r\n\t}\r\n\n\t// 8. Compile ORDER BY clause\r\n\tif(this.order){\r\n\t\tquery.orderfn = this.compileOrder(query);\r\n\t}\r\n\n\tif(this.group || query.selectGroup.length>0) {\r\n\t\tquery.selectgfn = this.compileSelectGroup2(query);\r\n\t} else {\r\n\t\tquery.selectfn = this.compileSelect2(query);\r\n\t}\r\n\n\t// 7. Compile DISTINCT, LIMIT and OFFSET\r\n\tquery.distinct = this.distinct;\r\n\n\t// 9. Compile PIVOT clause\r\n\tif(this.pivot) query.pivotfn = this.compilePivot(query);\r\n\tif(this.unpivot) query.pivotfn = this.compileUnpivot(query);\r\n\n\t// 10. Compile TOP/LIMIT/OFFSET/FETCH cleuse\r\n\tif(this.top) {\r\n\t\tquery.limit = this.top.value;\r\n\t} else if(this.limit) {\r\n\t\tquery.limit = this.limit.value;\r\n\t\tif(this.offset) {\r\n\t\t\tquery.offset = this.offset.value;\r\n\t\t}\r\n\t}\r\n\n\tquery.percent = this.percent;\r\n\n\t// 9. Compile ordering function for UNION and UNIONALL\r\n\tquery.corresponding = this.corresponding; // If CORRESPONDING flag exists\r\n\tif(this.union) {\r\n\t\tquery.unionfn = this.union.compile(databaseid);\r\n\t\tif(this.union.order) {\r\n\t\t\tquery.orderfn = this.union.compileOrder(query);\r\n\t\t} else {\r\n\t\t\tquery.orderfn = null;\r\n\t\t}\r\n\t} else if(this.unionall) {\r\n\t\tquery.unionallfn = this.unionall.compile(databaseid);\r\n\t\tif(this.unionall.order) {\r\n\t\t\tquery.orderfn = this.unionall.compileOrder(query);\r\n\t\t} else {\r\n\t\t\tquery.orderfn = null;\r\n\t\t}\r\n\t} else if(this.except) {\r\n\t\tquery.exceptfn = this.except.compile(databaseid);\r\n\t\tif(this.except.order) {\r\n\t\t\tquery.orderfn = this.except.compileOrder(query);\r\n\t\t} else {\r\n\t\t\tquery.orderfn = null;\r\n\t\t}\r\n\t} else if(this.intersect) {\r\n\t\tquery.intersectfn = this.intersect.compile(databaseid);\r\n\t\tif(this.intersect.order) {\r\n\t\t\tquery.intersectfn = this.intersect.compileOrder(query);\r\n\t\t} else {\r\n\t\t\tquery.orderfn = null;\r\n\t\t}\r\n\t}\r\n\n\t// SELECT INTO\r\n\tif(this.into) {\r\n\t\tif(this.into instanceof yy.Table) {\r\n\t\t\t//\r\n\t\t\t// Save into the table in database\r\n\t\t\t//\r\n\t\t\tif(alasql.options.autocommit && alasql.databases[this.into.databaseid||databaseid].engineid) {\r\n\t\t\t\t// For external database when AUTOCOMMIT is ONs\r\n\t\t\t\tquery.intoallfns = 'return alasql.engines[\"'+alasql.databases[this.into.databaseid||databaseid].engineid+'\"]'+\r\n\t\t\t\t\t'.intoTable(\"'+(this.into.databaseid||databaseid)+'\",\"'+this.into.tableid+'\",this.data, columns, cb);';\r\n\t\t\t} else {\r\n\t\t\t\t// Into AlaSQL tables\r\n\t\t\t\tquery.intofns = \r\n\t\t\t\t'alasql.databases[\\''+(this.into.databaseid||databaseid)+'\\'].tables'+\r\n\t\t\t\t'[\\''+this.into.tableid+'\\'].data.push(r);';\r\n\t\t\t}\r\n\t\t} else if(this.into instanceof yy.VarValue) {\r\n\t\t\t//\r\n\t\t\t// Save into local variable\r\n\t\t\t// SELECT * INTO @VAR1 FROM ?\r\n\t\t\t//\r\n\t\t\tquery.intoallfns = 'alasql.vars[\"'+this.into.variable+'\"]=this.data;res=this.data.length;if(cb)res=cb(res);return res;';\r\n\t\t} else if (this.into instanceof yy.FuncValue) {\r\n\t\t\t//\r\n\t\t\t// If this is INTO() function, then call it\r\n\t\t\t// with one or two parameters\r\n\t\t\t//\r\n\t\t\tvar qs = 'return alasql.into[\\''+this.into.funcid.toUpperCase()+'\\'](';\r\n\t\t\tif(this.into.args && this.into.args.length>0 ) {\r\n\t\t\t\tqs += this.into.args[0].toJS()+',';\r\n\t\t\t\tif(this.into.args.length > 1) {\r\n\t\t\t\t\tqs += this.into.args[1].toJS()+',';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tqs += 'undefined,';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tqs += 'undefined, undefined,'\r\n\t\t\t}\r\n\t\t\tquery.intoallfns = qs+'this.data,columns,cb)';\r\n\n\t\t} else if (this.into instanceof yy.ParamValue) {\r\n\t\t\t//\r\n\t\t\t// Save data into parameters array\r\n\t\t\t// like alasql('SELECT * INTO ? FROM ?',[outdata,srcdata]);\r\n\t\t\t//\r\n\t\t\tquery.intofns = \"params['\"+this.into.param+\"'].push(r)\";\r\n\t\t}\r\n\n\t\tif(query.intofns) {\r\n\t\t\t// Create intofn function\r\n\t\t\tquery.intofn = new Function(\"r,i,params,alasql\",'var y;'+query.intofns); \r\n\t\t} else if(query.intoallfns) {\r\n\t\t\t// Create intoallfn function\r\n\t\t\tquery.intoallfn = new Function(\"columns,cb,params,alasql\",'var y;'+query.intoallfns); \r\n\t\t}\r\n\n\t}\r\n\n\t// Now, compile all togeather into one function with query object in scope\r\n\tvar statement = function(params, cb, oldscope) {\r\n\t\tquery.params = params;\r\n\t\tvar res1 = queryfn(query,oldscope,function(res){\r\n\n\t\t\tif(query.rownums.length>0) {\r\n\t\t\t\tfor(var i=0,ilen=res.length;i<ilen;i++) {\r\n\t\t\t\t\tfor(var j=0,jlen=query.rownums.length;j<jlen;j++) {\r\n\t\t\t\t\t\tres[i][query.rownums[j]] = i+1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\n\t\t\tvar res2 = modify(query, res);\r\n\n\t\t\tif(cb){\r\n\t\t\t\tcb(res2);\r\n\t\t\t}\r\n\n\t\t\treturn res2;\r\n\n\t\t}); \r\n\n\t\treturn res1;\r\n\n\t};\r\n\n//\tstatement.dbversion = ;\r\n\n\tstatement.query = query;\r\n\treturn statement;\r\n};\r\n\n/**\r\n\tModify res according modifier\r\n\t@function\r\n\t@param {object} query Query object\r\n\t@param res {object|number|string|boolean} res Data to be converted \r\n*/\r\nfunction modify(query, res) { // jshint ignore:line\r\n\n\t/* If source is a primitive value then return it */\r\n\tif(\t\ttypeof res === 'undefined' \r\n\t\t|| \ttypeof res === 'number' \r\n\t\t|| \ttypeof res === 'string' \r\n\t\t|| \ttypeof res == 'boolean'\r\n\t){\r\n\t\treturn res;\r\n\t}\r\n\n\tvar modifier = query.modifier || alasql.options.modifier;\r\n\tvar columns = query.columns;\r\n\tif(typeof columns === 'undefined' || columns.length == 0) {\r\n\t\t// Try to create columns\r\n\t\tif(res.length > 0) {\r\n\t\t\tvar allcol = {};\r\n\t\t\tfor(var i=Math.min(res.length,alasql.options.columnlookup||10)-1;0<=i;i--) {\r\n\t\t\t\tfor(var key in res[i]) {\r\n\t\t\t\t\tallcol[key] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\n\t\t\tcolumns = Object.keys(allcol).map(function(columnid){\r\n\t\t\t\treturn {columnid:columnid};\r\n\t\t\t});\t\t\t\r\n\t\t} else {\r\n\t\t\t// Cannot recognize columns\r\n\t\t\tcolumns = [];\r\n\t\t}\r\n\t}\r\n\n\tif(modifier === 'VALUE') {\r\n\n\t\tif(res.length > 0) {\r\n\t\t\tvar key;\r\n\t\t\tif(columns && columns.length > 0){\r\n\t\t\t\tkey = columns[0].columnid;\r\n\t\t\t} else {\r\n\t\t\t\tkey = Object.keys(res[0])[0];\r\n\t\t\t}\r\n\t\t\tres = res[0][key];\r\n\t\t} else {\r\n\t\t\tres = undefined;\r\n\t\t}\r\n\t} else if(modifier === 'ROW') {\r\n\t\tif(res.length > 0) {\r\n\t\t\tvar key;\r\n\t\t\tvar a = [];\r\n\t\t\tfor(var key in res[0]) {\r\n\t\t\t\ta.push(res[0][key]);\r\n\t\t\t}\r\n\t\t\tres = a;\r\n\t\t} else {\r\n\t\t\tres = undefined;\r\n\t\t}\r\n\t} else if(modifier === 'COLUMN') {\r\n\t\tvar ar = [];\r\n\t\tif(res.length > 0) {\r\n\t\t\tvar key;\r\n\t\t\tif(columns && columns.length > 0){\r\n\t\t\t\tkey = columns[0].columnid;\r\n\t\t\t} else {\r\n\t\t\t\tkey = Object.keys(res[0])[0];\r\n\t\t\t}\r\n\n\t\t\tfor(var i=0, ilen=res.length; i<ilen; i++){\r\n\t\t\t\tar.push(res[i][key]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tres = ar;\r\n\t} else if(modifier === 'MATRIX') {\r\n\t\t// Returns square matrix of rows\r\n\t\tvar ar = [];\r\n\t\tfor(var i=0;i<res.length;i++) {\t\t\r\n\t\t\tvar a = [];\r\n\t\t\tvar r = res[i];\r\n\t\t\tfor(var j=0;j<columns.length;j++) {\r\n\t\t\t\ta.push(r[columns[j].columnid]);\r\n\t\t\t}\r\n\t\t\tar.push(a);\r\n\t\t}\r\n\t\tres = ar;\r\n\n\t}else if(modifier === 'INDEX') {\r\n\t\tvar ar = {};\r\n\t\tvar key,val;\r\n\t\tif(columns && columns.length > 0) {\r\n\t\t\tkey = columns[0].columnid;\r\n\t\t\tval = columns[1].columnid;\r\n\t\t} else {\r\n\t\t\tvar okeys = Object.keys(res[0]);\r\n\t\t\tkey = okeys[0];\r\n\t\t\tval = okeys[1];\r\n\t\t}\r\n\t\tfor(var i=0, ilen=res.length; i<ilen; i++){\r\n\t\t\tar[res[i][key]] = res[i][val];\r\n\t\t}\r\n\t\tres = ar;\r\n\n\t}else if(modifier === 'RECORDSET') {\r\n\t\tres = new alasql.Recordset({columns:columns, data:res});\r\n\n\t}else if(modifier === 'TEXTSTRING') {\r\n\t\tvar key;\r\n\t\tif(columns && columns.length > 0){\r\n\t\t\tkey = columns[0].columnid;\r\n\t\t} else{\r\n\t\t\tkey = Object.keys(res[0])[0];\r\n\t\t}\r\n\n\t\tfor(var i=0, ilen=res.length; i<ilen; i++){\r\n\t\t\tres[i] = res[i][key];\r\n\t\t}\r\n\t\tres = res.join('\\n');\r\n\n\t}\r\n\treturn res;\r\n}\r\n\nyy.Select.prototype.execute = function (databaseid, params, cb) {\r\n\treturn this.compile(databaseid)(params,cb);\r\n//\tthrow new Error('Insert statement is should be compiled')\r\n}\r\n\n/*\r\n//\r\n// EXISTS and other subqueries functions  functions for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.ExistsValue = function(params) { return yy.extend(this, params); }\r\nyy.ExistsValue.prototype.toString = function() {\r\n\treturn 'EXISTS('+this.value.toString()+')';\r\n};\r\n\nyy.ExistsValue.prototype.toType = function() {\r\n\treturn 'boolean';\r\n};\r\n\nyy.ExistsValue.prototype.toJS = function(context,tableid,defcols) {\r\n\n\treturn 'this.existsfn['+this.existsidx+'](params,null,'+context+').data.length';\r\n};\r\n\nyy.Select.prototype.compileWhereExists = function(query) {\r\n\tif(!this.exists) return;\r\n\tquery.existsfn = this.exists.map(function(ex) {\r\n\t\tvar nq = ex.compile(query.database.databaseid);\r\n\n\t\t nq.query.modifier = 'RECORDSET';\r\n\t\t return nq;\r\n\t});\r\n};\r\n\nyy.Select.prototype.compileQueries = function(query) {\r\n\tif(!this.queries) return;\r\n\tquery.queriesfn = this.queries.map(function(q) {\r\n\t\t var nq = q.compile(query.database.databaseid);\r\n\n//\tif(!nq.query) nq.query = {};\r\n\t\t nq.query.modifier = 'RECORDSET';\r\n\n\t\t return nq;\r\n\t});\r\n};\r\n\n//\r\n// Prepare subqueries and exists\r\n//\r\nalasql.precompile = function(statement,databaseid,params){\r\n\n\tif(!statement) return;\r\n\tstatement.params = params;\r\n\tif(statement.queries) {\t\r\n\n\t\tstatement.queriesfn = statement.queries.map(function(q) {\r\n\t\t\tvar nq = q.compile(databaseid || statement.database.databaseid);\r\n\n\t\t nq.query.modifier = 'RECORDSET';\r\n\t\t\t return nq;\r\n\n\t\t});\r\n\t}\r\n\tif(statement.exists) {\r\n\n\t\tstatement.existsfn = statement.exists.map(function(ex) {\r\n\t\t\tvar nq = ex.compile(databaseid || statement.database.databaseid);\r\n\n\t\t nq.query.modifier = 'RECORDSET';\r\n\t\t\t return nq;\r\n\n\t\t});\r\n\t};\r\n}\n/*\r\n//\r\n// Select compiler part for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.Select.prototype.compileFrom = function(query) {\r\n\n\tvar self = this;\r\n\tquery.sources = [];\r\n//\tvar tableid = this.from[0].tableid;\r\n//\tvar as = '';\r\n//\tif(self.from[0].as) as = this.from[0].as;\r\n\n\tquery.aliases = {};\r\n\tif(!self.from) return;\r\n\n\tself.from.forEach(function(tq){\r\n\n\t\tvar alias = tq.as || tq.tableid;\r\n\n\t\tif(tq instanceof yy.Table) {\r\n\n\t\t\tquery.aliases[alias] = {tableid: tq.tableid, databaseid: tq.databaseid || query.database.databaseid, type:'table'};\r\n\t\t} else if(tq instanceof yy.Select) {\r\n\t\t\tquery.aliases[alias] = {type:'subquery'};\r\n\t\t} else if(tq instanceof yy.Search) {\r\n\t\t\tquery.aliases[alias] = {type:'subsearch'};\r\n\t\t} else if(tq instanceof yy.ParamValue) {\r\n\t\t\tquery.aliases[alias] = {type:'paramvalue'};\r\n\t\t} else if(tq instanceof yy.FuncValue) {\r\n\t\t\tquery.aliases[alias] = {type:'funcvalue'};\r\n\t\t} else if(tq instanceof yy.VarValue) {\r\n\t\t\tquery.aliases[alias] = {type:'varvalue'};\r\n\t\t} else if(tq instanceof yy.FromData) {\r\n\t\t\tquery.aliases[alias] = {type:'fromdata'};\r\n\t\t} else if(tq instanceof yy.Json) {\r\n\t\t\tquery.aliases[alias] = {type:'json'};\r\n\t\t} else if(tq.inserted) {\r\n\t\t\tquery.aliases[alias] = {type:'inserted'};\r\n\t\t} else {\r\n\t\t\tthrow new Error('Wrong table at FROM');\r\n\t\t}\r\n\n\t\tvar source = {\r\n\t\t\talias: alias,\r\n\t\t\tdatabaseid: tq.databaseid || query.database.databaseid,\r\n\t\t\ttableid: tq.tableid,\r\n\t\t\tjoinmode: 'INNER',\r\n\t\t\tonmiddlefn: returnTrue,\t\t\t\r\n\t\t\tsrcwherefns: '',\t// for optimization\r\n\t\t\tsrcwherefn: returnTrue,\r\n\n\t\t};\r\n\n\t    if(tq instanceof yy.Table) {\r\n\t\t// Get columns from table\r\n\t\t\tsource.columns = alasql.databases[source.databaseid].tables[source.tableid].columns;\r\n\n\t\tif(alasql.options.autocommit && alasql.databases[source.databaseid].engineid &&\r\n\t\t   !alasql.databases[source.databaseid].tables[source.tableid].view\r\n\t\t  ) {\r\n\n// TODO -- make view for external engine\r\n\t\t    source.datafn = function(query,params,cb,idx, alasql) {\r\n\t\t\t\t\treturn alasql.engines[alasql.databases[source.databaseid].engineid].fromTable(\r\n\t\t\t\t\t\tsource.databaseid, source.tableid,cb,idx,query);\r\n\t\t\t\t}\t\t\t\t\r\n\t    } else if(alasql.databases[source.databaseid].tables[source.tableid].view){\r\n\t\t    source.datafn = function(query,params,cb,idx, alasql) {\r\n\t\t\tvar res = alasql.databases[source.databaseid].tables[source.tableid].select(params);\r\n\t\t\tif(cb) res = cb(res,idx,query);\r\n\t\t\treturn res;\r\n\t\t    }\r\n\t\t\t} else {\r\n\n\t\t\t\tsource.datafn = function(query,params,cb,idx, alasql) {\r\n/*\r\n\n*/\r\n\t\t\t\t\tvar res = alasql.databases[source.databaseid].tables[source.tableid].data;\r\n\n\t\t\t\t\tif(cb) res = cb(res,idx,query);\r\n\n\t\t\t\t\treturn res;\r\n\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t} else if(tq instanceof yy.Select) {\r\n\n\t\t\tsource.subquery = tq.compile(query.database.databaseid);\r\n\t\t\tif(typeof source.subquery.query.modifier == 'undefined') {\r\n\t\t\t\tsource.subquery.query.modifier = 'RECORDSET'; // Subqueries always return recordsets\r\n\t\t\t}\r\n\t\t\tsource.columns = source.subquery.query.columns;\r\n\n\t\t\tsource.datafn = function(query, params, cb, idx, alasql) {\r\n\n\t\t\t\tvar res;\r\n\t\t\t\tsource.subquery(query.params, function(data){\r\n\t\t\t\t\tres = data.data;\r\n\t\t\t\t\tif(cb) res = cb(res,idx,query);\r\n\t\t\t\t\treturn res;\r\n\n\t\t\t\t});\r\n\n\t\t\t\treturn res;\r\n\t\t\t}\t\t\t\t\t\t\r\n\t\t} else if(tq instanceof yy.Search) {\r\n\n\t\t\t source.subsearch = tq;\r\n\t\t\t source.columns = [];\r\n\n\t\t\tsource.datafn = function(query, params, cb, idx, alasql) {\r\n\n\t\t\t\tvar res;\r\n\t\t\t\tsource.subsearch.execute(query.database.databaseid,query.params,function(data){\r\n\t\t\t\t\tres = data;\r\n\t\t\t\t\tif(cb) res = cb(res,idx,query);\r\n\t\t\t\t\treturn res;\r\n\n\t\t\t\t});\r\n\n\t\t\t\treturn res;\r\n\t\t\t}\t\t\t\t\t\t\r\n\t\t} else if(tq instanceof yy.ParamValue) {\r\n\n\t\t\tvar ps = \"var res = alasql.prepareFromData(params['\"+tq.param+\"']\";\r\n\n\t\t\tif(tq.array) ps+=\",true\";\r\n\t\t\tps += \");if(cb)res=cb(res,idx,query);return res\"\r\n\t\t\tsource.datafn = new Function('query,params,cb,idx,alasql',ps);\r\n\n\t\t} else if(tq.inserted) {\r\n\t\t\tvar ps = \"var res = alasql.prepareFromData(alasql.inserted\";\r\n\t\t\tif(tq.array) ps+=\",true\";\r\n\t\t\tps += \");if(cb)res=cb(res,idx,query);return res\"\r\n\t\t\tsource.datafn = new Function('query,params,cb,idx,alasql',ps);\r\n\t\t} else if(tq instanceof yy.Json) {\r\n\t\t\tvar ps = \"var res = alasql.prepareFromData(\"+tq.toJS();\r\n\n\t\t\tif(tq.array) ps+=\",true\";\r\n\t\t\tps += \");if(cb)res=cb(res,idx,query);return res\"\r\n\t\t\tsource.datafn = new Function('query,params,cb,idx,alasql',ps);\r\n\t\t} else if(tq instanceof yy.VarValue) {\r\n\t\t\tvar ps = \"var res = alasql.prepareFromData(alasql.vars['\"+tq.variable+\"']\";\r\n\n\t\t\tif(tq.array) ps+=\",true\";\r\n\t\t\tps += \");if(cb)res=cb(res,idx,query);return res\"\r\n\t\t\tsource.datafn = new Function('query,params,cb,idx,alasql',ps);\r\n\t\t} else if(tq instanceof yy.FuncValue) {\r\n\t\t\tvar s = \"var res=alasql.from['\"+tq.funcid.toUpperCase()+\"'](\";\r\n\n\t\t\tif(tq.args && tq.args.length>0) {\r\n\t\t\t\tif(tq.args[0]) {\r\n\t\t\t\t\ts += tq.args[0].toJS('query.oldscope')+',';\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts += 'null,';\r\n\t\t\t\t};\r\n\t\t\t\tif(tq.args[1]) {\r\n\t\t\t\t\ts += tq.args[1].toJS('query.oldscope')+',';\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts += 'null,';\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\ts += 'null,null,'\r\n\t\t\t}\r\n\t\t\ts += 'cb,idx,query';\r\n\t\t\ts += ');/*if(cb)res=cb(res,idx,query);*/return res';\r\n\n\t\t\tsource.datafn = new Function('query, params, cb, idx, alasql',s);\r\n\n\t\t} else if(tq instanceof yy.FromData) {\r\n\t\t\t\tsource.datafn = function(query,params,cb,idx, alasql) {\r\n\t\t\t\t\tvar res = tq.data;\r\n\t\t\t\t\tif(cb) res = cb(res,idx,query);\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t} else {\r\n\t\t\tthrow new Error('Wrong table at FROM');\r\n\t\t}\r\n\n\t\tquery.sources.push(source);\r\n\n\t});\r\n\t// TODO Add joins\r\n\tquery.defaultTableid = query.sources[0].alias;\r\n\n};\r\n\nalasql.prepareFromData = function(data,array) {\r\n\n\tvar res = data;\r\n\tif(typeof data == \"string\") {\r\n\t\tres = data.split(/\\r?\\n/);\r\n\t\tif(array) {\r\n\t\t\tfor(var i=0, ilen=res.length; i<ilen;i++) {\r\n\t\t\t\tres[i] = [res[i]];\r\n\t\t\t}\r\n\t\t}\r\n\t} else if(array) {\r\n\t\tres = [];\r\n\t\tfor(var i=0, ilen=data.length; i<ilen;i++) {\r\n\t\t\tres.push([data[i]]);\r\n\t\t}\r\n\n\t} else if(typeof data == 'object' && !(Array.isArray(data) )) {\r\n//\t} else if(typeof data == 'object' && !(typeof data.length == 'undefined')) {\r\n\t\tif(typeof Mongo != 'undefined' && typeof Mongo.Collection != 'undefined'\r\n\t\t\t&& data instanceof Mongo.Collection) {\r\n\t\t\tres = data.find().fetch();\r\n\t\t} else {\r\n\t\t\tres = [];\r\n\t\t\tfor(var key in data) {\r\n\t\t\t\tif(data.hasOwnProperty(key)) res.push([key,data[key]]);\r\n\t\t\t};\t\t\t\r\n\t\t}\r\n\n\t};\r\n\n\treturn res;\r\n};\r\n\n/*\r\n//\r\n// Select compiler part for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n// SELECT Compile functions\r\n\n// Compile JOIN caluese\r\nyy.Select.prototype.compileJoins = function(query) {\r\n\n//\tdebugger;\r\n\tvar self = this;\r\n\n\tthis.joins.forEach(function(jn){\r\n\n\t\t// Test CROSS-JOIN\r\n\t\tif(jn.joinmode == \"CROSS\") {\r\n\t\t\tif(jn.using || jn.on) {\r\n\t\t\t\tthrow new Error('CROSS JOIN cannot have USING or ON clauses');\r\n\t\t\t} else {\r\n\t\t\t\tjn.joinmode == \"INNER\";\r\n\t\t\t}\r\n\t\t}\r\n\n\t\tvar source;\r\n\t\tvar tq;\r\n\n\t\tif(jn instanceof yy.Apply) {\r\n\n\t\t\tsource = {\r\n\t\t\t\talias: jn.as,\r\n\t\t\t\tapplymode: jn.applymode,\r\n\t\t\t\tonmiddlefn: returnTrue,\r\n\t\t\t\tsrcwherefns: '',\t// for optimization\r\n\t\t\t\tsrcwherefn: returnTrue,\r\n\t\t\t\tcolumns: [] // TODO check this\r\n\t\t\t};\r\n\t\t\tsource.applyselect = jn.select.compile(query.database.databaseid);\r\n\t\t\tsource.columns = source.applyselect.query.columns;\r\n\n\t\t\tsource.datafn = function(query,params,cb,idx, alasql) {\r\n\t\t\t\tvar res;\r\n\t\t\t\tif(cb) res = cb(res,idx,query);\r\n\t\t\t\treturn res;\r\n\t\t\t}\r\n\n\t\t\tquery.sources.push(source);\r\n\t\t} else {\r\n\n\t\tif(jn.table) {\r\n\t\t\ttq = jn.table;\r\n\t\t\tsource = {\r\n\t\t\t\talias: jn.as||tq.tableid,\r\n\t\t\t\tdatabaseid: tq.databaseid || query.database.databaseid,\r\n\t\t\t\ttableid: tq.tableid,\r\n\t\t\t\tjoinmode: jn.joinmode,\r\n\t\t\t\tonmiddlefn: returnTrue,\r\n\t\t\t\tsrcwherefns: '',\t// for optimization\r\n\t\t\t\tsrcwherefn: returnTrue,\r\n\t\t\t\tcolumns: []\t\t\t\t\r\n\t\t\t};\r\n\t\t\t//\r\n\n\t\t\tif(!alasql.databases[source.databaseid].tables[source.tableid]) {\r\n\t\t\t\tthrow new Error('Table \\''+source.tableid+\r\n\t\t\t\t'\\' is not exists in database \\''+source.databaseid)+'\\'';\r\n\t\t\t};\r\n\n\t\t\tsource.columns = alasql.databases[source.databaseid].tables[source.tableid].columns;\r\n\n\t\t\t// source.data = query.database.tables[source.tableid].data;\r\n\t\t\tif(alasql.options.autocommit && alasql.databases[source.databaseid].engineid) {\r\n\n\t\t\t\tsource.datafn = function(query,params, cb, idx, alasql) {\r\n\n\t\t\t\t\treturn alasql.engines[alasql.databases[source.databaseid].engineid].fromTable(\r\n\t\t\t\t\t\tsource.databaseid, source.tableid, cb, idx,query);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else if(alasql.databases[source.databaseid].tables[source.tableid].view){\r\n\t\t\t\tsource.datafn = function(query,params,cb,idx, alasql) {\r\n\t\t\t\t\tvar res = alasql.databases[source.databaseid].tables[source.tableid].select(params);\r\n\t\t\t\t\tif(cb) res = cb(res,idx,query);\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tsource.datafn = function(query,params,cb, idx, alasql) {\r\n\t\t\t\t\tvar res = alasql.databases[source.databaseid].tables[source.tableid].data;\r\n\t\t\t\t\tif(cb) res = cb(res,idx,query);\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\n\t\t\tquery.aliases[source.alias] = {tableid: tq.tableid, databaseid: tq.databaseid || query.database.databaseid};\r\n\n\t\t} else if(jn.select) {\r\n\t\t\tvar tq = jn.select;\r\n\t\t\tsource = {\r\n\t\t\t\talias: jn.as,\r\n\n\t\t\t\tjoinmode: jn.joinmode,\r\n\t\t\t\tonmiddlefn: returnTrue,\r\n\t\t\t\tsrcwherefns: '',\t// for optimization\r\n\t\t\t\tsrcwherefn: returnTrue,\r\n\t\t\t\tcolumns: []\r\n\t\t\t};\r\n\n\t\t\tsource.subquery = tq.compile(query.database.databaseid);\r\n\t\t\tif(typeof source.subquery.query.modifier == 'undefined') {\r\n\t\t\t\tsource.subquery.query.modifier = 'RECORDSET'; // Subqueries always return recordsets\r\n\t\t\t}\r\n\t\t\tsource.columns = source.subquery.query.columns;\r\n\n\t\t\t\tsource.datafn = function(query, params, cb, idx, alasql) {\r\n\n\t\t\t\t\treturn source.subquery(query.params, null, cb, idx).data;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t// } else {\r\n\t\t\t// \tsource.datafn = function(query, params, cb, idx, alasql) {\r\n\t\t\t// \t\treturn source.subquery(query.params, null, cb, idx);\r\n\t\t\t// \t}\t\t\t\t\r\n\t\t\t// }\r\n\t\t\tquery.aliases[source.alias] = {type:'subquery'};\r\n\t\t} else if(jn.param) {\r\n\t\t\tsource = {\r\n\t\t\t\talias: jn.as,\r\n\n\t\t\t\tjoinmode: jn.joinmode,\r\n\t\t\t\tonmiddlefn: returnTrue,\r\n\t\t\t\tsrcwherefns: '',\t// for optimization\r\n\t\t\t\tsrcwherefn: returnTrue\r\n\t\t\t};\r\n\t\t\t// source.data = ;\r\n\t\t\tvar jnparam = jn.param.param;\r\n\n\t\t\tvar ps = \"var res=alasql.prepareFromData(params['\"+jnparam+\"']\";\r\n\t\t\tif(jn.array) ps += \",true\";\r\n\t\t\tps += \");if(cb)res=cb(res, idx, query);return res\";\r\n\n\t\t\tsource.datafn = new Function('query,params,cb,idx, alasql',ps);\r\n\t\t\tquery.aliases[source.alias] = {type:'paramvalue'};\r\n\t\t} else if(jn.variable) {\r\n\t\t\tsource = {\r\n\t\t\t\talias: jn.as,\r\n\n\t\t\t\tjoinmode: jn.joinmode,\r\n\t\t\t\tonmiddlefn: returnTrue,\r\n\t\t\t\tsrcwherefns: '',\t// for optimization\r\n\t\t\t\tsrcwherefn: returnTrue\r\n\t\t\t};\r\n\t\t\t// source.data = ;\r\n\n\t\t\tvar ps = \"var res=alasql.prepareFromData(alasql.vars['\"+jn.variable+\"']\";\r\n\t\t\tif(jn.array) ps += \",true\";\r\n\t\t\tps += \");if(cb)res=cb(res, idx, query);return res\";\r\n\n\t\t\tsource.datafn = new Function('query,params,cb,idx, alasql',ps);\r\n\t\t\tquery.aliases[source.alias] = {type:'varvalue'};\r\n\t\t} else if(jn.funcid) {\r\n\t\t\tsource = {\r\n\t\t\t\talias: jn.as,\r\n\n\t\t\t\tjoinmode: jn.joinmode,\r\n\t\t\t\tonmiddlefn: returnTrue,\r\n\t\t\t\tsrcwherefns: '',\t// for optimization\r\n\t\t\t\tsrcwherefn: returnTrue\r\n\t\t\t};\r\n\t\t\t// source.data = ;\r\n\n\t\t\tvar s = \"var res=alasql.from['\"+js.funcid.toUpperCase()+\"'](\";\r\n\n\t\t\tif(jn.args && jn.args.length>0) {\r\n\t\t\t\tif(jn.args[0]) {\r\n\t\t\t\t\ts += jn.args[0].toJS('query.oldscope')+',';\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts += 'null,';\r\n\t\t\t\t};\r\n\t\t\t\tif(jn.args[1]) {\r\n\t\t\t\t\ts += jn.args[1].toJS('query.oldscope')+',';\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts += 'null,';\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\ts += 'null,null,'\r\n\t\t\t}\r\n\t\t\ts += 'cb,idx,query';\r\n\t\t\ts += ');/*if(cb)res=cb(res,idx,query);*/return res';\r\n\n\t\t\tsource.datafn = new Function('query, params, cb, idx, alasql',s);\r\n\n\t\t\tquery.aliases[source.alias] = {type:'funcvalue'};\r\n\t\t}\r\n\n\t\tvar alias = source.alias;\r\n\n\t\t// Test NATURAL-JOIN\r\n\t\tif(jn.natural) {\r\n\t\t\tif(jn.using || jn.on) {\r\n\t\t\t\tthrow new Error('NATURAL JOIN cannot have USING or ON clauses');\r\n\t\t\t} else {\r\n\n\t\t\t\tif(query.sources.length > 0) {\r\n\t\t\t\t\tvar prevSource = query.sources[query.sources.length-1];\r\n\t\t\t\t\tvar prevTable = alasql.databases[prevSource.databaseid].tables[prevSource.tableid];\r\n\t\t\t\t\tvar table = alasql.databases[source.databaseid].tables[source.tableid];\r\n\n\t\t\t\t\tif(prevTable && table) {\r\n\t\t\t\t\t\tvar c1 = prevTable.columns.map(function(col){return col.columnid});\r\n\t\t\t\t\t\tvar c2 = table.columns.map(function(col){return col.columnid});\r\n\t\t\t\t\t\tjn.using = arrayIntersect(c1,c2).map(function(colid){return {columnid:colid}});\r\n\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('In this version of Alasql NATURAL JOIN '+\r\n\t\t\t\t\t\t\t'works for tables with predefined columns only');\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\n\t\tif(jn.using) {\r\n\t\t\tvar prevSource = query.sources[query.sources.length-1];\r\n\n\t\t\tsource.onleftfns = jn.using.map(function(col){\r\n\n\t\t\t\treturn \"p['\"+(prevSource.alias||prevSource.tableid)+\"']['\"+col.columnid+\"']\";\r\n\t\t\t}).join('+\"`\"+');\r\n\n\t\t\tsource.onleftfn = new Function('p,params,alasql','var y;return '+source.onleftfns);\r\n\n\t\t\tsource.onrightfns = jn.using.map(function(col){\r\n\t\t\t\treturn \"p['\"+(source.alias||source.tableid)+\"']['\"+col.columnid+\"']\";\r\n\t\t\t}).join('+\"`\"+');\r\n\t\t\tsource.onrightfn = new Function('p,params,alasql','var y;return '+source.onrightfns);\r\n\t\t\tsource.optimization = 'ix';\r\n\n\t\t} else if(jn.on) {\r\n\n\t\t\tif(jn.on instanceof yy.Op && jn.on.op == '=' && !jn.on.allsome) {\r\n\n\t\t\t\tsource.optimization = 'ix';\r\n\n\t\t\t\tvar lefts = '';\r\n\t\t\t\tvar rights = '';\r\n\t\t\t\tvar middles = '';\r\n\t\t\t\tvar middlef = false;\r\n\t\t\t\t// Test right and left sides\r\n\t\t\t\tvar ls = jn.on.left.toJS('p',query.defaultTableid,query.defcols);\r\n\t\t\t\tvar rs = jn.on.right.toJS('p',query.defaultTableid,query.defcols);\r\n\n\t\t\t\tif((ls.indexOf(\"p['\"+alias+\"']\")>-1) && !(rs.indexOf(\"p['\"+alias+\"']\")>-1)){\r\n\t\t\t\t\tif((ls.match(/p\\[\\'.*?\\'\\]/g)||[]).every(function(s){ \r\n\t\t\t\t\t\treturn s == \"p['\"+alias+\"']\"})) { rights = ls; } \r\n\t\t\t\t\t\telse { middlef = true };\r\n\n\t\t\t\t} else \tif(!(ls.indexOf(\"p['\"+alias+\"']\")>-1) && (rs.indexOf(\"p['\"+alias+\"']\")>-1)){\r\n\t\t\t\t\tif((rs.match(/p\\[\\'.*?\\'\\]/g)||[]).every(function(s){ \r\n\t\t\t\t\t\treturn s == \"p['\"+alias+\"']\"})) { lefts = ls; } \r\n\t\t\t\t\t\telse { middlef = true };\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmiddlef = true;\r\n\t\t\t\t}\r\n\n\t\t\t\tif((rs.indexOf(\"p['\"+alias+\"']\")>-1) && !(ls.indexOf(\"p['\"+alias+\"']\")>-1)){\r\n\t\t\t\t\tif((rs.match(/p\\[\\'.*?\\'\\]/g)||[]).every(function(s){ \r\n\t\t\t\t\t\treturn s == \"p['\"+alias+\"']\"})) { rights = rs; } \r\n\t\t\t\t\t\telse { middlef = true };\r\n\t\t\t\t} else if(!(rs.indexOf(\"p['\"+alias+\"']\")>-1) && (ls.indexOf(\"p['\"+alias+\"']\")>-1)){\r\n\t\t\t\t\tif((ls.match(/p\\[\\'.*?\\'\\]/g)||[]).every(function(s){ \r\n\t\t\t\t\t\treturn s == \"p['\"+alias+\"']\"})) { lefts = rs; } \r\n\t\t\t\t\t\telse { middlef = true };\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmiddlef = true;\r\n\t\t\t\t}\r\n\n\t\t\t\tif(middlef) {\r\n\n\t\t\t\t\trights = '';\r\n\t\t\t\t\tlefts = '';\r\n\t\t\t\t\tmiddles = jn.on.toJS('p',query.defaultTableid,query.defcols);\r\n\t\t\t\t\tsource.optimization = 'no';\r\n\t\t\t\t\t// What to here?\r\n\t\t\t\t} \r\n\n\t\t\t\tsource.onleftfns = lefts;\r\n\t\t\t\tsource.onrightfns = rights;\r\n\t\t\t\tsource.onmiddlefns = middles || 'true';\r\n\n\t\t\t\tsource.onleftfn = new Function('p,params,alasql', 'var y;return '+source.onleftfns);\r\n\t\t\t\tsource.onrightfn = new Function('p,params,alasql', 'var y;return '+source.onrightfns);\r\n\t\t\t\tsource.onmiddlefn = new Function('p,params,alasql', 'var y;return '+source.onmiddlefns);\r\n\n\t\t\t} else {\r\n\n\t\t\t\tsource.optimization = 'no';\r\n\n\t\t\t\tsource.onmiddlefns = jn.on.toJS('p',query.defaultTableid,query.defcols);\r\n\t\t\t\tsource.onmiddlefn = new Function('p,params,alasql','var y;return '+jn.on.toJS('p',query.defaultTableid,query.defcols));\r\n\t\t\t};\r\n\n\t\t\t// Optimization function\r\n\t\t};\r\n\n\t\t// TODO SubQueries\r\n\n\t\tquery.sources.push(source);\r\n\t\t};\r\n\t});\r\n\n}\r\n\nyy.Select.prototype.compileWhere = function(query) {\n\tif(this.where) {\n\t\tif(typeof this.where == \"function\") {\n\t\t\treturn this.where;\n\t\t} else {\n\t\t\tvar s = this.where.toJS('p',query.defaultTableid,query.defcols);\n\t\t\tquery.wherefns = s;\n\n\t\t\treturn new Function('p,params,alasql','var y;return '+s);\n\t\t}\n\t} else return function(){return true};\n};\n\nyy.Select.prototype.compileWhereJoins = function(query) {\n\treturn;\n\n\t// TODO Fix Where optimization\n\n\toptimizeWhereJoin(query, this.where.expression);\n\n\t//for sources compile wherefs\n\tquery.sources.forEach(function(source) {\n\t\tif(source.srcwherefns) {\n\t\t\tsource.srcwherefn = new Function('p,params,alasql','var y;return '+source.srcwherefns);\n\t\t};\n\t\tif(source.wxleftfns) {\n\t\t\tsource.wxleftfn = new Function('p,params,alasql','var y;return '+source.wxleftfns);\n\t\t};\n\t\tif(source.wxrightfns) {\n\t\t\tsource.wxrightfn = new Function('p,params,alasql','var y;return '+source.wxrightfns);\n\t\t};\n\n\t});\n};\n\nfunction optimizeWhereJoin (query, ast) {\n\tif(!ast) return false;\n\tif(!(ast instanceof yy.Op)) return;\n\tif(ast.op != '=' && ast.op != 'AND') return;\n\tif(ast.allsome) return;\n\n\tvar s = ast.toJS('p',query.defaultTableid,query.defcols);\n\tvar fsrc = [];\n\tquery.sources.forEach(function(source,idx) {\n\t\t// Optimization allowed only for tables only\n\t\tif(source.tableid) {\n\t\t\t// This is a good place to remove all unnecessary optimizations\n\t\t\tif(s.indexOf('p[\\''+source.alias+'\\']')>-1) fsrc.push(source);\n\t\t};\n\t});\n\n//\tif(fsrc.length < query.sources.length) return;\n\n\tif(fsrc.length == 0) {\n\n\t\treturn;\n\t} else if (fsrc.length == 1) {\n\n\t\tif(!(s.match(/p\\[\\'.*?\\'\\]/g)||[])\n\t\t\t.every(function(s){ \n\t\t\t\t\t\treturn s == \"p['\"+fsrc[0].alias+\"']\"})) { \n\t\t\treturn; \n\t\t\t// This is means, that we have column from parent query\n\t\t\t// So we return without optimization\n\t\t} \n\n\t\tvar src = fsrc[0]; // optmiization source\n\t\tsrc.srcwherefns = src.srcwherefns ? src.srcwherefns+'&&'+s : s;\n\n\t\tif((ast instanceof yy.Op) && (ast.op == '=' && !ast.allsome)) {\n\t\t\tif(ast.left instanceof yy.Column) {\n\t\t\t\tvar ls = ast.left.toJS('p',query.defaultTableid,query.defcols);\n\t\t\t\tvar rs = ast.right.toJS('p',query.defaultTableid,query.defcols);\n\t\t\t\tif(rs.indexOf('p[\\''+fsrc[0].alias+'\\']') == -1) {\n\t\t\t\t\tfsrc[0].wxleftfns = ls; \n\t\t\t\t\tfsrc[0].wxrightfns = rs; \n\t\t\t\t} \n\t\t\t} if(ast.right instanceof yy.Column) {\n\t\t\t\tvar ls = ast.left.toJS('p',query.defaultTableid,query.defcols);\n\t\t\t\tvar rs = ast.right.toJS('p',query.defaultTableid,query.defcols);\n\t\t\t\tif(ls.indexOf('p[\\''+fsrc[0].alias+'\\']') == -1) {\n\t\t\t\t\tfsrc[0].wxleftfns = rs; \n\t\t\t\t\tfsrc[0].wxrightfns = ls; \n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t\tast.reduced = true;  // To do not duplicate wherefn and srcwherefn\n\t\treturn;\n\t} else {\n\t\tif(ast.op = 'AND') {\n\t\t\toptimizeWhereJoin(query,ast.left);\n\t\t\toptimizeWhereJoin(query,ast.right);\n\t\t} \n\t}\n\n};\n\n/*\r\n//\r\n// Select compiler part for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n/**\r\n Compile group of statements\r\n */\r\nyy.Select.prototype.compileGroup = function(query) {\r\n\n\tif(query.sources.length > 0) {\r\n\t\tvar tableid = query.sources[0].alias;\r\n\t} else {\r\n\t\t// If SELECT contains group aggregators without source tables\r\n\t\tvar tableid = '';\r\n\t}\r\n\tvar defcols = query.defcols;\r\n\n\tvar allgroup = [[]];\r\n\tif(this.group) {\r\n\t\tallgroup = decartes(this.group,query);\r\n\t}\r\n\n\t// Prepare groups\r\n\t//var allgroup = [['a'], ['a','b'], ['a', 'b', 'c']];\r\n\n\t// Union all arrays to get a maximum\r\n\tvar allgroups = [];\r\n\tallgroup.forEach(function(a){\r\n\t\tallgroups = arrayUnion(allgroups, a);\r\n\t});\r\n\n\tquery.allgroups = allgroups;\r\n\n\tquery.ingroup = [];\r\n\n\t// Create negative array\r\n\n\tvar s = '';\r\n//\ts+= query.selectfns;\r\n\tallgroup.forEach(function(agroup) {\r\n\n\t\t// Start of group function\r\n\t\ts += 'var g=this.xgroups[';\r\n\n\t//\tvar gcols = this.group.map(function(col){return col.columnid}); // Group fields with r\r\n\t\t// Array with group columns from record\r\n\t\tvar rg = agroup.map(function(col2){\r\n\t\t\tvar columnid = col2.split('\\t')[0];\r\n\t\t\tvar coljs = col2.split('\\t')[1];\r\n\t\t\t// Check, if aggregator exists but GROUP BY is not exists\r\n\t\t\tif(columnid === ''){\r\n\t\t\t\treturn '1'; // Create fictive groupping column for fictive GROUP BY\r\n\t\t\t}\r\n\n\t\t\tquery.ingroup.push(columnid);\r\n\n\t\t\treturn coljs;\r\n\t\t});\r\n\n\t\tif(rg.length === 0){\r\n\t\t\trg = [\"''\"];\r\n\t\t}\r\n\n\t\ts += rg.join('+\"`\"+');\r\n\t\ts += '];if(!g) {this.groups.push((g=this.xgroups[';\r\n\t\ts += rg.join('+\"`\"+');\r\n\t\ts += '] = {';\r\n\n\t\ts += agroup.map(function(col2){\r\n\t\t\tvar columnid = col2.split('\\t')[0];\r\n\t\t\tvar coljs = col2.split('\\t')[1];\r\n\n\t\t\tif(columnid === ''){\r\n\t\t\t\treturn '';\r\n\t\t\t}\r\n\t\t\treturn \"'\"+columnid+\"':\"+coljs+\",\";\r\n\t\t}).join('');\r\n\n\t\tvar neggroup = arrayDiff(allgroups,agroup);\r\n\n\t\ts += neggroup.map(function(col2){\t\t\t\r\n\t\t\tvar columnid = col2.split('\\t')[0];\r\n\t\t//\tvar coljs = col2.split('\\t')[1]\r\n\t\t\treturn \"'\"+columnid+\"':null,\";\r\n\t\t}).join('');\r\n\n\t\tvar aft = '', aft2='';\r\n\n\t\tif(typeof query.groupStar !== 'undefined') {\r\n\t\t\taft2 += 'for(var f in p[\\''+query.groupStar+'\\']) {g[f]=p[\\''+query.groupStar+'\\'][f];};';\r\n\t\t};\r\n\n\t\t/*\r\n\t\t*/\r\n\n\t\ts += query.selectGroup.map(function(col){\r\n\n\t\t\tvar colexp = col.expression.toJS(\"p\",tableid,defcols);\r\n\t\t\tvar colas = col.nick;\r\n\t\t\t// if(typeof colas == 'undefined') {\r\n\t\t\t// \tif(col instanceof yy.Column) colas = col.columnid;\r\n\t\t\t// \telse colas = col.toString();\r\n\t\t\t// };\r\n\t\t\tif (col instanceof yy.AggrValue) { \r\n\t\t\t\tif(col.distinct) {\r\n\t\t\t\t\taft += ',g[\\'$$_VALUES_'+colas+'\\']={},g[\\'$$_VALUES_'+colas+'\\']['+colexp+']=true';\r\n\t\t\t\t}\r\n\t\t\t\tif (col.aggregatorid === 'SUM') { \r\n\t\t\t\t\treturn \"'\"+colas+'\\':('+colexp+')||0,'; \r\n\t\t\t\t} else if (\r\n\t\t\t\t\t\t\tcol.aggregatorid === 'MIN'\r\n\t\t\t\t\t\t\t|| col.aggregatorid === 'MAX'\r\n\t\t\t\t\t\t\t|| col.aggregatorid === 'FIRST'\r\n\t\t\t\t\t\t\t|| col.aggregatorid === 'LAST'\r\n\t\t//\t\t\t\t\t|| col.aggregatorid == 'AVG'\r\n\n\t\t\t\t){ \r\n\t\t\t\t\treturn \"'\"+colas+'\\':'+colexp+','; //f.field.arguments[0].toJS(); \t\r\n\n\t\t\t\t} else if(col.aggregatorid === 'ARRAY') {\r\n\t\t\t\t \treturn \"'\"+colas+'\\':['+colexp+'],';\r\n\n\t\t\t\t} else if(col.aggregatorid === 'COUNT') { \r\n\t\t\t\t\tif(col.expression.columnid === '*') {\r\n\t\t\t\t\t\treturn \"'\"+colas+'\\':1,';\r\n\t\t\t\t\t} else {\r\n\n\t\t\t\t\t\treturn \"'\"+colas+'\\':(typeof '+colexp+' != \"undefined\")?1:0,'; \r\n\t\t\t\t\t}\r\n\n\t\t\t\t} else if(col.aggregatorid === 'AVG') { \r\n\t\t\t\t\tquery.removeKeys.push('_SUM_'+colas);\r\n\t\t\t\t\tquery.removeKeys.push('_COUNT_'+colas);\r\n\n\t\t\t\t\treturn\t''\r\n\t\t\t\t\t\t\t+ \"'\" + colas + '\\':' + colexp + ',\\'_SUM_'\r\n\t\t\t\t\t\t\t+ colas+'\\':(' + colexp + ')||0,\\'_COUNT_'\r\n\t\t\t\t\t\t\t+ colas + '\\':(typeof '\r\n\t\t\t\t\t\t\t+ colexp+' != \"undefined\")?1:0,'; \r\n\t\t\t\t} else if(col.aggregatorid === 'AGGR') {\r\n\t\t\t\t\taft += ',g[\\''+colas+'\\']='+col.expression.toJS('g',-1); \r\n\t\t\t\t\treturn '';\r\n\t\t\t\t} else if(col.aggregatorid === 'REDUCE') {\r\n\n\t\t\t\t\tquery.aggrKeys.push(col);\r\n\n\t\t\t\t\treturn '\\''+colas+'\\':alasql.aggr[\\''+col.funcid+'\\']('+colexp+',undefined,1),'; \r\n\t\t\t\t}\r\n\t\t\t\treturn '';\r\n\t\t\t} \r\n\n\t\t\treturn '';\r\n\n\t\t}).join('');\r\n\n\t\ts += '}'+aft+',g));'+aft2+'} else {';\r\n\n/*\r\n\t// var neggroup = arrayDiff(allgroups,agroup);\r\n\n\t// s += neggroup.map(function(columnid){\r\n\t// \treturn \"g['\"+columnid+\"']=null;\";\r\n\t// }).join('');\r\n*/\r\n\n\t\ts += query.selectGroup.map(function(col){\r\n\t\t\tvar colas = col.nick;\r\n\n\t\t\tvar colexp = col.expression.toJS(\"p\",tableid,defcols);\r\n\n\t\t\tif (col instanceof yy.AggrValue) { \r\n\t\t\t\tvar pre = '', post = '';\r\n\t\t\t\tif(col.distinct) {\r\n\t\t\t \t\tvar pre = 'if(typeof '+colexp+'!=\"undefined\" && (!g[\\'$$_VALUES_'+colas+'\\']['+colexp+'])) \\\r\n\t\t\t\t \t\t {';\r\n\t\t\t\t \tvar post = 'g[\\'$$_VALUES_'+colas+'\\']['+colexp+']=true;}';\r\n\t\t\t\t} \r\n\t\t\t\tif (col.aggregatorid === 'SUM') { \r\n\t\t\t\t\treturn pre+'g[\\''+colas+'\\']+=('+colexp+'||0);'+post; //f.field.arguments[0].toJS(); \r\n\t\t\t\t} else if(col.aggregatorid === 'COUNT') {\r\n\n\t\t\t\t\tif(col.expression.columnid === '*'){\r\n\t\t\t\t\t\treturn pre+'g[\\''+colas+'\\']++;'+post; \r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn pre+'if(typeof '+colexp+'!=\"undefined\") g[\\''+colas+'\\']++;'+post;\r\n\t\t\t\t\t}\r\n\n\t\t\t\t} else if(col.aggregatorid === 'ARRAY') { \r\n\t\t\t\t\treturn pre+'g[\\''+colas+'\\'].push('+colexp+');'+post; \r\n\n\t\t\t\t} else if(col.aggregatorid === 'MIN') { \r\n\t\t\t\t\treturn pre+'g[\\''+colas+'\\']=Math.min(g[\\''+colas+'\\'],'+colexp+');'+post; \r\n\n\t\t\t\t} else if(col.aggregatorid === 'MAX') { \r\n\t\t\t\t\treturn pre+'g[\\''+colas+'\\']=Math.max(g[\\''+colas+'\\'],'+colexp+');'+post; \r\n\n\t\t\t\t} else if(col.aggregatorid === 'FIRST') { \r\n\t\t\t\t\treturn ''; \r\n\n\t\t\t\t} else if(col.aggregatorid === 'LAST') { \r\n\t\t\t\t\treturn pre+'g[\\''+colas+'\\']='+colexp+';'+post; \r\n\n\t\t\t\t} else if(col.aggregatorid === 'AVG') { \r\n\t\t\t\t\t\treturn \t''\r\n\t\t\t\t\t\t\t\t+ pre+'g[\\'_SUM_'+colas+'\\']+=(y='+colexp+')||0;'\r\n\t\t\t\t\t\t\t\t+ 'g[\\'_COUNT_'+colas+'\\']+=(typeof y!=\"undefined\")?1:0;'\r\n\t\t\t\t\t\t\t\t+ 'g[\\''+colas+'\\']=g[\\'_SUM_'+colas+'\\']/g[\\'_COUNT_'+colas+'\\'];'\r\n\t\t\t\t\t\t\t\t+ post; \r\n\n\t//\t\t\telse if(col.aggregatorid == 'AVG') { srg.push(colas+':0'); }\r\n\t\t\t\t} else if(col.aggregatorid === 'AGGR') {\r\n\t\t\t\t\treturn \t''\r\n\t\t\t\t\t\t\t+ pre+'g[\\''+colas+'\\']='\r\n\t\t\t\t\t     \t+ col.expression.toJS('g',-1)+';'\r\n\t\t\t\t\t     \t+ post; \r\n\n\t\t\t\t} else if(col.aggregatorid === 'REDUCE') {\r\n\t\t\t\t\treturn \t''\r\n\t\t\t\t\t\t\t+ pre+'g[\\''+colas+'\\']=alasql.aggr.'\r\n\t\t\t\t\t\t\t+ col.funcid+'('+colexp+',g[\\''+colas+'\\'],2);'\r\n\t\t\t\t\t\t\t+ post; \r\n\t\t\t\t}\r\n\n\t\t\t\treturn '';\r\n\t\t\t} \r\n\n\t\t\treturn '';\r\n\t\t}).join('');\r\n\n\t\ts += '}';\r\n\n\t});\r\n\n\treturn new Function('p,params,alasql','var y;'+s);\r\n\n}\r\n\n/*\r\n//\r\n// Select compiler part for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n// yy.Select.prototype.compileSources = function(query) {\r\n\n// };\r\n\nfunction compileSelectStar (query, alias, joinstar) {\r\n\n\tvar sp = '', ss=[];\r\n//\tif(!alias) {\r\n\n//\t} else \t{\r\n\n\t\t// TODO move this out of this function \r\n\t\tquery.ixsources = {};\r\n\t\tquery.sources.forEach(function(source){\r\n\t\t\tquery.ixsources[source.alias] = source;\r\n\t\t});\r\n\n\t\t// Fixed\r\n\t\tvar columns;\r\n\t\tif(query.ixsources[alias]) {\r\n\t\t\tvar columns = query.ixsources[alias].columns;\r\n\t\t}\r\n\n\t\t// Check if this is a Table or other\r\n\t\tif(joinstar && alasql.options.joinstar == 'json') {\t\r\n\t\t\tsp += 'r[\\''+alias+'\\']={};';\r\n\t\t};\r\n\n\t\tif(columns && columns.length > 0) {\r\n\t\t\tcolumns.forEach(function(tcol){\r\n\n\t\t\tif(joinstar && alasql.options.joinstar == 'underscore') {\r\n\t\t\t\tss.push('\\''+alias+'_'+tcol.columnid+'\\':p[\\''+alias+'\\'][\\''+tcol.columnid+'\\']');\r\n\t\t\t} else if(joinstar && alasql.options.joinstar == 'json') {\r\n\n\t\t\t\tsp += 'r[\\''+alias+'\\'][\\''+tcol.columnid+'\\']=p[\\''+alias+'\\'][\\''+tcol.columnid+'\\'];';\r\n\t\t\t} else { \r\n\t\t\t\tss.push('\\''+tcol.columnid+'\\':p[\\''+alias+'\\'][\\''+tcol.columnid+'\\']');\r\n\t\t\t}\r\n\n\t\t\t\tquery.selectColumns[escapeq(tcol.columnid)] = true;\r\n\n\t\t\t\tvar coldef = {\r\n\t\t\t\t\tcolumnid:tcol.columnid, \r\n\t\t\t\t\tdbtypeid:tcol.dbtypeid, \r\n\t\t\t\t\tdbsize:tcol.dbsize, \r\n\t\t\t\t\tdbprecision:tcol.dbprecision,\r\n\t\t\t\t\tdbenum: tcol.dbenum\r\n\t\t\t\t};\r\n\t\t\t\tquery.columns.push(coldef);\r\n\t\t\t\tquery.xcolumns[coldef.columnid]=coldef;\r\n\n\t\t\t});\r\n\n\t\t} else {\r\n\n\t\t\t// if column not exists, then copy all\r\n\t\t\tsp += 'var w=p[\"'+alias+'\"];for(var k in w){r[k]=w[k]};';\r\n\n\t\t\tquery.dirtyColumns = true;\r\n\t\t}\r\n//\t}\r\n\n\treturn {s:ss.join(','),sp:sp};\r\n}\r\n\nyy.Select.prototype.compileSelect1 = function(query, params) {\r\n\n\tvar self = this;\r\n\tquery.columns = [];\r\n\tquery.xcolumns = {};\r\n\tquery.selectColumns = {};\r\n\tquery.dirtyColumns = false;\r\n\tvar s = 'var r={';\r\n\tvar sp = '';\r\n\tvar ss = [];\r\n\n\tthis.columns.forEach(function(col){\r\n\n\t\tif(col instanceof yy.Column) {\r\n\t\t\tif(col.columnid === '*') {\r\n\t\t\t\tif(col.func) {\r\n\t\t\t\t\tsp += 'r=params[\\''+col.param+'\\'](p[\\''+query.sources[0].alias+'\\'],p,params,alasql);';\r\n\t\t\t\t} else if(col.tableid) {\r\n\t\t\t\t\t//Copy all\r\n\t\t\t\t\tvar ret = compileSelectStar(query, col.tableid, false);\r\n\t\t\t\t\tif(ret.s){\r\n\t\t\t\t\t\tss = ss.concat(ret.s);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsp += ret.sp;\r\n\n\t\t\t\t} else {\r\n\n\t\t\t\t\tfor(var alias in query.aliases) {\r\n\t\t\t\t\t\tvar ret = compileSelectStar(query, alias, true); //query.aliases[alias].tableid);\r\n\t\t\t\t\t\tif(ret.s) {\r\n\t\t\t\t\t\t\tss = ss.concat(ret.s);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsp += ret.sp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// TODO Remove these lines\r\n\t\t\t\t\t// In case of no information \r\n\t\t\t\t\t// sp += 'for(var k1 in p){var w=p[k1];'+\r\n\t\t\t\t\t// \t\t\t'for(k2 in w) {r[k2]=w[k2]}}'\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// If field, otherwise - expression\r\n\t\t\t\tvar tbid = col.tableid;\r\n\n\t\t\t\tvar dbid = col.databaseid || query.sources[0].databaseid || query.database.databaseid;\r\n\t\t\t\tif(!tbid) tbid = query.defcols[col.columnid];\r\n\t\t\t\tif(!tbid) tbid = query.defaultTableid;\r\n\t\t\t\tif(col.columnid !== '_') {\r\n\t\t\t\t\tif(false && tbid && !query.defcols['.'][col.tableid] && !query.defcols[col.columnid]) {\r\n\t\t\t\t\t\tss.push('\\''+escapeq(col.as || col.columnid)+'\\':p[\\''+(query.defaultTableid)+'\\'][\\''+(col.tableid)+'\\'][\\''+col.columnid+'\\']');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// workaround for multisheet xlsx export with custom COLUMNS\r\n\t\t\t\t\t\tvar isMultisheetParam = params && params.length > 1 &&\r\n\t\t\t\t\t\t                        Array.isArray(params[0]) && params[0].length >= 1 && \r\n\t\t\t\t\t\t                        params[0][0].hasOwnProperty('sheetid');\r\n\t\t\t\t\t\tif (isMultisheetParam) {\r\n\t\t\t\t\t\t\tsp = 'var r={};var w=p[\\\"' + tbid + '\\\"];'\r\n\t\t\t\t\t\t\t   + 'var cols=[' + self.columns.map(function(col) {\r\n\t\t\t\t\t\t\t\t    return \"'\" + col.columnid + \"'\";\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.join(',') + '];var colas=['+\r\n\t\t\t\t\t\t\t\tself.columns.map(function(col) {\r\n\t\t\t\t\t\t\t\t    return \"'\" + (col.as || col.columnid) + \"'\";\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.join(',')\r\n\n\t\t\t\t\t\t\t+ '];' +\r\n\t\t\t\t\t\t\t\"for (var i=0;i<Object.keys(p['\" + tbid + \"']).length;i++)\" +\r\n\t\t\t\t\t\t\t\" for(var k=0;k<cols.length;k++){if (!r.hasOwnProperty(i)) r[i]={}; r[i][colas[k]]=w[i][cols[k]];}\";\r\n\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tss.push('\\''+escapeq(col.as || col.columnid)+'\\':p[\\''+(tbid)+'\\'][\\''+col.columnid+'\\']');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tss.push('\\''+escapeq(col.as || col.columnid)+'\\':p[\\''+(tbid)+'\\']');\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tquery.selectColumns[escapeq(col.as || col.columnid)] = true;\r\n\n\t\t\t\tif(query.aliases[tbid] && query.aliases[tbid].type === 'table') {\r\n\n\t\t\t\t\tif(!alasql.databases[dbid].tables[query.aliases[tbid].tableid]) {\r\n\n\t\t\t\t\t\tthrow new Error('Table \\''+(tbid)+'\\' does not exists in database');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar columns = alasql.databases[dbid].tables[query.aliases[tbid].tableid].columns;\t\t\t\t\t\r\n\t\t\t\t\tvar xcolumns = alasql.databases[dbid].tables[query.aliases[tbid].tableid].xcolumns;\r\n\n\t\t\t\t\tif(xcolumns && columns.length > 0) {\r\n\n\t\t\t\t\t\tvar tcol = xcolumns[col.columnid];\r\n\n\t\t\t\t\t\tif(undefined === tcol){\r\n\t\t\t\t\t\t\tthrow new Error(\"Column does not exists: \"+col.columnid);;\r\n\t\t\t\t\t\t}\r\n\n\t\t\t\t\t\tvar coldef = {\r\n\t\t\t\t\t\t\tcolumnid:col.as || col.columnid, \r\n\t\t\t\t\t\t\tdbtypeid:tcol.dbtypeid, \r\n\t\t\t\t\t\t\tdbsize:tcol.dbsize, \r\n\t\t\t\t\t\t\tdbpecision:tcol.dbprecision,\r\n\t\t\t\t\t\t\tdbenum: tcol.dbenum,\r\n\t\t\t\t\t\t};\r\n\n\t\t\t\t\t\tquery.columns.push(coldef);\r\n\t\t\t\t\t\tquery.xcolumns[coldef.columnid]=coldef;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar coldef = {\r\n\t\t\t\t\t\t\tcolumnid:col.as || col.columnid, \r\n\n\t\t\t\t\t\t};\r\n\n\t\t\t\t\t\tquery.columns.push(coldef);\r\n\t\t\t\t\t\tquery.xcolumns[coldef.columnid]=coldef;\r\n\n\t\t\t\t\t\tquery.dirtyColumns = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t\tvar coldef = {\r\n\t\t\t\t\t\t\tcolumnid:col.as || col.columnid, \r\n\n\t\t\t\t\t\t};\r\n\n\t\t\t\t\t\tquery.columns.push(coldef);\r\n\t\t\t\t\t\tquery.xcolumns[coldef.columnid]=coldef;\r\n\t\t\t\t\t// This is a subquery? \r\n\t\t\t\t\t// throw new Error('There is now such table \\''+col.tableid+'\\'');\r\n\t\t\t\t}\r\n\n\t\t\t}\r\n\t\t} else if(col instanceof yy.AggrValue) {\r\n\t\t\tif(!self.group) {\r\n\n\t\t\t\tself.group = [''];\r\n\t\t\t}\r\n\t\t\tif(!col.as){\r\n\t\t\t\tcol.as = escapeq(col.toString());\r\n\t\t\t}\r\n\n\t\t\tif(\r\n\t\t\t\t\tcol.aggregatorid === 'SUM' \r\n\t\t\t\t|| \tcol.aggregatorid === 'MAX' \r\n\t\t\t\t||  col.aggregatorid === 'MIN' \r\n\t\t\t\t||\tcol.aggregatorid === 'FIRST' \r\n\t\t\t\t||\tcol.aggregatorid === 'LAST' \r\n\t\t\t\t||\tcol.aggregatorid === 'AVG' \r\n\t\t\t\t|| \tcol.aggregatorid === 'ARRAY' \r\n\t\t\t\t|| \tcol.aggregatorid === 'REDUCE'\r\n\t\t\t){\r\n\t\t\t\tss.push(\"'\"+escapeq(col.as)+\"':\"+n2u(col.expression.toJS(\"p\",query.defaultTableid,query.defcols)))\t\r\n\n\t\t\t}else if(col.aggregatorid === 'COUNT') {\r\n\t\t\t\tss.push(\"'\"+escapeq(col.as)+\"':1\");\r\n\t\t\t\t// Nothing\r\n\t\t\t}\r\n\t\t\t// todo: confirm that no default action must be implemented\r\n\n\t\t\t\t\t\tvar coldef = {\r\n\t\t\t\t\t\t\tcolumnid:col.as || col.columnid || col.toString(), \r\n\n\t\t\t\t\t\t};\r\n\n\t\t\t\t\t\tquery.columns.push(coldef);\r\n\t\t\t\t\t\tquery.xcolumns[coldef.columnid]=coldef;\r\n\n\t\t} else {\r\n\n\t\t\tss.push('\\''+escapeq(col.as || col.columnid || col.toString())+'\\':'+n2u(col.toJS(\"p\",query.defaultTableid,query.defcols)));\r\n\n\t\t\t//if(col instanceof yy.Expression) {\r\n\t\t\tquery.selectColumns[escapeq(col.as || col.columnid || col.toString())] = true;\r\n\n\t\t\t\t\t\tvar coldef = {\r\n\t\t\t\t\t\t\tcolumnid:col.as || col.columnid || col.toString(), \r\n\n\t\t\t\t\t\t};\r\n\n\t\t\t\t\t\tquery.columns.push(coldef);\r\n\t\t\t\t\t\tquery.xcolumns[coldef.columnid]=coldef;\r\n\t\t}\r\n\t});\r\n\ts += ss.join(',')+'};'+sp;\r\n\treturn s;\r\n\n}\r\nyy.Select.prototype.compileSelect2 = function(query) {\r\n\n\tvar s = query.selectfns;\r\n\tif(this.orderColumns && this.orderColumns.length>0) {\r\n\t\tthis.orderColumns.forEach(function(v,idx) {\r\n\t\t\tvar key = '$$$'+idx;\r\n\t\t\tif(v instanceof yy.Column && query.xcolumns[v.columnid]) {\r\n\t\t\t\ts += 'r[\\''+key+'\\']=r[\\''+v.columnid+'\\'];';\r\n\t\t\t} else {\r\n\t\t\t\ts += 'r[\\''+key+'\\']='+v.toJS('p',query.defaultTableid,query.defcols)+';';\r\n\t\t\t}\r\n\t\t\tquery.removeKeys.push(key);\r\n\t\t});\r\n\t}\r\n\n\treturn new Function('p,params,alasql','var y;'+s+'return r');\r\n};\r\n\nyy.Select.prototype.compileSelectGroup0 = function(query) {\r\n\tvar self = this;\r\n\tself.columns.forEach(function(col,idx){\r\n\t\tif(!(col instanceof yy.Column && col.columnid === '*')){\r\n\n\t\t\tvar colas;\r\n\t\t\t//  = col.as;\r\n\t\t\tif(col instanceof yy.Column) {\r\n\t\t\t\tcolas = escapeq(col.columnid);\r\n\t\t\t} else {\r\n\t\t\t\tcolas = escapeq(col.toString(true));\r\n\n\t\t\t}\r\n\t\t\tfor(var i=0;i<idx;i++) {\r\n\t\t\t\tif(colas === self.columns[i].nick) {\r\n\t\t\t\t\tcolas = self.columns[i].nick+':'+idx;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// }\r\n\t\t\tcol.nick = colas;\r\n\t\t\tif(\r\n\t\t\t\tcol.funcid \r\n\t\t\t\t&& (col.funcid.toUpperCase() === 'ROWNUM'|| col.funcid.toUpperCase() === 'ROW_NUMBER')) {\r\n\t\t\t\tquery.rownums.push(col.as);\r\n\t\t\t}\r\n\n\t\t\t// }\r\n\t\t} else {\r\n\t\t\tquery.groupStar = col.tableid || 'default';\r\n\t\t}\r\n\n\t});\r\n\n\tthis.columns.forEach(function(col){\r\n\t\tif(col.findAggregator){\r\n\t\t\tcol.findAggregator(query);\r\n\t\t}\r\n\t});\r\n\n\tif(this.having) {\r\n\t\tif(this.having.findAggregator){\r\n\t\t\tthis.having.findAggregator(query);\r\n\t\t}\r\n\t}\r\n\n};\r\n\nyy.Select.prototype.compileSelectGroup1 = function(query) {\r\n\tvar self = this;\r\n\tvar s = 'var r = {};';\r\n\n\tself.columns.forEach(function(col){\r\n\n\t\tif(col instanceof yy.Column && col.columnid === '*') {\r\n\n\t\t\ts += 'for(var k in g) {r[k]=g[k]};';\r\n\t\t\treturn '';\r\n\n\t\t} else {\r\n\t\t\t// var colas = col.as;\r\n\t\t\tvar colas = col.as;\r\n\t\t\tif(colas === undefined) {\r\n\t\t\t \tif(col instanceof yy.Column){\r\n\t\t\t \t\tcolas = escapeq(col.columnid);\r\n\t\t\t \t} else {\r\n\t\t\t \t\tcolas = col.nick;\r\n\t\t\t \t}\r\n\t\t\t}\r\n\t\t\tquery.groupColumns[colas]=col.nick;\r\n\n\t\t\ts += 'r[\\''+colas+'\\']=';\r\n\n \t\t\ts += n2u(col.toJS('g',''))+';';\t\t\t\t\r\n\n\t\t\tfor(var i=0;i<query.removeKeys.length;i++) {\r\n\t\t\t\t// THis part should be intellectual\r\n\t\t\t\tif(query.removeKeys[i] === colas) {\r\n\t\t\t\t\tquery.removeKeys.splice(i,1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\t// return new Function('g,params,alasql',s+'return r');\r\n\treturn s;\r\n}\r\n\nyy.Select.prototype.compileSelectGroup2 = function(query) {\r\n\tvar self = this;\r\n\tvar s = query.selectgfns;\r\n\tself.columns.forEach(function(col){\r\n\n\t\tif(query.ingroup.indexOf(col.nick)>-1) {\r\n\t\t\ts += 'r[\\''+(col.as||col.nick)+'\\']=g[\\''+col.nick+'\\'];'\r\n\t\t};\r\n\t});\r\n\n\tif(this.orderColumns && this.orderColumns.length>0) {\r\n\t\tthis.orderColumns.forEach(function(v,idx) {\r\n\n\t\t\tvar key = '$$$'+idx;\r\n\n\t\t\tif(v instanceof yy.Column && query.groupColumns[v.columnid]) {\r\n\t\t\t\ts += 'r[\\''+key+'\\']=r[\\''+v.columnid+'\\'];';\r\n\t\t\t} else {\r\n\t\t\t\ts += 'r[\\''+key+'\\']='+v.toJS('g','')+';';\r\n\t\t\t}\r\n\t\t\tquery.removeKeys.push(key);\r\n\t\t});\r\n\t}\r\n\n\treturn new Function('g,params,alasql','var y;'+s+'return r');\r\n};\r\n\n// SELECY * REMOVE [COLUMNS] col-list, LIKE ''\r\nyy.Select.prototype.compileRemoveColumns = function(query) {\r\n\tvar self = this;\r\n\tif(typeof this.removecolumns !== 'undefined') {\r\n\t\tquery.removeKeys = query.removeKeys.concat(\r\n\t\t\tthis.removecolumns.filter(function (column) {\r\n\t\t\t\treturn (typeof column.like === 'undefined');\r\n\t\t\t}).map(function(column){return column.columnid}));\r\n\n\t\tquery.removeLikeKeys = this.removecolumns.filter(function (column) {\r\n\t\t\t\treturn (typeof column.like !== 'undefined');\r\n\t\t\t}).map(function(column){\r\n\n\t\t\t\treturn column.like.value;\r\n\t\t\t});\r\n\t}\r\n};\r\n\nyy.Select.prototype.compileHaving = function(query) {\n\tif(this.having) {\n\t\ts = this.having.toJS('g',-1);\n\t\tquery.havingfns = s;\n\n\t\treturn new Function('g,params,alasql','var y;return '+s);\n\t} else return function(){return true};\n};\n\nyy.Select.prototype.compileOrder = function (query) {\n\tvar self = this;\n\tself.orderColumns = [];\n\tif(this.order) {\n\n\t\tif(this.order && this.order.length == 1 && this.order[0].expression \n\t\t\t && typeof this.order[0].expression == \"function\") {\n\n\t\t\tvar func = this.order[0].expression;\n\n\t\t\treturn function(a,b){\n\t\t\t\tvar ra = func(a),rb = func(b);\n\t\t\t\tif(ra>rb) return 1;\n\t\t\t\tif(ra==rb) return 0;\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t};\n\n\t\tvar s = '';\n\t\tvar sk = '';\n\t\tthis.order.forEach(function(ord,idx){\n\n\t\t\tif(ord.expression instanceof yy.NumValue) {\n\t\t\t\tvar v = self.columns[ord.expression.value-1];\n\t\t\t} else {\n\t\t\t\tvar v = ord.expression;\n\t\t\t}\n\t\t\tself.orderColumns.push(v);\n\n\t\t\tvar key = '$$$'+idx;\n\n\t\t\t// Date conversion\n\t\t\tvar dg = ''; \n\t\t\t\t//if(alasql.options.valueof) \n\t\t\tif(ord.expression instanceof yy.Column) {\n\t\t\t\tvar columnid = ord.expression.columnid; \n\t\t\t\tif(query.xcolumns[columnid]) {\n\t\t\t\t\tvar dbtypeid = query.xcolumns[columnid].dbtypeid;\n\t\t\t\t\tif( dbtypeid == 'DATE' || dbtypeid == 'DATETIME' || dbtypeid == 'DATETIME2') dg = '.valueOf()';\n\t\t\t\t\t// TODO Add other types mapping\n\t\t\t\t} else {\n\t\t\t\t\tif(alasql.options.valueof) dg = '.valueOf()'; // TODO Check\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// COLLATE NOCASE\n\t\t\tif(ord.nocase) dg += '.toUpperCase()';\n\t\t\ts += \"if((a['\"+key+\"']||'')\"+dg+(ord.direction == 'ASC'?'>':\"<\")+\"(b['\"+key+\"']||'')\"+dg+')return 1;';\n\t\t\ts += \"if((a['\"+key+\"']||'')\"+dg+\"==(b['\"+key+\"']||'')\"+dg+'){';\n\n/*\nif(false) {\t\t\t\n\n\t\t\tif(ord.expression instanceof yy.NumValue) {\n\t\t\t\tord.expression = self.columns[ord.expression.value-1];\n\n\t\t\t\tord.expression = new yy.Column({columnid:ord.expression.nick});\n\t\t\t};\n\n\t\t\tif(ord.expression instanceof yy.Column) {\n\t\t\t\tvar columnid = ord.expression.columnid; \n\t\t\t\tif(query.xcolumns[columnid]) {\n\t\t\t\t\tvar dbtypeid = query.xcolumns[columnid].dbtypeid;\n\t\t\t\t\tif( dbtypeid == 'DATE' || dbtypeid == 'DATETIME' || dbtypeid == 'DATETIME2') dg = '.valueOf()';\n\t\t\t\t\t// TODO Add other types mapping\n\t\t\t\t} else {\n\t\t\t\t\tif(alasql.options.valueof) dg = '.valueOf()'; // TODO Check\n\t\t\t\t}\n\t\t\t\t// COLLATE NOCASE\n\t\t\t\tif(ord.nocase) dg += '.toUpperCase()';\n\n\t\t\t\ts += 'if((a[\\''+columnid+\"']||'')\"+dg+(ord.direction == 'ASC'?'>':'<')+'(b[\\''+columnid+\"']||'')\"+dg+')return 1;';\n\t\t\t\ts += 'if((a[\\''+columnid+\"']||'')\"+dg+'==(b[\\''+columnid+\"']||'')\"+dg+'){';\n\n\t\t\t} else {\n\t\t\t\tdg = '.valueOf()';\n\t\t\t\t// COLLATE NOCASE\n\t\t\t\tif(ord.nocase) dg += '.toUpperCase()';\n\t\t\t\ts += 'if(('+ord.toJS('a','')+\"||'')\"+dg+(ord.direction == 'ASC'?'>(':'<(')+ord.toJS('b','')+\"||'')\"+dg+')return 1;';\n\t\t\t\ts += 'if(('+ord.toJS('a','')+\"||'')\"+dg+'==('+ord.toJS('b','')+\"||'')\"+dg+'){';\n\t\t\t}\t\t\t\n\n\t\t\t// TODO Add date comparision\n\n}\n*/\n\t\t\tsk += '}';\n\t\t});\n\t\ts += 'return 0;';\n\t\ts += sk+'return -1';\n\t\tquery.orderfns = s;\n\n\t\treturn new Function('a,b','var y;'+s);\n\t};\n};\n\n// Pivot functions\n/**\n\tCompile Pivot functions\n\t@param {object} query Source query\n\t@return {function} Pivoting functions\n*/\nyy.Select.prototype.compilePivot = function (query) {\n\tvar self = this;\n\t/** @type {string} Main pivoting column */\n\n\tvar columnid = self.pivot.columnid;\n\tvar exprcolid = self.pivot.expr.expression.columnid;\n\tvar aggr = self.pivot.expr.aggregatorid;\n\tvar inlist =  self.pivot.inlist;\n\n\tif(inlist) {\n\t\tinlist = inlist.map(function(l){return l.expr.columnid});\n\t}\n\n\t// Function for PIVOT post production\n\treturn function() {\n\t\tvar query = this;\n\t\tvar cols = query.columns.filter(function(col){\n\t\t\treturn (col.columnid != columnid) && (col.columnid != exprcolid);\n\t\t}).map(function(col){\n\t\t\treturn col.columnid;\n\t\t});\n\n\t\tvar newcols = [];\n\t\tvar gnewcols = {};\n\t\tvar gr = {};\n\t\tvar ga = {};\n\t\tvar data = [];\n\t\tquery.data.forEach(function(d){\n\t\t\tif(!inlist || inlist.indexOf(d[columnid])>-1 ) {\n\t\t\t\tvar gx = cols.map(function(colid){return d[colid]}).join('`');\n\t\t\t\tvar g = gr[gx];\n\t\t\t\tif(!g) {\n\t\t\t\t\tg = {};\n\t\t\t\t\tgr[gx] = g;\n\t\t\t\t\tdata.push(g);\n\t\t\t\t\tcols.forEach(function(colid){\n\t\t\t\t\t\tg[colid] = d[colid];\n\t\t\t\t\t});\t\t\t\n\t\t\t\t};\n\n\t\t\t\tif(!ga[gx]) {\n\t\t\t\t\tga[gx] = {};\n\t\t\t\t}\n\n\t\t\t\tif(ga[gx][d[columnid]]) {\n\t\t\t\t\tga[gx][d[columnid]]++;\n\t\t\t\t} else {\n\t\t\t\t\tga[gx][d[columnid]] = 1;\n\t\t\t\t}\n\n\t\t\t\tif(!gnewcols[d[columnid]]) {\n\t\t\t\t\tgnewcols[d[columnid]] = true;\n\t\t\t\t\tnewcols.push(d[columnid]);\n\t\t\t\t};\n\n\t\t\t\tif(aggr=='SUM' || aggr=='AVG' ) {\n\t\t\t\t\tif(typeof g[d[columnid]] == 'undefined') g[d[columnid]] = 0;\n\t\t\t\t\tg[d[columnid]] += d[exprcolid];\n\t\t\t\t} else if(aggr=='COUNT') {\n\t\t\t\t\tif(typeof g[d[columnid]] == 'undefined') g[d[columnid]] = 0;\n\t\t\t\t\tg[d[columnid]]++;\n\t\t\t\t} else if(aggr=='MIN') {\n\t\t\t\t\tif(typeof g[d[columnid]] == 'undefined') g[d[columnid]] = Infinity;\n\t\t\t\t\tif(d[exprcolid] < g[d[columnid]]) g[d[columnid]] = d[exprcolid];\n\t\t\t\t} else if(aggr=='MAX') {\n\t\t\t\t\tif(typeof g[d[columnid]] == 'undefined') g[d[columnid]] = -Infinity;\n\t\t\t\t\tif(d[exprcolid] > g[d[columnid]]) g[d[columnid]] = d[exprcolid];\n\t\t\t\t} else if(aggr=='FIRST') {\n\t\t\t\t\tif(typeof g[d[columnid]] == 'undefined') g[d[columnid]] = d[exprcolid];\n\t\t\t\t} else if(aggr=='LAST') {\n\t\t\t\t\tg[d[columnid]] = d[exprcolid];\n\t\t\t\t} else if(alasql.aggr[aggr]) { // Custom aggregator\n\t\t\t\t\talasql.aggr[aggr](g[d[columnid]],d[exprcolid]);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Wrong aggregator in PIVOT clause');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif(aggr=='AVG') {\n\t\t\tfor(var gx in gr){\n\t\t\t\tvar d = gr[gx];\n\t\t\t\tfor(var colid in d) {\n\t\t\t\t\tif((cols.indexOf(colid) == -1) && (colid != exprcolid)) {\n\t\t\t\t\t\td[colid] = d[colid]/ga[gx][colid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n// columns\n\t\tquery.data = data;\n\n\t\tif(inlist) newcols = inlist;\n\n\t\tvar ncol = query.columns.filter(function(col){return col.columnid == exprcolid})[0];\n\t\tquery.columns = query.columns.filter(function(col){\n\t\t\treturn !(col.columnid == columnid || col.columnid == exprcolid); \n\t\t});\n\t\tnewcols.forEach(function(colid){\n\t\t\tvar nc = cloneDeep(ncol);\n\t\t\tnc.columnid = colid;\n\t\t\tquery.columns.push(nc);\n\t\t});\n\t};\n};\n\n\t// var columnid = this.pivot.columnid;\n\n\t// return function(data){\n\t// \t* @type {object} Collection of grouped records \n\t// \tvar gx = {};\n\t// \t/** @type {array} Array of grouped records */\n\t// \tvar gr = [];\n\n// if(false) {\n\n// }\n\n// if(false) {\n\n// }\n// };\n\n/**\n\tCompile UNPIVOT clause\n\t@param {object} query Query object\n\t@return {function} Function for unpivoting\n*/\nyy.Select.prototype.compileUnpivot = function (query) {\n\tvar self = this;\n\tvar tocolumnid = self.unpivot.tocolumnid;\n\tvar forcolumnid = self.unpivot.forcolumnid;\n\tvar inlist = self.unpivot.inlist.map(function(l){return l.columnid});\n\n\treturn function() {\n\t\tvar data = [];\n\n\t\tvar xcols = query.columns\n\t\t.map(function(col){return col.columnid})\n\t\t.filter(function(colid){\n\t\t\treturn inlist.indexOf(colid)==-1 && colid != forcolumnid && colid != tocolumnid; \n\t\t});\n\n\t\tquery.data.forEach(function(d){\n\t\t\tinlist.forEach(function(colid){ \n\t\t\t\tvar nd = {};\n\t\t\t\txcols.forEach(function(xcolid){ nd[xcolid] = d[xcolid]});\n\t\t\t\tnd[forcolumnid] = colid;\n\t\t\t\tnd[tocolumnid] = d[colid];\n\t\t\t\tdata.push(nd);\n\t\t\t});\n\t\t});\n\n\t\tquery.data = data;\n\n\t};\n\n};\n\n/*\r\n//\r\n// ROLLUP(), CUBE(), GROUPING SETS() for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n/** \r\n Calculate ROLLUP() combination\r\n */\r\n\nvar rollup = function (a,query) {\r\n\tvar rr = [];\r\n\tvar mask = 0;\r\n\tvar glen = a.length;\r\n\tfor(var g=0;g<glen+1;g++) {\r\n\t\tvar ss = [];\r\n\t\tfor(var i=0;i<glen;i++) {\r\n\t\t \tif(a[i] instanceof yy.Column) {\r\n\t\t\t\ta[i].nick = escapeq(a[i].columnid);\r\n\n\t\t \t\tquery.groupColumns[escapeq(a[i].columnid)] = a[i].nick;\r\n\t\t\t\tvar aaa = a[i].nick+'\\t'\r\n\t\t\t\t\t+a[i].toJS('p',query.sources[0].alias,query.defcols);\r\n\t\t \t} else {\r\n\t\t \t\tquery.groupColumns[escapeq(a[i].toString())] = escapeq(a[i].toString());\r\n\t\t\t\tvar aaa = escapeq(a[i].toString())+'\\t'\r\n\t\t\t\t\t+a[i].toJS('p',query.sources[0].alias,query.defcols);\r\n\t\t\t}\r\n\n\t\t\tif(mask&(1<<i)) ss.push(aaa);\r\n\t\t}\r\n\t\trr.push(ss);\r\n\t\tmask = (mask<<1)+1; \r\n\t};\r\n\treturn rr;\r\n};\r\n\n/**\r\n Calculate CUBE()\r\n */\r\nvar cube = function (a,query) {\r\n\tvar rr = [];\r\n\tvar glen = a.length;\r\n\tvar glenCube = 1<<glen;\r\n\tfor(var g=0;g<(glenCube);g++) {\r\n\t\tvar ss = [];\r\n\t\tfor(var i=0;i<glen;i++) {\r\n\t\t\tif(g&(1<<i)) //ss.push(a[i]);\r\n\t\t\t\t//ss = cartes(ss,decartes(a[i]));\r\n\n\t\t\t\tss = ss.concat(decartes(a[i],query));\r\n\t\t\t\t//\r\n\t\t}\r\n\t\trr.push(ss);\r\n\t}\r\n\treturn rr;\r\n}\r\n\n/**\r\n GROUPING SETS()\r\n */\r\nvar groupingsets = function(a,query) {\r\n\treturn a.reduce(function(acc,d){\r\n\t\tacc = acc.concat(decartes(d,query));\r\n\t\treturn acc;\r\n\t}, []);\r\n}\r\n\n/**\r\n Cartesian production\r\n */\r\nvar cartes = function(a1,a2){\r\n\tvar rrr =[];\r\n\tfor(var i1=0;i1<a1.length;i1++) {\r\n\t\tfor(var i2=0;i2<a2.length;i2++) {\r\n\t\t\trrr.push(a1[i1].concat(a2[i2]));\r\n\t\t}\r\n\t};\r\n\treturn rrr;\r\n}\r\n\n/**\r\n Prepare groups function\r\n */\r\nfunction decartes(gv,query) {\r\n\n\tif(Array.isArray(gv)) {\r\n\t\tvar res = [[]];\r\n\t\tfor(var t=0; t<gv.length; t++) {\r\n\t\t\tif(gv[t] instanceof yy.Column) {\r\n\n\t\t\t\tgv[t].nick = escapeq(gv[t].columnid);\r\n\t\t\t \tquery.groupColumns[gv[t].nick] = gv[t].nick;\r\n\t\t \t\tres = res.map(function(r){return r.concat(gv[t].nick+'\\t'+gv[t].toJS('p',query.sources[0].alias,query.defcols))}); \t\r\n\n\t\t\t} else if(gv[t] instanceof yy.FuncValue) {\r\n\t\t\t\tquery.groupColumns[escapeq(gv[t].toString())] = escapeq(gv[t].toString());\r\n\t\t \t\tres = res.map(function(r){return r.concat(escapeq(gv[t].toString())+'\\t'+gv[t].toJS('p',query.sources[0].alias,query.defcols))}); \t\r\n\t\t \t\t// to be defined\r\n\t\t\t} else if(gv[t] instanceof yy.GroupExpression) {\r\n\t\t\t\tif(gv[t].type == 'ROLLUP') res = cartes(res,rollup(gv[t].group,query));\r\n\t\t\t\telse if(gv[t].type == 'CUBE') res = cartes(res,cube(gv[t].group,query));\r\n\t\t\t\telse if(gv[t].type == 'GROUPING SETS') res = cartes(res,groupingsets(gv[t].group,query));\r\n\t\t\t\telse throw new Error('Unknown grouping function');\r\n\t\t\t} else if(gv[t] === '') {\r\n\n\t\t\t\tres = [['1\\t1']];\r\n\t\t\t} else {\r\n\n\t\t \t\tres = res.map(function(r){\r\n \t\t\t\t\tquery.groupColumns[escapeq(gv[t].toString())] = escapeq(gv[t].toString());\r\n\t\t \t\t\treturn r.concat(escapeq(gv[t].toString())\r\n\t\t \t\t\t\t+'\\t'\r\n\t\t \t\t\t\t+gv[t].toJS('p',query.sources[0].alias,query.defcols)) \r\n\t\t \t\t}); \t\r\n\n\t\t\t};\r\n\n\t\t};\r\n\t\treturn res;\r\n\t} else if(gv instanceof yy.FuncValue) {\r\n\n\t\tquery.groupColumns[escapeq(gv.toString())] = escapeq(gv.toString());\r\n\t\treturn [gv.toString()+'\\t'+gv.toJS('p',query.sources[0].alias,query.defcols)];\r\n\t} else if(gv instanceof yy.Column) {\r\n\t\t\tgv.nick = escapeq(gv.columnid);\r\n\t\t \tquery.groupColumns[gv.nick] = gv.nick;\r\n\t\t\treturn [gv.nick+'\\t'+gv.toJS('p',query.sources[0].alias,query.defcols)]; // Is this ever happened?\r\n\t\t// } else if(gv instanceof yy.Expression) {\r\n\t\t// \treturn [gv.columnid]; // Is this ever happened?\r\n\t} else {\r\n\t\tquery.groupColumns[escapeq(gv.toString())] = escapeq(gv.toString());\r\n\t\treturn [escapeq(gv.toString())+'\\t'+gv.toJS('p',query.sources[0].alias,query.defcols)];\r\n\n\t};\r\n\n};\r\n\n/*\r\n//\r\n// Select run-time part for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.Select.prototype.compileDefCols = function(query, databaseid) {\r\n\n\tvar defcols = {'.':{}};\r\n\tif(this.from) {\r\n\t\tthis.from.forEach(function(fr){\r\n\t\t\tdefcols['.'][fr.as || fr.tableid] = true;\r\n\t\t\tif(fr instanceof yy.Table) {\r\n\t\t\t\tvar alias = fr.as || fr.tableid;\r\n\n\t\t\t\tvar table = alasql.databases[fr.databaseid || databaseid].tables[fr.tableid];\r\n\n\t\t\t\tif(undefined === table){\r\n\t\t\t\t\tthrow new Error(\"Table does not exists: \"+fr.tableid);;\r\n\t\t\t\t}\r\n\n\t\t\t\tif(table.columns) {\r\n\t\t\t\t\ttable.columns.forEach(function(col){\r\n\t\t\t\t\t\tif(defcols[col.columnid]) {\r\n\t\t\t\t\t\t\tdefcols[col.columnid] = '-'; // Ambigous\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdefcols[col.columnid] = alias;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t} else if(fr instanceof yy.Select) {\r\n\n\t\t\t} else if(fr instanceof yy.Search) {\r\n\n\t\t\t} else if(fr instanceof yy.ParamValue) {\r\n\n\t\t\t} else if(fr instanceof yy.VarValue) {\r\n\n\t\t\t} else if(fr instanceof yy.FuncValue) {\r\n\n\t\t\t} else if(fr instanceof yy.FromData) {\r\n\n\t\t\t} else if(fr instanceof yy.Json) {\r\n\n\t\t\t} else if(fr.inserted) {\r\n\n\t\t\t} else {\r\n\n\t\t\t\tthrow new Error('Unknown type of FROM clause');\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\n\tif(this.joins) {\r\n\t\tthis.joins.forEach(function(jn){\r\n\t\t\tdefcols['.'][jn.as || jn.table.tableid] = true;\r\n\n\t\t\tif(jn.table) {\r\n\t\t\t\tvar alias = jn.table.tableid;\r\n\t\t\t\tif(jn.as) alias = jn.as;\r\n\t\t\t\tvar alias = jn.as || jn.table.tableid;\r\n\t\t\t\tvar table = alasql.databases[jn.table.databaseid || databaseid].tables[jn.table.tableid];\r\n\n\t\t\t\tif(table.columns) {\r\n\t\t\t\t\ttable.columns.forEach(function(col){\r\n\t\t\t\t\t\tif(defcols[col.columnid]) {\r\n\t\t\t\t\t\t\tdefcols[col.columnid] = '-'; // Ambigous\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdefcols[col.columnid] = alias;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t} else if(jn.select) {\r\n\n\t\t\t} else if(jn.param) {\r\n\n\t\t\t} else if(jn.func) {\r\n\n\t\t\t} else {\r\n\t\t\t\tthrow new Error('Unknown type of FROM clause');\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\t// for(var k in defcols) {\r\n\t// \tif(defcols[k] == '-') defcols[k] = undefined;\r\n\t// }\r\n\n\treturn defcols;\r\n}\n/*\r\n//\r\n// UNION for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n// SELECT UNION statement\r\n\nyy.Union = function (params) { return yy.extend(this, params); }\r\nyy.Union.prototype.toString = function () {\r\n\treturn 'UNION';\r\n};\r\n\nyy.Union.prototype.compile = function (tableid) {\r\n\treturn null;\r\n};\n/*\r\n//\r\n// CROSS AND OUTER APPLY for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.Apply = function (params) { \r\n\treturn yy.extend(this, params); \r\n}\r\n\nyy.Apply.prototype.toString = function () {\r\n\tvar s = this.applymode+' APPLY ('+this.select.toString()+')';\r\n\n\tif(this.as) \r\n\t\ts += ' AS '+this.as;\r\n\n\treturn s;\r\n};\r\n\n/*\r\n//\r\n// CROSS AND OUTER APPLY for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.Over = function (params) { return yy.extend(this, params); }\r\nyy.Over.prototype.toString = function () {\r\n\tvar s = 'OVER (';\r\n\tif(this.partition) {\r\n\t\ts += 'PARTITION BY '+this.partition.toString();\r\n\t\tif(this.order) s+=' ';\r\n\t}\r\n\tif(this.order) {\r\n\t\ts += 'ORDER BY '+this.order.toString();\r\n\t}\r\n\ts += ')';\r\n\treturn s;\r\n};\r\n\n/*\r\n//\r\n// Expressions for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n/**\r\n  \tExpression statement ( = 2*2; )\r\n  \t@class \r\n\t@param {object} params Initial parameters\r\n*/\r\nyy.ExpressionStatement = function(params) { return yy.extend(this, params); };\r\n\n/**\r\n\tConvert AST to string\r\n\t@this ExpressionStatement\r\n\t@return {string}\r\n*/\r\nyy.ExpressionStatement.prototype.toString = function() {\r\n\treturn this.expression.toString();\r\n};\r\n/**\r\n\tExecute statement\r\n\t@param {string} databaseid Database identificatro\r\n\t@param {object} params Statement parameters\r\n\t@param {statement-callback} cb Callback\r\n\t@return {object} Result value\r\n*/\r\nyy.ExpressionStatement.prototype.execute = function (databaseid, params, cb) {\r\n\tif(this.expression) {\r\n\n\t\talasql.precompile(this,databaseid,params); // Precompile queries\r\n\t\tvar exprfn =  new Function(\"params,alasql,p\",'var y;return '+this.expression.toJS('({})','', null)).bind(this);\r\n\t\tvar res = exprfn(params,alasql);\r\n\t\tif(cb) {\r\n\t\t\tres = cb(res);\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n};\r\n\n/**\r\n\tExpression class\r\n\t@class\r\n\t@param {object} params Initial parameters\r\n*/\r\n\nyy.Expression = function(params) { return yy.extend(this, params); };\r\n\n/**\r\n\tConvert AST to string\r\n\t@this ExpressionStatement\r\n\t@return {string}\r\n*/\r\nyy.Expression.prototype.toString = function(dontas) {\r\n\tvar s = this.expression.toString(dontas);\r\n\tif(this.order) {\r\n\t\ts += ' '+this.order.toString();\r\n\t}\r\n\tif(this.nocase) {\r\n\t\ts += ' COLLATE NOCASE';\r\n\t}\r\n\treturn s;\r\n};\r\n\n/**\r\n\tFind aggregator in AST subtree\r\n\t@this ExpressionStatement\r\n\t@param {object} query Query object\r\n*/\r\nyy.Expression.prototype.findAggregator = function (query){\r\n\tif(this.expression.findAggregator) {\r\n\t\tthis.expression.findAggregator(query);\r\n\t}\r\n};\r\n\n/**\r\n\tConvert AST to JavaScript expression\r\n\t@this ExpressionStatement\r\n\t@param {string} context Context string, e.g. 'p','g', or 'x'\r\n\t@param {string} tableid Default table name\r\n\t@param {object} defcols Default columns dictionary\r\n\t@return {string} JavaScript expression\r\n*/\r\n\nyy.Expression.prototype.toJS = function(context, tableid, defcols) {\r\n\n\tif(this.expression.reduced) {\r\n\t\treturn 'true';\r\n\t}\r\n\treturn this.expression.toJS(context, tableid, defcols);\r\n};\r\n\n/**\r\n\tCompile AST to JavaScript expression\r\n\t@this ExpressionStatement\r\n\t@param {string} context Context string, e.g. 'p','g', or 'x'\r\n\t@param {string} tableid Default table name\r\n\t@param {object} defcols Default columns dictionary\r\n\t@return {string} JavaScript expression\r\n*/\r\n\nyy.Expression.prototype.compile = function(context, tableid, defcols){\r\n\n\tif(this.reduced) {\r\n\t\treturn returnTrue();\r\n\t}\r\n\treturn new Function('p','var y;return '+this.toJS(context, tableid, defcols));\r\n};\r\n\n/**\r\n\tJavaScript class\r\n\t@class\r\n*/\r\nyy.JavaScript = function(params) { return yy.extend(this, params); };\r\nyy.JavaScript.prototype.toString = function() {\r\n\tvar s = '``'+this.value+'``';\r\n\treturn s;\r\n};\r\n\nyy.JavaScript.prototype.toJS = function( /* context, tableid, defcols*/ ) {\r\n\n\treturn '('+this.value+')';\r\n};\r\nyy.JavaScript.prototype.execute = function (databaseid, params, cb) {\r\n\tvar res = 1;\r\n\tvar expr =  new Function(\"params,alasql,p\",this.value);\r\n\texpr(params,alasql);\r\n\tif(cb){\r\n\t\tres = cb(res);\r\n\t}\r\n\treturn res;\r\n};\r\n\n/**\r\n\tLiteral class\r\n\t@class\r\n\t@example\r\n\tMyVar, [My vairable], `MySQL variable`\r\n*/\r\n\nyy.Literal = function (params) { return yy.extend(this, params); };\r\nyy.Literal.prototype.toString = function(dontas) {\r\n\tvar s = this.value;\r\n\tif(this.value1){\r\n\t\ts = this.value1+'.'+s; \r\n\t}\r\n\tif(this.alias && !dontas) s += ' AS '+this.alias;\r\n//\telse s = tableid+'.'+s;\r\n\treturn s;\r\n};\r\n\n/**\r\n\tJoin class\r\n\t@class\r\n*/\r\n\nyy.Join = function (params) { return yy.extend(this, params); };\r\nyy.Join.prototype.toString = function() {\r\n\tvar s = ' ';\r\n\tif(this.joinmode){\r\n\t\ts += this.joinmode+' ';\r\n\t}\r\n\ts += 'JOIN ' + this.table.toString();\r\n\treturn s;\r\n};\r\n\n// }\r\n\n/**\r\n\tTable class\r\n\t@class\r\n*/\r\n\nyy.Table = function (params) { return yy.extend(this, params); };\r\nyy.Table.prototype.toString = function() {\r\n\tvar s = this.tableid;\r\n//\tif(this.joinmode)\r\n\tif(this.databaseid){\r\n\t\ts = this.databaseid+'.'+s;\r\n\t}\r\n\treturn s;\r\n};\r\n\n/**\r\n\tView class\r\n\t@class\r\n*/\r\n\nyy.View = function (params) { return yy.extend(this, params); };\r\nyy.View.prototype.toString = function() {\r\n\tvar s = this.viewid;\r\n//\tif(this.joinmode)\r\n\tif(this.databaseid){\r\n\t\ts = this.databaseid+'.'+s;\r\n\t}\r\n\treturn s;\r\n};\r\n\n/**\r\n\tBinary operation class\r\n\t@class\r\n*/\r\nyy.Op = function (params) { return yy.extend(this, params); };\r\nyy.Op.prototype.toString = function() {\r\n\tif(this.op === 'IN' || this.op === 'NOT IN') {\r\n\t\treturn this.left.toString()+\" \"+this.op+\" (\"+this.right.toString()+\")\";\r\n\t}\r\n\tif(this.allsome) {\r\n\t\treturn this.left.toString()+\" \"+this.op+\" \"+this.allsome+' ('+this.right.toString()+')';\r\n\t}\r\n\tif(this.op === '->' || this.op === '!') {\r\n\t\tvar s = this.left.toString()+this.op;\r\n\n\t\tif(typeof this.right !== 'string' && typeof this.right !== 'number' ){\r\n\t\t\ts += '(';\r\n\t\t}\r\n\n\t\ts += this.right.toString();\r\n\n\t\tif(typeof this.right !== 'string' && typeof this.right !== 'number' ){\r\n\t\t\ts += ')';\r\n\t\t}\r\n\n\t\treturn s;\r\n\t}\r\n\treturn \tthis.left.toString() + \" \" + this.op + \" \" +\r\n\t\t\t(this.allsome ? this.allsome+' ' : '') +\r\n\t\t\tthis.right.toString();\r\n};\r\n\nyy.Op.prototype.findAggregator = function (query){\r\n\n\tif(this.left && this.left.findAggregator){\r\n\t\tthis.left.findAggregator(query);\r\n\t}\r\n\t// Do not go in > ALL\r\n\tif(this.right && this.right.findAggregator && (!this.allsome)) {\r\n\t\tthis.right.findAggregator(query);\r\n\t}\r\n};\r\n\nyy.Op.prototype.toType = function(tableid) {\r\n\tif(['-','*','/','%','^'].indexOf(this.op) >-1){\r\n\t\treturn 'number';\r\n\t}\r\n\tif(['||'].indexOf(this.op) >-1){\r\n\t\treturn 'string';\r\n\t}\r\n\tif(this.op === '+') {\r\n\t\tif(this.left.toType(tableid) === 'string' || this.right.toType(tableid) === 'string'){\r\n\t\t\treturn 'string';\r\n\t\t}\r\n\t\tif(this.left.toType(tableid) === 'number' || this.right.toType(tableid) === 'number'){ \r\n\t\t\treturn 'number';\r\n\t\t}\r\n\t}\r\n\n\tif(['AND','OR','NOT','=','==','===', '!=','!==','!===','>','>=','<','<=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', 'REGEXP', 'GLOB'].indexOf(this.op) >-1 ){\r\n\t\treturn 'boolean';\r\n\t}\r\n\n\tif(this.op === 'BETWEEN' || this.op === 'NOT BETWEEN' || this.op === 'IS NULL' || this.op === 'IS NOT NULL'){\r\n\t\treturn 'boolean';\r\n\t}\r\n\n\tif(this.allsome){\r\n\t\treturn 'boolean';\r\n\t}\r\n\n\tif(!this.op){\r\n\t\treturn this.left.toType();\r\n\t}\r\n\n\treturn 'unknown';\r\n};\r\n\nyy.Op.prototype.toJS = function(context,tableid,defcols) {\r\n\n\tvar s;\r\n\tvar refs = [];\r\n\tvar op = this.op;\r\n\tvar _this = this;\r\n\t//var leftJS = function(){return _this.left.toJS(context,tableid, defcols)};\r\n\t//var rightJS = function(){return _this.right.toJS(context,tableid, defcols)};\r\n\tvar accessedLeft = false, accessedRight = false\r\n\tvar ref = function(expr) {\r\n\t\tif (expr.toJS) {\r\n\t\t\texpr = expr.toJS(context, tableid, defcols)\r\n\t\t}\r\n\t\tvar i = refs.push(expr) - 1\r\n\t\treturn 'y[' + i + ']'\r\n\t}\r\n\tvar leftJS = function() {\r\n\t\treturn ref(_this.left)\r\n\t}\r\n\tvar rightJS = function() {\r\n\t\treturn ref(_this.right)\r\n\t}\r\n\n\tif(this.op === '='){\r\n\t\top = '===';\r\n\t} else if(this.op === '<>'){\r\n\t\top = '!=';\r\n\t} else if(this.op === 'OR'){\r\n\t\top = '||';\r\n\t}\r\n\n\t// Arrow operator\r\n\tif(this.op === '->') {\r\n\t\t// Expression to prevent error if object is empty (#344)\r\n\t\tvar ljs = '('+leftJS()+'||{})';\r\n\n\t\tif(typeof this.right === \"string\") {\r\n\t\t\ts = ljs +'[\"'+this.right+'\"]';\r\n\n\t\t} else if(typeof this.right === \"number\") {\r\n\t\t\ts = ljs+'['+this.right+']';\r\n\n\t\t} else if(this.right instanceof yy.FuncValue) {\r\n\t\t\tvar ss = [];\r\n\t\t\tif(!(!this.right.args || 0 === this.right.args.length)) {\r\n\t\t\t\tvar ss = this.right.args.map(ref);\r\n\t\t\t}\r\n\t\t\ts = \t''\r\n\t\t\t\t\t+ ljs\r\n\t\t\t\t\t+ \"['\"\r\n\t\t\t\t\t+ \tthis.right.funcid\r\n\t\t\t\t\t+ \"'](\"\r\n\t\t\t\t\t+ \tss.join(',')\r\n\t\t\t\t\t+ ')'; \r\n\t\t} else {\r\n\n\t\t\ts = \t''\r\n\t\t\t\t\t+ ljs\r\n\t\t\t\t\t+ '['\r\n\t\t\t\t\t+\trightJS()\r\n\t\t\t\t\t+ ']';\r\n\t\t}\r\n\t}\r\n\n\tif(this.op === '!') {\r\n\t\tif(typeof this.right === \"string\") {\r\n\t\t\ts = \t''\r\n\t\t\t\t\t+ 'alasql.databases[alasql.useid].objects['\r\n\t\t\t\t\t+ \tleftJS()\r\n\t\t\t\t\t+ '][\"'\r\n\t\t\t\t\t+\tthis.right\r\n\t\t\t\t\t+ '\"]';\r\n\t\t}\t\t\r\n\t\t// TODO - add other cases\r\n\t}\r\n\n\tif(this.op === 'IS') {\r\n\t\ts = \t''\r\n\t\t\t\t+ '('\r\n\t\t\t\t+\t'(' + leftJS()  + \"==null)\"\t// Cant be ===\r\n\t\t\t\t+\t\" === \"\r\n\t\t\t\t+\t'(' + rightJS() + \"==null)\"\t// Cant be ===\r\n\t\t\t\t+ ')';\r\n\t}\r\n\n\tif(this.op === '==') {\r\n\t\ts = \t''\r\n\t\t\t\t+ 'alasql.utils.deepEqual('\r\n\t\t\t\t+\tleftJS()\r\n\t\t\t\t+ \t','\r\n\t\t\t\t+ \trightJS()\r\n\t\t\t\t+ ')';\r\n\t}\r\n\n\tif(this.op === '===' || this.op === '!===') {\r\n\t\ts = \t''\r\n\t\t\t\t+ '('\r\n\t\t\t\t+ \t( (this.op === '!===') ? '!' : '')\r\n\t\t\t\t+\t'('\r\n\t\t\t\t+\t\t'(' + leftJS() + \").valueOf()\"\r\n\t\t\t\t+ \t\t'==='\r\n\t\t\t\t+ \t\t'(' + rightJS() + \").valueOf()\"\r\n\t\t\t\t+ \t')'\r\n\t\t\t\t+ ')';\r\n\n\t}\r\n\n\tif(this.op === '!==') {\r\n\t\ts = \t''\r\n\t\t\t\t+ '(!alasql.utils.deepEqual('\r\n\t\t\t\t+ \tleftJS()\r\n\t\t\t\t+ \t\",\"\r\n\t\t\t\t+ \trightJS()\r\n\t\t\t\t+ '))';\r\n\t}\r\n\tif(this.op === '||') {\r\n\t\ts = \t''\r\n\t\t\t\t+ \"(''+(\"\r\n\t\t\t\t+ \tleftJS()\r\n\t\t\t\t+ \t\"||'')+(\"\r\n\t\t\t\t+ \trightJS()\r\n\t\t\t\t+ '||\"\"))';\r\n\t}\r\n\tif(this.op === 'LIKE' || this.op === 'NOT LIKE') {\r\n\t\tvar s = '('\r\n\t\t\t\t+ \t( (this.op === 'NOT LIKE') ? '!' : '')\r\n\t\t\t\t+ \t'alasql.utils.like(' + rightJS()+ \",\" + leftJS();\r\n\t\tif(this.escape) {\r\n\t\t\ts += ','+ref(this.escape);\r\n\t\t}\r\n\t\ts += '))';\r\n\t}\r\n\tif(this.op === 'REGEXP') {\r\n\t\ts = 'alasql.stdfn.REGEXP_LIKE(' \r\n\t\t\t+ leftJS()\r\n\t\t\t+ ','\r\n\t\t\t+ rightJS()\r\n\t\t\t+ ')';\r\n\t}\r\n\tif(this.op === 'GLOB') {\r\n\t\ts = 'alasql.utils.glob(' \r\n\t\t\t+ leftJS()\r\n\t\t\t+ ','\r\n\t\t\t+ rightJS()\r\n\t\t\t+ ')';\r\n\t}\r\n\n\tif(this.op === 'BETWEEN' || this.op === 'NOT BETWEEN') {\r\n\t\tvar left = leftJS()\r\n\t\ts = \t''\r\n\t\t\t\t+ '('\r\n\t\t\t\t+ \t( (this.op === 'NOT BETWEEN') ? '!' : '')\r\n\t\t\t\t+ \t'('\r\n\t\t\t\t+ \t\t'('\r\n\t\t\t\t+ \t\t\tref(this.right1)\r\n\t\t\t\t+\t\t\t'<='\r\n\t\t\t\t+\t\t\tleft\r\n\t\t\t\t+\t\t') && ('\r\n\t\t\t\t+\t\t\tleft\r\n\t\t\t\t+\t\t\t'<='\r\n\t\t\t\t+\t\t\tref(this.right2)\r\n\t\t\t\t+\t\t')'\r\n\t\t\t\t+ \t')'\t\t\r\n\t\t\t\t+ ')';\t\t\r\n\n\t}\r\n\n\tif(this.op === 'IN') {\r\n\t\tif(this.right instanceof yy.Select ) {\r\n\t\t\ts = '(';\r\n\n\t\t\ts += 'alasql.utils.flatArray(this.queriesfn['+(this.queriesidx)+'](params,null,'+context+'))';\r\n\t\t\ts += '.indexOf(';\r\n\t\t\ts += leftJS()+')>-1)';\r\n\t\t} else if(Array.isArray(this.right)) {\r\n\n\t\t\ts \t= '(['\r\n\t\t\t\t+ this.right.map(ref).join(',')\r\n\t\t\t\t+ '].indexOf('\r\n\t\t\t\t+ leftJS()\r\n\t\t\t\t+ ')>-1)';\r\n\n\t\t} else {\r\n\t\t\ts = '('+rightJS()+'.indexOf('\r\n\t\t\t  \t+ leftJS()+')>-1)';\r\n\n\t\t}\r\n\t}\r\n\n\tif(this.op === 'NOT IN') {\r\n\t\tif(this.right instanceof yy.Select ) {\r\n\t\t\ts = '(';\r\n\t\t\t\t//this.query.queriesdata['+this.queriesidx+']\r\n\n\t\t\ts += 'alasql.utils.flatArray(this.queriesfn['+(this.queriesidx)+'](params,null,p))';\r\n\t\t\ts +='.indexOf(';\r\n\t\t\ts += leftJS()+')<0)';\r\n\t\t} else if(Array.isArray(this.right)) {\r\n\n\t\t\ts = '(['+this.right.map(ref).join(',')+'].indexOf(';\r\n\t\t\ts += leftJS()+')<0)';\r\n\t\t} else {\r\n\t\t\ts = '('+rightJS()+'.indexOf(';\r\n\t\t\ts += leftJS()+')==-1)';\r\n\n\t\t}\r\n\t}\r\n\n\tif(this.allsome === 'ALL') {\r\n\t\tvar s;\r\n\t\tif(this.right instanceof yy.Select ) {\r\n\n\t\t \ts = 'alasql.utils.flatArray(this.query.queriesfn['+(this.queriesidx)+'](params,null,p))';\r\n\n\t\t\ts +='.every(function(b){return (';\r\n\t\t\ts += leftJS()+')'+op+'b})';\r\n\t\t} else if(Array.isArray(this.right) ) {\r\n\t\t\ts = '' + (this.right.length == 1 ? ref(this.right[0]) : '['+this.right.map(ref).join(',')+']')\r\n\t\t\ts += '.every(function(b){return (';\r\n\t\t\ts += leftJS()+')'+op+'b})';\r\n\t\t} else {\r\n\t\t\tthrow new Error('NOT IN operator without SELECT');\r\n\t\t}\t\t\r\n\t}\r\n\n\tif(this.allsome === 'SOME' || this.allsome === 'ANY') {\r\n\t\tvar s;\r\n\t\tif(this.right instanceof yy.Select ) {\r\n\n\t\t\ts = 'alasql.utils.flatArray(this.query.queriesfn['+(this.queriesidx)+'](params,null,p))';\r\n\t\t\ts +='.some(function(b){return (';\r\n\t\t\ts += leftJS()+')'+op+'b})';\r\n\t\t} else if(Array.isArray(this.right) ) {\r\n\t\t\ts = '' + (this.right.length == 1 ? ref(this.right[0]) : '['+this.right.map(ref).join(',')+']')\r\n\t\t\ts += '.some(function(b){return (';\r\n\t\t\ts += leftJS()+')'+op+'b})';\r\n\t\t} else {\r\n\t\t\tthrow new Error('SOME/ANY operator without SELECT');\r\n\t\t}\t\t\r\n\t}\r\n\n// Special case for AND optimization (if reduced)\r\n\tif(this.op === 'AND') {\r\n\t\tif(this.left.reduced) {\r\n\t\t\tif(this.right.reduced) {\r\n\t\t\t\treturn 'true';\r\n\t\t\t} else {\r\n\t\t\t\ts = rightJS();\r\n\t\t\t}\r\n\t\t} else if(this.right.reduced) {\r\n\t\t\ts = leftJS();\r\n\t\t}\t\t\t\r\n\n\t\t// Otherwise process as regular operation (see below)\r\n\t\top = '&&';\r\n\n\t}\r\n\n\t// if(this.op === '^') {\r\n\t// \t// return \t'Math.pow('\r\n\t// \t// \t\t+ leftJS()\r\n\t// \t// \t\t+ ','\r\n\t// \t// \t\t+ rightJS()\r\n\t// \t// \t\t+ ')';\r\n\t// }\r\n\n\t// Change names\r\n\n\tvar expr = s || '(' + leftJS() + op + rightJS() + ')'\r\n\n\tvar declareRefs = 'y=[(' + refs.join('), (') + ')]'\r\n\n\tif (op == '&&' || op == '||' || op == 'IS' || op == 'IS NULL' || op == 'IS NOT NULL') {\r\n\t\treturn '(' + declareRefs + ', ' + expr + ')'\r\n\t}\r\n\telse {\r\n\t\treturn '(' + declareRefs + ', '\r\n\t\t\t+ 'y.some(function(e){return e == null}) ? void 0 : ' + expr + ')' \r\n\t}\r\n}\r\n\nyy.VarValue = function (params) { return yy.extend(this, params); }\r\nyy.VarValue.prototype.toString = function() {\r\n\treturn '@'+this.variable;\r\n};\r\n\nyy.VarValue.prototype.toType = function() {\r\n\treturn 'unknown';\r\n};\r\n\nyy.VarValue.prototype.toJS = function() {\r\n\treturn \"alasql.vars['\"+this.variable+\"']\";\r\n}\r\n\nyy.NumValue = function (params) { return yy.extend(this, params); }\r\nyy.NumValue.prototype.toString = function() {\r\n\treturn this.value.toString();\r\n};\r\n\nyy.NumValue.prototype.toType = function() {\r\n\treturn 'number';\r\n};\r\n\nyy.NumValue.prototype.toJS = function() {\r\n\treturn \"\"+this.value;\r\n}\r\n\nyy.StringValue = function (params) { return yy.extend(this, params); }\r\nyy.StringValue.prototype.toString = function() {\r\n\treturn \"'\"+this.value.toString()+\"'\";\r\n}\r\n\nyy.StringValue.prototype.toType = function() {\r\n\treturn 'string';\r\n}\r\n\nyy.StringValue.prototype.toJS = function() {\r\n\n//\treturn \"'\"+doubleqq(this.value)+\"'\";\r\n\treturn \"'\"+escapeq(this.value)+\"'\";\r\n\n}\r\n\nyy.DomainValueValue = function (params) { return yy.extend(this, params); }\r\nyy.DomainValueValue.prototype.toString = function() {\r\n\treturn 'VALUE'\r\n}\r\n\nyy.DomainValueValue.prototype.toType = function() {\r\n\treturn 'object';\r\n}\r\n\nyy.DomainValueValue.prototype.toJS = function(context, tableid, defcols) {\r\n\n//\treturn \"'\"+doubleqq(this.value)+\"'\";\r\n\treturn context;\r\n}\r\n\nyy.ArrayValue = function (params) { return yy.extend(this, params); }\r\nyy.ArrayValue.prototype.toString = function() {\r\n\treturn 'ARRAY[]'\r\n}\r\n\nyy.ArrayValue.prototype.toType = function() {\r\n\treturn 'object';\r\n}\r\n\nyy.ArrayValue.prototype.toJS = function(context, tableid, defcols) {\r\n\n//\treturn \"'\"+doubleqq(this.value)+\"'\";\r\n\treturn '[(' + this.value.map(function(el) {\r\n\t\treturn el.toJS(context, tableid, defcols)\r\n\t}).join('), (') + ')]'\r\n\n}\r\n\nyy.LogicValue = function (params) { return yy.extend(this, params); }\r\nyy.LogicValue.prototype.toString = function() {\r\n\treturn this.value?'TRUE':'FALSE';\r\n}\r\n\nyy.LogicValue.prototype.toType = function() {\r\n\treturn 'boolean';\r\n}\r\n\nyy.LogicValue.prototype.toJS = function() {\r\n\treturn this.value?'true':'false';\r\n}\r\n\nyy.NullValue = function (params) { return yy.extend(this, params); }\r\nyy.NullValue.prototype.toString = function() {\r\n\treturn 'NULL';\r\n}\r\nyy.NullValue.prototype.toJS = function() {\r\n\treturn 'undefined';\r\n//\treturn 'undefined';\r\n}\r\n\nyy.ParamValue = function (params) { return yy.extend(this, params); }\r\nyy.ParamValue.prototype.toString = function() {\r\n\treturn '$'+this.param;\r\n}\r\nyy.ParamValue.prototype.toJS = function() {\r\n\tif(typeof this.param === \"string\"){\r\n\t\treturn \"params['\"+this.param+\"']\";\r\n\t}\r\n\n\treturn \"params[\"+this.param+\"]\";\r\n}\r\n\nyy.UniOp = function (params) { return yy.extend(this, params); }\r\nyy.UniOp.prototype.toString = function() {\r\n\tvar s;\r\n\ts = void 0;\r\n\tif (this.op === '~') {\r\n\t\ts = this.op + this.right.toString();\r\n\t}\r\n\tif (this.op === '-') {\r\n\t\ts = this.op + this.right.toString();\r\n\t}\r\n\tif (this.op === '+') {\r\n\t\ts = this.op + this.right.toString();\r\n\t}\r\n\tif (this.op === '#') {\r\n\t\ts = this.op + this.right.toString();\r\n\t}\r\n\tif (this.op === 'NOT') {\r\n\t\ts = this.op + '(' + this.right.toString() + ')';\r\n\t}\r\n\tif (this.op === null) {\r\n\t\ts = '(' + this.right.toString() + ')';\r\n\t}\r\n\tif (!s) {\r\n\t\ts = '(' + this.right.toString() + ')';\r\n\t}\r\n\treturn s;\r\n};\r\n\nyy.UniOp.prototype.findAggregator = function (query){\r\n\tif(this.right.findAggregator){\r\n\t\tthis.right.findAggregator(query);\r\n\t}\r\n};\r\n\nyy.UniOp.prototype.toType = function() {\r\n\tif(this.op === '-'){\r\n\t\treturn 'number';\r\n\t}\r\n\n\tif(this.op === '+'){\r\n\t\treturn 'number';\r\n\t}\r\n\n\tif(this.op === 'NOT'){ \r\n\t\treturn 'boolean';\r\n\t}\r\n\n\t// Todo: implement default case\r\n};\r\n\nyy.UniOp.prototype.toJS = function(context, tableid, defcols) {\r\n\tif(this.op === '~'){\r\n\t\treturn \"(~(\"+this.right.toJS(context, tableid, defcols)+\"))\";\r\n\t}\r\n\n\tif(this.op === '-'){\r\n\t\treturn \"(-(\"+this.right.toJS(context, tableid, defcols)+\"))\";\r\n\t}\r\n\n\tif(this.op === '+'){\r\n\t\treturn \"(\"+this.right.toJS(context, tableid, defcols)+\")\";\r\n\t}\r\n\n\tif(this.op === 'NOT'){\r\n\t\treturn '!('+this.right.toJS(context, tableid, defcols)+')';\r\n\t}\r\n\n\tif(this.op === '#') {\r\n\t\tif(this.right instanceof yy.Column) {\r\n\t\t\treturn \"(alasql.databases[alasql.useid].objects[\\'\"+this.right.columnid+\"\\'])\";\r\n\t\t} else {\r\n\t\t\treturn \"(alasql.databases[alasql.useid].objects[\"\r\n\t\t\t\t+this.right.toJS(context, tableid, defcols)+\"])\";\r\n\t\t}\r\n\t}\r\n\n\t// Please avoid === here\t\r\n\tif(this.op == null){ \t\t// jshint ignore:line\r\n\t\treturn '('+this.right.toJS(context, tableid, defcols)+')';\r\n\t}\r\n\n\t// Todo: implement default case.\r\n};\r\n\nyy.Column = function(params) { return yy.extend(this, params); }\r\nyy.Column.prototype.toString = function(dontas) {\r\n\tvar s;\r\n\tif(this.columnid == +this.columnid) { // jshint ignore:line\r\n\t\ts = '['+this.columnid+']';\r\n\t} else {\r\n\t\ts = this.columnid;\r\n\t}\r\n\tif(this.tableid) {\r\n\t\tif(+this.columnid === this.columnid) {\r\n\t\t\ts = this.tableid+s;\r\n\t\t} else {\r\n\t\t\ts = this.tableid+'.'+s;\r\n\t\t}\r\n\t\tif(this.databaseid) {\r\n\t\t\ts = this.databaseid+'.'+s;\r\n\t\t}\r\n\t}\r\n\tif(this.alias && !dontas) s += ' AS '+this.alias;\r\n\treturn s;\r\n};\r\n\nyy.Column.prototype.toJS = function(context, tableid, defcols) {\r\n\n\tvar s = '';\r\n\tif(!this.tableid && tableid === '' && !defcols) {\r\n\t\tif(this.columnid !== '_') {\r\n\t\t\ts = context+'[\\''+this.columnid+'\\']';\r\n\t\t} else {\r\n\t\t\tif(context === 'g') {\r\n\t\t\t\ts = 'g[\\'_\\']';\t\t\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\ts = context;\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tif(context === 'g') {\r\n\t\t\t// if(this.columnid == '_') {\r\n\t\t\t// } else {\r\n\t\t\t\ts = 'g[\\''+this.nick+'\\']';\t\t\t\t\t\t\r\n\t\t\t// }\r\n\t\t} else if(this.tableid) {\r\n\t\t\tif(this.columnid !== '_') {\r\n\t\t\t\t// if() {\r\n\t\t\t\t\t// s = context+'[\\''+tableid + '\\'][\\''+this.tableid+'\\'][\\''+this.columnid+'\\']';\r\n\t\t\t\t// } else {\r\n\t\t\t\t\ts = context+'[\\''+(this.tableid) + '\\'][\\''+this.columnid+'\\']';\t\t\t\r\n\t\t\t\t// }\r\n\t\t\t} else {\r\n\t\t\t\tif(context === 'g') {\r\n\t\t\t\t\ts = 'g[\\'_\\']';\t\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts = context+'[\\''+(this.tableid) + '\\']';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if(defcols) {\r\n\t\t\tvar tbid = defcols[this.columnid];\r\n\t\t\tif(tbid === '-') {\r\n\t\t\t\tthrow new Error('Cannot resolve column \"'+this.columnid+'\" because it exists in two source tables');\r\n\t\t\t} else if(tbid) {\r\n\t\t\t\tif(this.columnid !== '_') {\r\n\t\t\t\t\ts = context+'[\\''+(tbid) + '\\'][\\''+this.columnid+'\\']';\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts = context+'[\\''+(tbid) + '\\']';\r\n\t\t\t\t}\r\n\n\t\t\t} else {\r\n\t\t\t\tif(this.columnid !== '_') {\r\n\t\t\t\t\t// if(defcols['.'][this.tableid]) {\r\n\n\t\t\t\t\t// \ts = context+'[\\''+tableid + '\\'][\\''+this.tableid + '\\'][\\''+this.columnid+'\\']';\r\n\t\t\t\t\t// } else {\r\n\t\t\t\t\t\ts = context+'[\\''+(this.tableid || tableid) + '\\'][\\''+this.columnid+'\\']';\r\n\t\t\t\t\t// }\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts = context+'[\\''+(this.tableid || tableid) + '\\']';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if(tableid === -1) {\r\n\n\t\t\t\ts = context+'[\\''+this.columnid+'\\']';\r\n\n\t\t} else {\r\n\t\t\tif(this.columnid !== '_') {\r\n\t\t\t\ts = context+'[\\''+(this.tableid || tableid) + '\\'][\\''+this.columnid+'\\']';\r\n\t\t\t} else {\r\n\t\t\t\ts = context+'[\\''+(this.tableid || tableid) + '\\']';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\n//\tconsole.trace(new Error());\r\n\n\treturn s;\r\n}\r\n\nyy.AggrValue = function(params){ return yy.extend(this, params); }\r\nyy.AggrValue.prototype.toString = function(dontas) {\r\n\tvar s = '';\r\n\tif(this.aggregatorid === 'REDUCE'){\r\n\t\ts += this.funcid+'(';\r\n\t} else{\r\n\t\ts += this.aggregatorid+'(';\r\n\t}\r\n\n\tif(this.distinct){\r\n\t\ts+= 'DISTINCT ';\r\n\t}\r\n\n\tif(this.expression){\r\n\t\ts += this.expression.toString();\r\n\t}\r\n\n\ts += ')';\r\n\n\tif(this.over){\r\n\t\ts += ' '+this.over.toString();\r\n\t} \r\n\n\tif(this.alias && !dontas) s += ' AS '+this.alias;\r\n//\tif(this.alias) s += ' AS '+this.alias;\r\n\treturn s;\r\n};\r\n\nyy.AggrValue.prototype.findAggregator = function (query){\r\n\n//\tvar colas = this.as || this.toString();\r\n\n\tvar colas = escapeq(this.toString())+':'+query.selectGroup.length;\r\n\n\tvar found = false;\r\n\n\tif(!found) {\r\n\t\tif(!this.nick) {\r\n\t\t\tthis.nick = colas;\r\n\t\t\tvar found = false;\r\n\t\t\tfor(var i=0;i<query.removeKeys.length;i++){\r\n\t\t\t\tif(query.removeKeys[i]===colas) {\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!found){\r\n\t\t\t\tquery.removeKeys.push(colas);\r\n\t\t\t}\r\n\t\t}\r\n\t\tquery.selectGroup.push(this);\r\n\t}\r\n\n\treturn;\r\n};\r\n\nyy.AggrValue.prototype.toType = function() {\r\n\tif(['SUM','COUNT','AVG','MIN', 'MAX','AGGR','VAR','STDDEV'].indexOf(this.aggregatorid)>-1){\r\n\t\treturn 'number';\r\n\t}\r\n\n\tif(['ARRAY'].indexOf(this.aggregatorid)>-1){\r\n\t\treturn 'array';\r\n\t}\r\n\n\tif(['FIRST','LAST' ].indexOf(this.aggregatorid)>-1){\r\n\t\treturn this.expression.toType();\r\n\t}\r\n\n\t// todo: implement default;\r\n}\r\n\nyy.AggrValue.prototype.toJS = function(/*context, tableid, defcols*/) {\r\n\n\tvar colas = this.nick;\r\n\tif(colas === undefined){ \r\n\t\tcolas = this.toString();\r\n\t}\r\n\treturn 'g[\\''+colas+'\\']';\r\n}\r\n\nyy.OrderExpression = function(params){ return yy.extend(this, params); }\r\nyy.OrderExpression.prototype.toString = yy.Expression.prototype.toString\r\n\nyy.GroupExpression = function(params){ return yy.extend(this, params); }\r\nyy.GroupExpression.prototype.toString = function() {\r\n\treturn this.type+'('+this.group.toString()+')';\r\n}\r\n\n// Alasql Linq library\r\n\nyy.FromData = function(params) { return yy.extend(this, params); };\r\nyy.FromData.prototype.toString = function() {\r\n\tif(this.data) return 'DATA('+((Math.random()*10e15)|0)+')';\r\n\telse return '?';\r\n};\r\nyy.FromData.prototype.toJS = function(){\r\n\n};\r\n\nyy.Select.prototype.exec = function(params,cb) {\r\n\n\tif(this.preparams) params = this.preparams.concat(params);\r\n\n\tvar databaseid = alasql.useid;\r\n\tdb = alasql.databases[databaseid];\r\n\tvar sql = this.toString();\r\n\tvar hh = hash(sql);\r\n\n\tvar statement = this.compile(databaseid);\r\n\tif(!statement) return;\r\n\tstatement.sql = sql;\r\n\tstatement.dbversion = db.dbversion;\r\n\n\t// Secure sqlCache size\r\n\tif (db.sqlCacheSize > alasql.MAXSQLCACHESIZE) {\r\n\t\tdb.resetSqlCache();\r\n\t}\r\n\tdb.sqlCacheSize++;\r\n\tdb.sqlCache[hh] = statement;\r\n\tvar res = alasql.res = statement(params, cb);\r\n\treturn res;\r\n};\r\n\nyy.Select.prototype.Select = function(){\r\n\tvar self = this;\r\n\tvar agrs = [];\r\n\tif(arguments.length > 1) {\r\n\t\targs = Array.prototype.slice.call(arguments);;\r\n\t} else if(arguments.length == 1) {\r\n\t\tif(Array.isArray(arguments[0])) {\r\n\t\t\targs = arguments[0];\r\n\t\t} else {\r\n\t\t\targs = [arguments[0]];\r\n\t\t}\r\n\t} else {\r\n\t\tthrow new Error('Wrong number of arguments of Select() function');\r\n\t}\r\n\n\tself.columns = [];\r\n\n\targs.forEach(function(arg){\r\n\t\tif(typeof arg == \"string\") {\r\n\t\t\tself.columns.push(new yy.Column({columnid: arg}));\r\n\t\t} else if(typeof arg == \"function\") {\r\n\t\t\tvar pari = 0;\r\n\t\t\tif(self.preparams) {\r\n\t\t\t\tpari = self.preparams.length;\r\n\t\t\t} else {\r\n\t\t\t\tself.preparams = [];\r\n\t\t\t}\r\n\t\t\tself.preparams.push(arg);\r\n\t\t\tself.columns.push(new yy.Column({columnid: \"*\", func:arg, param:pari}));\r\n\t\t} else {\r\n\t\t\t// Unknown type\r\n\t\t}\r\n\t});\r\n\n\treturn self;\r\n};\r\n\nyy.Select.prototype.From = function(tableid){\r\n\tvar self = this;\r\n\tif(!self.from) self.from = [];\r\n\tif(Array.isArray(tableid)) {\r\n\t\tvar pari = 0;\r\n\t\tif(self.preparams) {\r\n\t\t\tpari = self.preparams.length;\r\n\t\t} else {\r\n\t\t\tself.preparams = [];\r\n\t\t}\r\n\t\tself.preparams.push(tableid); \r\n\t\tself.from.push(new yy.ParamValue({param:pari}));\r\n\t} else if(typeof tableid ==\"string\") {\r\n\t\tself.from.push(new yy.Table({tableid:tableid}));\r\n\t} else {\r\n\t\tthrow new Error('Unknown arguments in From() function')\r\n\t}\r\n\treturn self;\r\n}\r\n\nyy.Select.prototype.OrderBy = function(){\r\n\tvar self = this;\r\n\tvar agrs = [];\r\n\n\tself.order = [];\r\n\n\tif(arguments.length == 0) {\r\n\n\t\targs = [\"_\"];\r\n\t} else if(arguments.length > 1) {\r\n\t\targs = Array.prototype.slice.call(arguments);;\r\n\t} else if(arguments.length == 1) {\r\n\t\tif(Array.isArray(arguments[0])) {\r\n\t\t\targs = arguments[0];\r\n\t\t} else {\r\n\t\t\targs = [arguments[0]];\r\n\t\t}\r\n\t} else {\r\n\t\tthrow new Error('Wrong number of arguments of Select() function');\r\n\t}\r\n\n\tif(args.length > 0) {\r\n\t\targs.forEach(function(arg){\r\n\t\t\tvar expr = new yy.Column({columnid:arg});\r\n\t\t\tif(typeof arg == 'function'){\r\n\t\t\t\texpr = arg;\r\n\t\t\t}\r\n\t\t\tself.order.push(new yy.OrderExpression({expression: expr, direction:'ASC'}));\r\n\t\t});\r\n\t}\r\n\treturn self;\r\n}\r\n\nyy.Select.prototype.Top = function(topnum){\r\n\tvar self = this;\r\n\tself.top = new yy.NumValue({value:topnum});\r\n\treturn self;\r\n};\r\n\nyy.Select.prototype.GroupBy = function(){\r\n\tvar self = this;\r\n\tvar agrs = [];\r\n\n\tif(arguments.length > 1) {\r\n\t\targs = Array.prototype.slice.call(arguments);;\r\n\t} else if(arguments.length == 1) {\r\n\t\tif(Array.isArray(arguments[0])) {\r\n\t\t\targs = arguments[0];\r\n\t\t} else {\r\n\t\t\targs = [arguments[0]];\r\n\t\t}\r\n\t} else {\r\n\t\tthrow new Error('Wrong number of arguments of Select() function');\r\n\t}\r\n\n\tself.group = [];\r\n\n\targs.forEach(function(arg){\r\n\t\tvar expr = new yy.Column({columnid:arg});\r\n\t\tself.group.push(expr);\r\n\t});\r\n\n\treturn self;\r\n};\r\n\nyy.Select.prototype.Where = function(expr){\r\n\tvar self = this;\r\n\tif(typeof expr == 'function' ) {\r\n\t\tself.where = expr;\r\n\t}\r\n\treturn self;\r\n};\r\n\n/*\r\n//\r\n// Functions for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.FuncValue = function(params){ return yy.extend(this, params); }\r\nyy.FuncValue.prototype.toString = function(dontas) {\r\n\tvar s = '';\r\n\n    if(alasql.fn[this.funcid]) s += this.funcid;\r\n    else if(alasql.aggr[this.funcid]) s += this.funcid;\r\n    else if(alasql.stdlib[this.funcid.toUpperCase()] || alasql.stdfn[this.funcid.toUpperCase()]) s += this.funcid.toUpperCase();\r\n\n    s += '(';\r\n\tif(this.args && this.args.length > 0) {\r\n\t\ts += this.args.map(function(arg){\r\n\t\t\treturn arg.toString();\r\n\t\t}).join(',');\r\n\t};\r\n\ts += ')';\r\n\tif(this.as && !dontas) s += ' AS '+this.as.toString();\r\n//\tif(this.alias) s += ' AS '+this.alias;\r\n\treturn s;\r\n}\r\n\nyy.FuncValue.prototype.execute = function (databaseid, params, cb) {\r\n\tvar res = 1;\r\n\talasql.precompile(this,databaseid,params); // Precompile queries\r\n\n\tvar expr =  new Function('params,alasql','var y;return '+this.toJS('','',null));\r\n\texpr(params,alasql);\r\n\tif(cb) res = cb(res);\r\n\treturn res;\r\n}\r\n\nyy.FuncValue.prototype.findAggregator = function(query) {\r\n\tif(this.args && this.args.length > 0) {\r\n\t\tthis.args.forEach(function(arg){ \r\n\t\t\tif(arg.findAggregator) arg.findAggregator(query); \r\n\t\t});\r\n\t}\r\n};\r\n\nyy.FuncValue.prototype.toJS = function(context, tableid, defcols) {\r\n\tvar s = '';\r\n    var funcid = this.funcid;\r\n\t// IF this is standard compile functions\r\n\tif(!alasql.fn[funcid] && alasql.stdlib[funcid.toUpperCase()]) {\r\n\t\tif(this.args && this.args.length > 0) {\r\n\t\t\ts += alasql.stdlib[funcid.toUpperCase()].apply(this, this.args.map(function(arg) {return arg.toJS(context, tableid)}));\r\n\t\t} else {\r\n\t\t\ts += alasql.stdlib[funcid.toUpperCase()]();\r\n\t\t}\r\n\t} else if(!alasql.fn[funcid] && alasql.stdfn[funcid.toUpperCase()]) {\r\n\t\tif(this.newid) s+= 'new ';\r\n\t\ts += 'alasql.stdfn.'+this.funcid.toUpperCase()+'(';\r\n\n\t\tif(this.args && this.args.length > 0) {\r\n\t\t\ts += this.args.map(function(arg){\r\n\t\t\t\treturn arg.toJS(context, tableid, defcols);\r\n\t\t\t}).join(',');\r\n\t\t};\r\n\t\ts += ')';\t\t\r\n\t} else {\r\n\t// This is user-defined run-time function\r\n\t// TODO arguments!!!\r\n\n\t\tif(this.newid) s+= 'new ';\r\n\t\ts += 'alasql.fn.'+this.funcid+'(';\r\n\n\t\tif(this.args && this.args.length > 0) {\r\n\t\t\ts += this.args.map(function(arg){\r\n\t\t\t\treturn arg.toJS(context, tableid, defcols);\r\n\t\t\t}).join(',');\r\n\t\t};\r\n\t\ts += ')';\r\n\t}\r\n\n//\tif(this.alias) s += ' AS '+this.alias;\r\n\treturn s;\r\n}\r\n\nvar stdlib = alasql.stdlib = {}\r\nvar stdfn = alasql.stdfn = {}\r\n\nstdlib.ABS = function(a) {return 'Math.abs('+a+')'};\r\nstdlib.CLONEDEEP = function(a) {return 'alasql.utils.cloneDeep('+a+')'};\r\n\nstdfn.CONCAT = function(){\r\n\treturn Array.prototype.slice.call(arguments).join('');\r\n};\r\nstdlib.EXP = function(a) {return 'Math.pow(Math.E,'+a+')'};\r\n\nstdlib.IIF = function(a,b,c) {\r\n\tif(arguments.length == 3) {\r\n\t\treturn  '(('+a+')?('+b+'):('+c+'))';\r\n\t} else {\r\n\t\tthrow new Error('Number of arguments of IFF is not equals to 3');\r\n\t};\r\n};\r\nstdlib.IFNULL = function(a,b) {return '('+a+'||'+b+')'};\r\nstdlib.INSTR = function(s,p) {return '(('+s+').indexOf('+p+')+1)'};\r\n\n//stdlib.LEN = stdlib.LENGTH = function(s) {return '('+s+'+\"\").length';};\r\n\nstdlib.LEN = stdlib.LENGTH = function(s) {return und(s,'y.length');}\r\n//stdlib.LENGTH = function(s) {return '('+s+').length'};\r\n\nstdlib.LOWER = stdlib.LCASE = function(s) {return und(s,'String(y).toLowerCase()');}\r\n//stdlib.LCASE = function(s) {return '('+s+').toLowerCase()';}\r\n\n// LTRIM\r\n\nstdlib.MAX = stdlib.GREATEST = function(){\r\n      return 'Math.max('+Array.prototype.join.call(arguments, ',')+')'\r\n};\r\n\nstdlib.MIN = stdlib.LEAST = function(){\r\n      return 'Math.min('+Array.prototype.join.call(arguments, ',')+')'\r\n};\r\n\nstdlib.SUBSTRING = stdlib.SUBSTR = stdlib.MID = function(a,b,c){\r\n\tif(arguments.length == 2) return und(a,'y.substr('+b+'-1)');\r\n\telse if(arguments.length == 3) return und(a,'y.substr('+b+'-1,'+c+')');\r\n};\r\n\nstdfn.REGEXP_LIKE = function(a,b,c) {\r\n\n\treturn (a||'').search(RegExp(b,c))>-1;\r\n}\r\n\n// Here we uses undefined instead of null\r\nstdlib.ISNULL = stdlib.NULLIF = function(a,b){return '('+a+'=='+b+'?undefined:'+a+')'};\r\n\nstdlib.POWER = function(a,b) {return 'Math.pow('+a+','+b+')'};\r\n\nstdlib.RANDOM = function(r) {\r\n\tif(arguments.length == 0) {\r\n\t\treturn 'Math.random()';\r\n\t} else {\r\n\t\treturn '(Math.random()*('+r+')|0)';\r\n\t}\r\n};\r\nstdlib.ROUND = function(s,d) {\r\n\tif(arguments.length == 2) {\r\n\t\treturn 'Math.round(('+s+')*Math.pow(10,('+d+')))/Math.pow(10,('+d+'))';\r\n\t} else {\r\n\t\treturn 'Math.round('+s+')';\r\n\t}\r\n};\r\nstdlib.CEIL = stdlib.CEILING = function(s) {return 'Math.ceil('+s+')'};\r\nstdlib.FLOOR = function(s) {return 'Math.floor('+s+')'};\r\n\nstdlib.ROWNUM = function() {return '1'};\r\nstdlib.ROW_NUMBER = function() {return '1'};\r\n\nstdlib.SQRT = function(s) {return 'Math.sqrt('+s+')'};\r\n\nstdlib.TRIM = function(s) {return und(s,'y.trim()');}\r\n\nstdlib.UPPER = stdlib.UCASE = function(s) {return und(s,'String(y).toUpperCase()');}\r\n\n// Concatination of strings\r\nstdfn.CONCAT_WS = function() {\r\n    args = Array.prototype.slice.call(arguments);\r\n    return args.slice(1, args.length).join(args[0]);\r\n};\r\n\n//stdlib.UCASE = function(s) {return '('+s+').toUpperCase()';}\r\n//REPLACE\r\n// RTRIM\r\n// SUBSTR\r\n// TRIM\r\n//REPLACE\r\n// RTRIM\r\n// SUBSTR\r\n// TRIM\r\n\n// Aggregator for joining strings\r\nalasql.aggr.GROUP_CONCAT = function(v,s,stage){\r\n    if(stage == 1) {\r\n    \treturn v; \r\n    } else if(stage == 2) {\r\n    \treturn s+','+v;\r\n    }\r\n};\r\n\n// Median\r\n// alasql.aggr.MEDIAN = function(v,s,acc){\r\n\n// };\r\n\nalasql.aggr.MEDIAN = function(v,s,stage){\r\n\tif(stage === 2) {\r\n\t\tif(v === null){\r\n\t\t\treturn s;\r\n\t\t}\r\n\t\ts.push(v);    \r\n\t\treturn s;\r\n\t} else if(stage === 1) {\r\n\t  \tif(v === null){\r\n\t  \t\treturn [];\r\n\t  \t}\r\n\t    return [v];\r\n  \t} else {\r\n\t\tvar p = s.sort();\r\n\t\treturn p[(p.length/2)|0];     \r\n\t};\r\n};\r\n\n// Standard deviation\r\nalasql.aggr.VAR = function(v,s,stage){\r\n\tif(stage === 1) {\r\n\t\tif(v === null){\r\n\t\t\treturn {arr:[],sum:0};\r\n\t\t} \r\n\t\treturn {arr:[v],sum:v};\r\n\t} else if(stage === 2) {\r\n\t\tif(v === null){\r\n\t\t\treturn s;\r\n\t\t} \r\n\t\ts.arr.push(v);\r\n\t\ts.sum += v;\r\n\t\treturn s;\r\n\t} else {\r\n\t\tvar N = s.arr.length;\r\n\t\tvar avg = s.sum / N;\r\n\t\tvar std = 0;\r\n\t\tfor(var i=0;i<N;i++) {\r\n\t\t\tstd += (s.arr[i]-avg)*(s.arr[i]-avg);\r\n\t\t}\r\n\t\tstd = std/(N-1);\r\n\t\treturn std;\r\n\t}\r\n};\r\n\nalasql.aggr.STDEV = function(v,s,stage){\r\n\tif(stage === 1 || stage === 2 ) {\r\n\t\treturn alasql.aggr.VAR(v,s,stage);\r\n\t} else {\r\n\t\treturn Math.sqrt(alasql.aggr.VAR(v,s,stage));\r\n\t}\r\n};\r\n\n// Standard deviation\r\n// alasql.aggr.VARP = function(v,s,acc){\r\n\n// };\r\n\nalasql.aggr.VARP = function(v,s,stage){\r\n\tif(stage == 1) {\r\n\t\treturn {arr:[v],sum:v};\r\n\t} else if(stage == 2) {\r\n\t\ts.arr.push(v);\r\n\t\ts.sum += v;\r\n\t\treturn s;\r\n\t} else {\r\n\t\tvar N = s.arr.length;\r\n\t\tvar avg = s.sum / N;\r\n\t\tvar std = 0;\r\n\t\tfor(var i=0;i<N;i++) {\r\n\t\t\tstd += (s.arr[i]-avg)*(s.arr[i]-avg);\r\n\t\t}\r\n\t\tstd = std/N;\r\n\t\treturn std;\r\n\t}\r\n};\r\n\nalasql.aggr.STD = alasql.aggr.STDDEV = alasql.aggr.STDEVP = function(v,s,stage){\r\n\tif(stage == 1 || stage == 2 ) {\r\n\t\treturn alasql.aggr.VARP(v,s,stage);\r\n\t} else {\r\n\t\treturn Math.sqrt(alasql.aggr.VARP(v,s,stage));\r\n\t}\r\n};\r\n\n// String functions\r\nstdfn.REPLACE = function (target,pattern,replacement) {\r\n    return (target||'').split(pattern).join(replacement);\r\n};\r\n\n// This array is required for fast GUID generation\r\nvar lut = []; for (var i=0; i<256; i++) { lut[i] = (i<16?'0':'')+(i).toString(16); }\r\n\nstdfn.NEWID = stdfn.UUID = stdfn.GEN_RANDOM_UUID = function() {\r\n    var d0 = Math.random()*0xffffffff|0;\r\n    var d1 = Math.random()*0xffffffff|0;\r\n    var d2 = Math.random()*0xffffffff|0;\r\n    var d3 = Math.random()*0xffffffff|0;\r\n    return lut[d0&0xff]+lut[d0>>8&0xff]+lut[d0>>16&0xff]+lut[d0>>24&0xff]+'-'+\r\n      lut[d1&0xff]+lut[d1>>8&0xff]+'-'+lut[d1>>16&0x0f|0x40]+lut[d1>>24&0xff]+'-'+\r\n      lut[d2&0x3f|0x80]+lut[d2>>8&0xff]+'-'+lut[d2>>16&0xff]+lut[d2>>24&0xff]+\r\n      lut[d3&0xff]+lut[d3>>8&0xff]+lut[d3>>16&0xff]+lut[d3>>24&0xff];\r\n};\r\n\n/*\r\n//\r\n// CASE for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.CaseValue = function(params) { return yy.extend(this, params); };\r\nyy.CaseValue.prototype.toString = function() {\r\n\tvar s = 'CASE ';\r\n\tif(this.expression) s += this.expression.toString();\r\n\tif(this.whens) {\r\n\t\ts += this.whens.map(function(w) { return ' WHEN '+\r\n\t\t\tw.when.toString() + ' THEN '+w.then.toString()}).join();\r\n\t}\r\n\ts += ' END';\r\n\treturn s;\r\n};\r\n\nyy.CaseValue.prototype.findAggregator = function (query){\r\n\n\tif(this.expression && this.expression.findAggregator) this.expression.findAggregator(query);\r\n\tif(this.whens && this.whens.length > 0) {\r\n\t\tthis.whens.forEach(function(w) { \r\n\t\t\tif(w.when.findAggregator) w.when.findAggregator(query);\r\n\t\t\tif(w.then.findAggregator) w.then.findAggregator(query);\r\n\t\t});\r\n\t};\r\n\tif(this.elses && this.elses.findAggregator) this.elses.findAggregator(query);\r\n};\r\n\nyy.CaseValue.prototype.toJS = function(context, tableid, defcols) {\r\n\n\tvar s = '((function('+context+',params,alasql){var y,r;';\r\n\tif(this.expression) {\r\n\n\t\ts += 'v='+this.expression.toJS(context, tableid, defcols)+';';\r\n\t\ts += (this.whens||[]).map(function(w) { return ' if(v=='+w.when.toJS(context,tableid, defcols)\r\n\t\t\t+') {r='+w.then.toJS(context,tableid, defcols)+'}'; }).join(' else ');\r\n\t\tif(this.elses) s += ' else {r='+this.elses.toJS(context,tableid, defcols)+'}';\r\n\t} else {\r\n\t\ts += (this.whens||[]).map(function(w) { return ' if('+w.when.toJS(context,tableid, defcols)\r\n\t\t\t+') {r='+w.then.toJS(context,tableid, defcols)+'}'; }).join(' else ');\r\n\t\tif(this.elses) s += ' else {r='+this.elses.toJS(context,tableid,defcols)+'}';\r\n\t}\r\n\t// TODO remove bind from CASE\r\n\ts += ';return r;}).bind(this))('+context+',params,alasql)';\r\n\n\treturn s;\r\n};\r\n\n/*\r\n//\r\n// JSON for Alasql.js\r\n// Date: 19.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.Json = function (params) { return yy.extend(this, params); }\r\nyy.Json.prototype.toString = function() {\r\n\tvar s = ''; // '@'\r\n\ts += JSONtoString(this.value);\r\n\ts += '';\r\n\treturn s;\r\n};\r\n\nvar JSONtoString = alasql.utils.JSONtoString = function (obj) {\r\n\tvar s = '';\r\n\tif(typeof obj == \"string\") s = '\"'+obj+'\"';\r\n\telse if(typeof obj == \"number\") s = obj;\r\n\telse if(typeof obj == \"boolean\") s = obj;\r\n\telse if(typeof obj == \"object\") {\r\n\t\tif(Array.isArray(obj)) {\r\n\t\t\ts += '['+obj.map(function(b){\r\n\t\t\t\treturn JSONtoString(b);\r\n\t\t\t}).join(',')+']';\r\n\t\t} else if(!obj.toJS || obj instanceof yy.Json) {\r\n\t\t\t// to prevent recursion\r\n\t\t\ts = '{';\r\n\t\t\tvar ss = [];\r\n\t\t\tfor(var k in obj) {\r\n\t\t\t\tvar s1 = ''; \r\n\t\t\t\tif(typeof k == \"string\") s1 += '\"'+k+'\"';\r\n\t\t\t\telse if(typeof k == \"number\") s1 += k;\r\n\t\t\t\telse if(typeof k == \"boolean\") s1 += k;\r\n\t\t\t\telse {\r\n\t\t\t\t\tthrow new Error('THis is not ES6... no expressions on left side yet');\r\n\t\t\t\t}\r\n\t\t\t\ts1 += ':'+JSONtoString(obj[k]);\r\n\t\t\t\tss.push(s1);\r\n\t\t\t};\r\n\t\t\ts += ss.join(',')+'}';\r\n\t\t} else if(obj.toString)\t{\r\n\t\t\ts = obj.toString();\r\n\t\t} else {\r\n\t\t\tthrow new Error('1Can not show JSON object '+JSON.stringify(obj));\r\n\t\t}\r\n\t} else {\r\n\t\tthrow new Error('2Can not show JSON object '+JSON.stringify(obj));\t\t\r\n\t}\r\n\n\treturn s;\r\n}\r\n\nfunction JSONtoJS(obj, context, tableid, defcols) {\r\n\tvar s = '';\r\n\tif(typeof obj == \"string\") s = '\"'+obj+'\"';\r\n\telse if(typeof obj == \"number\") s = '('+obj+')';\r\n\telse if(typeof obj == \"boolean\") s = obj;\r\n\telse if(typeof obj == \"object\") {\r\n\t\tif(Array.isArray(obj)) {\r\n\t\t\ts += '['+obj.map(function(b){\r\n\t\t\t\treturn JSONtoJS(b, context, tableid, defcols);\r\n\t\t\t}).join(',')+']';\r\n\t\t} else if(!obj.toJS || obj instanceof yy.Json) {\r\n\t\t\t// to prevent recursion\r\n\t\t\ts = '{';\r\n\t\t\tvar ss = [];\r\n\t\t\tfor(var k in obj) {\r\n\t\t\t\tvar s1 = ''; \r\n\t\t\t\tif(typeof k == \"string\") s1 += '\"'+k+'\"';\r\n\t\t\t\telse if(typeof k == \"number\") s1 += k;\r\n\t\t\t\telse if(typeof k == \"boolean\") s1 += k;\r\n\t\t\t\telse {\r\n\t\t\t\t\tthrow new Error('THis is not ES6... no expressions on left side yet');\r\n\t\t\t\t}\r\n\t\t\t\ts1 += ':'+JSONtoJS(obj[k], context, tableid, defcols);\r\n\t\t\t\tss.push(s1);\r\n\t\t\t};\r\n\t\t\ts += ss.join(',')+'}';\r\n\t\t} else if(obj.toJS)\t{\r\n\t\t\ts = obj.toJS(context, tableid, defcols);\r\n\t\t} else {\r\n\t\t\tthrow new Error('1Can not parse JSON object '+JSON.stringify(obj));\r\n\t\t}\r\n\t} else {\r\n\t\tthrow new Error('2Can not parse JSON object '+JSON.stringify(obj));\t\t\r\n\t}\r\n\n\treturn s;\r\n}\r\n\nyy.Json.prototype.toJS = function(context, tableid, defcols) {\r\n\t// TODO redo\r\n\treturn JSONtoJS(this.value,context, tableid, defcols);\r\n}\r\n\n/*\r\n//\r\n// CAST and CONVERT functions\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.Convert = function(params) { return yy.extend(this, params); };\r\nyy.Convert.prototype.toString = function() {\r\n\tvar s = 'CONVERT(';\r\n\ts += this.dbtypeid;\r\n\tif(typeof this.dbsize != 'undefined') {\r\n\t\ts += '('+this.dbsize;\r\n\t\tif(this.dbprecision) s += ','+dbprecision;\r\n\t\ts += ')';\r\n\t}\r\n\ts += ','+this.expression.toString();\r\n\tif(this.style) s += ','+this.style;\r\n\ts += ')';\r\n\treturn s;\r\n};\r\nyy.Convert.prototype.toJS = function(context, tableid, defcols) {\r\n\n//\tif(this.style) {\r\n\treturn 'alasql.stdfn.CONVERT('+this.expression.toJS(context, tableid, defcols)\r\n\t\t+',{dbtypeid:\"'+this.dbtypeid+'\",dbsize:'+this.dbsize+',style:'+\r\n\t\tthis.style+'})';\t\t\r\n//\t}\r\n\n\tthrow new Error('There is not such type conversion for '+this.toString());\r\n};\r\n\n/**\r\n Convert one type to another\r\n */\r\nalasql.stdfn.CONVERT = function(value, args) {\r\n\tvar val = value;\r\n\n\tif(args.style) {\r\n\t\t// TODO 9,109, 20,120,21,121,126,130,131 conversions\r\n\t\tvar t;\r\n\t\tif(/\\d{8}/.test(val)){\r\n\t\t\tt = new Date(+val.substr(0,4),+val.substr(4,2)-1,+val.substr(6,2));\t\t\r\n\t\t} else{\r\n\t\t\tt = new Date(val);\r\n\t\t}\r\n\t\tswitch(args.style){\r\n\t\t\tcase 1: // mm/dd/yy\r\n\t\t\t\tval =  (\"0\"+(t.getMonth()+1)).substr(-2)+'/'+(\"0\"+t.getDate()).substr(-2)+'/'+(\"0\"+t.getYear()).substr(-2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: \t// yy.mm.dd\r\n\t\t\t\tval =  (\"0\"+t.getYear()).substr(-2)+'.'+(\"0\"+(t.getMonth()+1)).substr(-2)+'.'+(\"0\"+t.getDate()).substr(-2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3: \t// dd/mm/yy\r\n\t\t\t\tval =  (\"0\"+t.getDate()).substr(-2)+'/'+(\"0\"+(t.getMonth()+1)).substr(-2)+'/'+(\"0\"+t.getYear()).substr(-2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4: \t// dd.mm.yy\r\n\t\t\t\tval =  (\"0\"+t.getDate()).substr(-2)+'.'+(\"0\"+(t.getMonth()+1)).substr(-2)+'.'+(\"0\"+t.getYear()).substr(-2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5: \t// dd-mm-yy\r\n\t\t\t\tval =  (\"0\"+t.getDate()).substr(-2)+'-'+(\"0\"+(t.getMonth()+1)).substr(-2)+'-'+(\"0\"+t.getYear()).substr(-2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6: \t// dd mon yy\r\n\t\t\t\tval =  (\"0\"+t.getDate()).substr(-2)+' '+t.toString().substr(4,3).toLowerCase()+' '+(\"0\"+t.getYear()).substr(-2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 7: \t// Mon dd,yy\r\n\t\t\t\tval =  t.toString().substr(4,3)+' '+(\"0\"+t.getDate()).substr(-2)+','+(\"0\"+t.getYear()).substr(-2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 8 : \t// hh:mm:ss\r\n\t\t\tcase 108 : \t// hh:mm:ss\r\n\t\t\t\tval =  (\"0\"+t.getHours()).substr(-2)+':'+(\"0\"+(t.getMinutes())).substr(-2)+':'+(\"0\"+t.getSeconds()).substr(-2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 10: \t// mm-dd-yy\r\n\t\t\t\tval =  (\"0\"+(t.getMonth()+1)).substr(-2)+'-'+(\"0\"+t.getDate()).substr(-2)+'-'+(\"0\"+t.getYear()).substr(-2);\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase 11: \t// yy/mm/dd\r\n\t\t\t\tval =  (\"0\"+t.getYear()).substr(-2)+'/'+(\"0\"+(t.getMonth()+1)).substr(-2)+'/'+(\"0\"+t.getDate()).substr(-2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 12: \t// yymmdd\r\n\t\t\t\tval =  (\"0\"+t.getYear()).substr(-2)+(\"0\"+(t.getMonth()+1)).substr(-2)+(\"0\"+t.getDate()).substr(-2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 101: \t// mm/dd/yyyy\r\n\t\t\t\tval =  (\"0\"+(t.getMonth()+1)).substr(-2)+'/'+(\"0\"+t.getDate()).substr(-2)+'/'+t.getFullYear();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 102: \t// yyyy.mm.dd\r\n\t\t\t\tval =  t.getFullYear()+'.'+(\"0\"+(t.getMonth()+1)).substr(-2)+'.'+(\"0\"+t.getDate()).substr(-2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 103: \t// dd/mm/yyyy\r\n\t\t\t\tval =  (\"0\"+t.getDate()).substr(-2)+'/'+(\"0\"+(t.getMonth()+1)).substr(-2)+'/'+t.getFullYear();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 104: \t// dd.mm.yyyy\r\n\t\t\t\tval =  (\"0\"+t.getDate()).substr(-2)+'.'+(\"0\"+(t.getMonth()+1)).substr(-2)+'.'+t.getFullYear();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 105: \t// dd-mm-yyyy\r\n\t\t\t\tval =  (\"0\"+t.getDate()).substr(-2)+'-'+(\"0\"+(t.getMonth()+1)).substr(-2)+'-'+t.getFullYear();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 106: \t// dd mon yyyy\r\n\t\t\t\tval =  (\"0\"+t.getDate()).substr(-2)+' '+t.toString().substr(4,3).toLowerCase()+' '+t.getFullYear();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 107: \t// Mon dd,yyyy\r\n\t\t\t\tval =  t.toString().substr(4,3)+' '+(\"0\"+t.getDate()).substr(-2)+','+t.getFullYear();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 110: \t// mm-dd-yyyy\r\n\t\t\t\tval =  (\"0\"+(t.getMonth()+1)).substr(-2)+'-'+(\"0\"+t.getDate()).substr(-2)+'-'+t.getFullYear();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 111: \t// yyyy/mm/dd\r\n\t\t\t\tval =  t.getFullYear()+'/'+(\"0\"+(t.getMonth()+1)).substr(-2)+'/'+(\"0\"+t.getDate()).substr(-2);\r\n\t\t\t\tbreak;\r\n\n\t\t\tcase 112: \t// yyyymmdd\r\n\t\t\t\tval =  t.getFullYear()+(\"0\"+(t.getMonth()+1)).substr(-2)+(\"0\"+t.getDate()).substr(-2);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error('The CONVERT style '+args.style+' is not realized yet.');\r\n\t\t}\r\n\t};\r\n\n\tvar udbtypeid = args.dbtypeid.toUpperCase();\r\n\n\tif(args.dbtypeid == 'Date') {\r\n\t\treturn new Date(val);\r\n\t} else if(udbtypeid == 'DATE') {\r\n\t\tvar d = new Date(val);\r\n\t\tvar s = d.getFullYear()+\".\"+(\"0\"+(d.getMonth()+1)).substr(-2)+\".\"+(\"0\"+d.getDate()).substr(-2);\r\n\t\treturn s;\r\n\t} else if(udbtypeid == 'DATETIME' || udbtypeid == 'DATETIME2') {\r\n\t\tvar d = new Date(val);\r\n\t\tvar s = d.getFullYear()+\".\"+(\"0\"+(d.getMonth()+1)).substr(-2)+\".\"+(\"0\"+d.getDate()).substr(-2);\r\n\t\ts += \" \"+(\"0\"+d.getHours()).substr(-2)+\":\"+(\"0\"+d.getMinutes()).substr(-2)+\":\"+(\"0\"+d.getSeconds()).substr(-2);\r\n\t\ts += '.'+(\"00\"+d.getMilliseconds()).substr(-3)\r\n\t\treturn s;\r\n\t} else if(['MONEY'].indexOf(udbtypeid)>-1) {\r\n\t\tvar m = +val;\r\n\t\treturn (m|0)+((m*100)%100)/100;\r\n\t} else if(['BOOLEAN'].indexOf(udbtypeid)>-1) {\r\n\t\treturn !!val;\r\n\t} else if(['INT','INTEGER','SMALLINT','BIGINT','SERIAL','SMALLSERIAL','BIGSERIAL'].indexOf(args.dbtypeid.toUpperCase())>-1) {\r\n\t\treturn val|0;\r\n\t} else if(['STRING','VARCHAR','NVARCHAR', 'CHARACTER VARIABLE'].indexOf(args.dbtypeid.toUpperCase())>-1) {\r\n\t\tif(args.dbsize) return (\"\"+val).substr(0,args.dbsize);\r\n\t\telse return \"\"+val;\r\n\t} else if(['CHAR','CHARACTER', 'NCHAR'].indexOf(udbtypeid)>-1) {\r\n\t\treturn (val+(new Array(args.dbsize+1).join(\" \"))).substr(0,args.dbsize);\r\n\t\t//else return \"\"+val.substr(0,1);\r\n\t} else if(['NUMBER','FLOAT'].indexOf(udbtypeid)>-1) {\r\n\t\tif(typeof args.dbprecision != 'undefined') {\r\n\t\t\tvar m = +val;\r\n\t\t\tvar fxd = Math.pow(10,args.dbprecision);\r\n\t\t\treturn (m|0)+((m*fxd)%fxd)/fxd;\r\n\t\t} else {\r\n\t\t\treturn +val;\r\n\t\t}\r\n\t} else if((['DECIMAL','NUMERIC'].indexOf(udbtypeid)>-1)) {\r\n\t\tvar m = +val;\r\n\t\tvar fxd = Math.pow(10,args.dbprecision);\r\n\t\treturn (m|0)+((m*fxd)%fxd)/fxd;\r\n\t} else if(['JSON'].indexOf(udbtypeid)>-1) {\r\n\t\tif(typeof val == 'object') return val;\r\n\t\ttry {\r\n\t\t\treturn JSON.parse(val);\r\n\t\t} catch(err) { throw new Error('Cannot convert string to JSON');};\r\n\t}\r\n\treturn val;\r\n};\r\n\n/*\r\n//\r\n// CREATE TABLE for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.ColumnDef = function (params) { return yy.extend(this, params); }\r\nyy.ColumnDef.prototype.toString = function() {\r\n\tvar s =  this.columnid;\r\n\tif(this.dbtypeid){\r\n\t\ts += ' '+this.dbtypeid;\r\n\t}\r\n\n\tif(this.dbsize) {\r\n\t\ts += '('+this.dbsize;\r\n\t\tif(this.dbprecision){\r\n\t\t\ts += ','+this.dbprecision;\r\n\t\t}\r\n\t\ts += ')';\r\n\t}\r\n\n\tif(this.primarykey){\r\n\t\ts += ' PRIMARY KEY';\r\n\t}\r\n\n\tif(this.notnull){\r\n\t\ts += ' NOT NULL';\r\n\t}\r\n\n\treturn s;\r\n}\r\n\nyy.CreateTable = function (params) { return yy.extend(this, params); }\r\nyy.CreateTable.prototype.toString = function() {\r\n\tvar s = 'CREATE';\r\n\tif(this.temporary){\r\n\t\ts+=' TEMPORARY';\r\n\t}\r\n\n\tif(this.view){\r\n\t\ts += ' VIEW';\r\n\t} else{\r\n\t\ts += ' '+(this.class?'CLASS':'TABLE');\r\n\t}\r\n\tif(this.ifnotexists){\r\n\t\ts += ' IF  NOT EXISTS';\r\n\t}\r\n\ts += ' '+this.table.toString();\r\n\tif(this.viewcolumns) {\r\n\t\ts += '('+this.viewcolumns.map(function(vcol){\r\n\t\t\treturn vcol.toString();\r\n\t\t}).join(',')+')';\r\n\t}\r\n\tif(this.as){\r\n\t\ts += ' AS '+this.as;\r\n\t} else { \r\n\t\tvar ss = this.columns.map(function(col){\r\n\t\t\treturn col.toString();\r\n\t\t});\r\n\t\ts += ' ('+ss.join(',')+')';\r\n\t}\r\n\n\tif(this.view && this.select) {\r\n\t\ts += ' AS '+this.select.toString();\r\n\t}\r\n\n\treturn s;\r\n}\r\n\n// CREATE TABLE\r\n//yy.CreateTable.prototype.compile = returnUndefined;\r\nyy.CreateTable.prototype.execute = function (databaseid, params, cb) {\r\n    //\tvar self = this;\r\n\tvar db = alasql.databases[this.table.databaseid || databaseid];\r\n\n\tvar tableid = this.table.tableid;\r\n\tif(!tableid) {\r\n\t\tthrow new Error('Table name is not defined');\r\n\t}\r\n\n//\tvar ifnotexists = this.ifnotexists;\r\n\tvar columns = this.columns;\r\n\t// if(false) {\r\n\t// \tif(!columns) {\r\n\t// \t\tthrow new Error('Columns are not defined');\r\n\t// \t}\r\n\t// }\r\n\tvar constraints = this.constraints||[];\r\n\n\t// IF NOT EXISTS\r\n\tif(this.ifnotexists && db.tables[tableid]){\r\n\t\treturn cb?cb(0):0;\r\n\t}\r\n\n\tif(db.tables[tableid]) {\r\n\t\tthrow new Error('Can not create table \\''+tableid\r\n\t\t\t+'\\', because it already exists in the database \\''+db.databaseid+'\\'');\r\n\t}\r\n\n\tvar table = db.tables[tableid] = new alasql.Table(); // TODO Can use special object?\r\n\t// If this is a class\r\n\tif(this.class) {\r\n\t\ttable.isclass = true;\r\n\t}\r\n\n\tvar ss = [];  // DEFAULT function components\r\n\tvar uss = []; // ON UPDATE function components\r\n\tif(columns) {\r\n\t\tcolumns.forEach(function(col) {\r\n\t\t\tvar dbtypeid = col.dbtypeid;\r\n\t\t\tif(!alasql.fn[dbtypeid]){\r\n\t\t\t\tdbtypeid = dbtypeid.toUpperCase();\r\n\t\t\t}\r\n\n\t\t\t// Process SERIAL data type like Postgress\r\n\t\t\tif(['SERIAL','SMALLSERIAL','BIGSERIAL'].indexOf(dbtypeid)>-1){\r\n\t\t\t\tcol.identity = {value:1,step:1};\r\n\t\t\t}\r\n\n\t\t\tvar newcol = {\r\n\t\t\t\tcolumnid: col.columnid,\r\n\t\t\t\tdbtypeid: dbtypeid, \r\n\t\t\t\tdbsize: col.dbsize, \t\t\t// Fixed issue #150\r\n\t\t\t\tdbprecision: col.dbprecision, \t// Fixed issue #150\r\n\t\t\t\tnotnull: col.notnull,\r\n\t\t\t\tidentity: col.identity\r\n\t\t\t};\r\n\t\t\tif(col.identity) {\r\n\t\t\t\ttable.identities[col.columnid]={value:+col.identity.value,step:+col.identity.step};\r\n\n\t\t\t}\r\n\t\t\tif(col.check) {\r\n\t\t\t\ttable.checks.push({id: col.check.constrantid, fn: new Function(\"r\",'var y;return '+col.check.expression.toJS('r',''))});\r\n\t\t\t}\r\n\n\t\t\tif(col.default) {\r\n\t\t\t\tss.push('\\''+col.columnid+'\\':'+col.default.toJS('r',''));\r\n\t\t\t}\r\n\n\t\t\t// Check for primary key\r\n\t\t\tif(col.primarykey) {\r\n\t\t\t\tvar pk = table.pk = {};\r\n\t\t\t\tpk.columns = [col.columnid];\r\n\t\t\t\tpk.onrightfns = 'r[\\''+col.columnid+'\\']';\r\n\t\t\t\tpk.onrightfn = new Function(\"r\",'var y;return '+pk.onrightfns);\r\n\t\t\t\tpk.hh = hash(pk.onrightfns);\r\n\t\t\t\ttable.uniqs[pk.hh] = {};\r\n\t\t\t}\r\n\n\t\t\t// UNIQUE clause\r\n\t\t\tif(col.unique) {\r\n\t\t\t\tvar uk = {};\r\n\t\t\t\ttable.uk = table.uk||[];\r\n\t\t\t\ttable.uk.push(uk);\r\n\t\t\t\tuk.columns = [col.columnid];\r\n\t\t\t\tuk.onrightfns = 'r[\\''+col.columnid+'\\']';\r\n\t\t\t\tuk.onrightfn = new Function(\"r\",'var y;return '+uk.onrightfns);\r\n\t\t\t\tuk.hh = hash(uk.onrightfns);\r\n\t\t\t\ttable.uniqs[uk.hh] = {};\r\n\t\t\t}\r\n\n\t\t\t// UNIQUE clause\r\n\t\t\tif(col.foreignkey) {\r\n\n\t\t\t\tvar fk = col.foreignkey.table;\r\n\t\t\t\tvar fktable = alasql.databases[fk.databaseid||alasql.useid].tables[fk.tableid];\r\n\t\t\t\tif(typeof fk.columnid === 'undefined') {\r\n\t\t\t\t\tif(fktable.pk.columns && fktable.pk.columns.length >0 ){\r\n\t\t\t\t\t\tfk.columnid = fktable.pk.columns[0];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('FOREIGN KEY allowed only to tables with PRIMARY KEYs');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\n\t\t\t\tvar fkfn = function(r) {\r\n\t\t\t\t\tvar rr = {};\r\n\t\t\t\t\tif(typeof r[col.columnid] === 'undefined'){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\trr[fk.columnid] = r[col.columnid];\r\n\t\t\t\t\tvar addr = fktable.pk.onrightfn(rr);\r\n\n\t\t\t\t\tif(!fktable.uniqs[fktable.pk.hh][addr]) {\r\n\t\t\t\t\t\tthrow new Error('Foreign key \"'+r[col.columnid]+'\" is not found in table '+fktable.tableid);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t};\r\n\t\t\t\ttable.checks.push({fn: fkfn});\r\n\t\t\t}\r\n\n\t\t\tif(col.onupdate) {\r\n\t\t\t\tuss.push('r[\\''+col.columnid+'\\']='+col.onupdate.toJS('r',''));\r\n\t\t\t}\r\n\n\t\t\ttable.columns.push(newcol);\r\n\t\t\ttable.xcolumns[newcol.columnid] = newcol;\r\n\n\t\t});\r\n\t}\r\n\ttable.defaultfns = ss.join(',');\r\n\ttable.onupdatefns = uss.join(';');\r\n\n//\tif(constraints) {\r\n\tconstraints.forEach(function(con) {\r\n\n\t\tvar checkfn;\r\n\n\t\tif(con.type === 'PRIMARY KEY') {\r\n\t\t\tif(table.pk) {\r\n\t\t\t\tthrow new Error('Primary key already exists');\r\n\t\t\t}\r\n\t\t\tvar pk = table.pk = {};\r\n\t\t\tpk.columns = con.columns;\r\n\t\t\tpk.onrightfns = pk.columns.map(function(columnid){\r\n\t\t\t\treturn 'r[\\''+columnid+'\\']'\r\n\t\t\t}).join(\"+'`'+\");\r\n\t\t\tpk.onrightfn = new Function(\"r\",'var y;return '+pk.onrightfns);\r\n\t\t\tpk.hh = hash(pk.onrightfns);\r\n\t\t\ttable.uniqs[pk.hh] = {};\t\t\t\t\t\r\n\t\t} else if(con.type === 'CHECK') {\r\n\n\t\t\tcheckfn = new Function(\"r\",'var y;return '+con.expression.toJS('r',''))\r\n\t\t} else if(con.type === 'UNIQUE') {\r\n\n\t\t\tvar uk = {};\r\n\t\t\ttable.uk = table.uk||[];\r\n\t\t\ttable.uk.push(uk);\r\n\t\t\tuk.columns = con.columns;\r\n\t\t\tuk.onrightfns = uk.columns.map(function(columnid){\r\n\t\t\t\treturn 'r[\\''+columnid+'\\']'\r\n\t\t\t}).join(\"+'`'+\");\r\n\t\t\tuk.onrightfn = new Function(\"r\",'var y;return '+uk.onrightfns);\r\n\t\t\tuk.hh = hash(uk.onrightfns);\r\n\t\t\ttable.uniqs[uk.hh] = {};\t\t\t\t\t\r\n\t\t} else if(con.type === 'FOREIGN KEY') {\r\n\n\t\t\tvar col = table.xcolumns[con.columns[0]];\r\n\t\t\tvar fk = con.fktable;\r\n\t\t\tif(con.fkcolumns && con.fkcolumns.length>0){\r\n\t\t\t\tfk.columnid = con.fkcolumns[0];\r\n \t\t\t}\r\n \t\t\tvar fktable = alasql.databases[fk.databaseid||alasql.useid].tables[fk.tableid];\r\n\t\t\tif(typeof fk.columnid === 'undefined') {\r\n\t\t\t\tfk.columnid = fktable.pk.columns[0];\r\n\t\t\t}\r\n\n\t\t\tcheckfn = function(r) {\r\n\t\t\t\tvar rr = {};\r\n\t\t\t\tif(typeof r[col.columnid] === 'undefined'){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\trr[fk.columnid] = r[col.columnid];\r\n\t\t\t\tvar addr = fktable.pk.onrightfn(rr);\r\n\n\t\t\t\tif(!fktable.uniqs[fktable.pk.hh][addr]) {\r\n\n\t\t\t\t\tthrow new Error('Foreign key \"'+r[col.columnid]+'\" is not found in table '+fktable.tableid);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t};\r\n\t\t}\r\n\t\tif (checkfn) table.checks.push({fn: checkfn, id: con.constraintid, fk: con.type === 'FOREIGN KEY'});\r\n\t});\r\n\n\tif(this.view && this.viewcolumns) {\r\n\t\tvar self = this;\r\n\t\tthis.viewcolumns.forEach(function(vcol,idx){\r\n\t\t\tself.select.columns[idx].as = vcol.columnid;\r\n\t\t});\r\n\t}\r\n\n    //Used in 420from queryfn when table.view = true!\r\n    if(this.view && this.select) {\r\n\ttable.view = true;\r\n\n\ttable.select = this.select.compile(this.table.databaseid||databaseid);\r\n    }\r\n\n\tif(db.engineid) {\r\n\n\t\treturn alasql.engines[db.engineid].createTable(this.table.databaseid || databaseid, tableid, this.ifnotexists, cb);\r\n\n\t}\r\n\n//\t}\r\n\n    table.insert = function(r,orreplace) {\r\n\t\tvar oldinserted = alasql.inserted;\r\n\t\talasql.inserted = [r];\r\n\n\t\tvar table = this;\r\n\n\t\tvar toreplace = false; // For INSERT OR REPLACE\r\n\n/*\r\n\t\t// IDENTINY or AUTO_INCREMENT\r\n\t\t// if(table.identities && table.identities.length>0) {\r\n\t\t// \ttable.identities.forEach(function(ident){\r\n\t\t// \t\tr[ident.columnid] = ident.value;\r\n\t\t// \t});\r\n\t\t// }\r\n*/\r\n\t\t// Trigger prevent functionality\r\n\t\tvar prevent = false;\r\n\t\tfor(var tr in table.beforeinsert) {\r\n\t\t\tvar trigger = table.beforeinsert[tr];\r\n\t\t\tif(trigger) {\r\n\t\t\t\tif(trigger.funcid) {\r\n\t\t\t\t\tif(alasql.fn[trigger.funcid](r) === false) prevent = prevent || true;\r\n\t\t\t\t} else if(trigger.statement) {\r\n\t\t\t\t\tif(trigger.statement.execute(databaseid) === false) prevent = prevent || true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tif(prevent) return; \r\n\n\t\t// Trigger prevent functionality\r\n\t\tvar escape = false;\r\n\t\tfor(var tr in table.insteadofinsert) {\r\n\t\t\tescape = true;\r\n\t\t\tvar trigger = table.insteadofinsert[tr];\r\n\t\t\tif(trigger) {\r\n\t\t\t\tif(trigger.funcid) {\r\n\t\t\t\t\talasql.fn[trigger.funcid](r);\r\n\t\t\t\t} else if(trigger.statement) {\r\n\t\t\t\t\ttrigger.statement.execute(databaseid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tif(escape) return;\r\n\n\t\tfor(var columnid in table.identities){\r\n\t\t\tvar ident = table.identities[columnid];\r\n\n\t\t\tr[columnid] = ident.value;\r\n\n\t\t}\r\n\n\t\tif(table.checks && table.checks.length>0) {\r\n\t\t\ttable.checks.forEach(function(check){\r\n\t\t\t\tif(!check.fn(r)) {\r\n\n\t\t\t\t\tthrow new Error('Violation of CHECK constraint ' + (check.id || ''));\t\t\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\n\t\ttable.columns.forEach(function(column){\r\n\t\t\tif(column.notnull && typeof r[column.columnid] === 'undefined') {\r\n\t\t\t\tthrow new Error('Wrong NULL value in NOT NULL column '+column.columnid);\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(table.pk) {\r\n\t\t\tvar pk = table.pk;\r\n\t\t\tvar addr = pk.onrightfn(r);\r\n\n\t\t\tif(typeof table.uniqs[pk.hh][addr] !== 'undefined') {\r\n\n\t\t\t\tif(orreplace) toreplace=table.uniqs[pk.hh][addr]; else\r\n\t\t\t\tthrow new Error('Cannot insert record, because it already exists in primary key index');\r\n\t\t\t} \r\n\n\t\t}\r\n\n\t\tif(table.uk && table.uk.length) {\r\n\t\t\ttable.uk.forEach(function(uk){\r\n\t\t\t\tvar ukaddr = uk.onrightfn(r);\r\n\t\t\t\tif(typeof table.uniqs[uk.hh][ukaddr] !== 'undefined') {\r\n\t\t\t\t\tif(orreplace) toreplace=table.uniqs[uk.hh][ukaddr]; else\r\n\t\t\t\t\tthrow new Error('Cannot insert record, because it already exists in unique index');\r\n\t\t\t\t} \t\t\t\t\r\n\n\t\t\t});\r\n\t\t}\r\n\n\t\tif(toreplace) {\r\n\t\t\t// Do UPDATE!!!\r\n\n\t\t\ttable.update(function(t){\r\n\t\t\t\tfor(var f in r) t[f] = r[f];\r\n\t\t\t},table.data.indexOf(toreplace),params);\r\n\t\t} else {\r\n\t\t\ttable.data.push(r);\r\n\n\t\t// Final change before insert\r\n\n\t\t// Update indices\r\n\n\t\t\tfor(var columnid in table.identities){\r\n\t\t\t\tvar ident = table.identities[columnid];\r\n\n\t\t\t\tident.value += ident.step;\r\n\n\t\t\t}\r\n\n\t\t\tif(table.pk) {\r\n\t\t\t\tvar pk = table.pk;\r\n\t\t\t\tvar addr = pk.onrightfn(r);\r\n\t\t\t\ttable.uniqs[pk.hh][addr]=r;\r\n\t\t\t}\r\n\t\t\tif(table.uk && table.uk.length) {\r\n\t\t\t\ttable.uk.forEach(function(uk){\r\n\t\t\t\t\tvar ukaddr = uk.onrightfn(r);\r\n\t\t\t\t\ttable.uniqs[uk.hh][ukaddr]=r;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\n\t\t// Trigger prevent functionality\r\n\t\tfor(var tr in table.afterinsert) {\r\n\t\t\tvar trigger = table.afterinsert[tr];\r\n\t\t\tif(trigger) {\r\n\t\t\t\tif(trigger.funcid) {\r\n\t\t\t\t\talasql.fn[trigger.funcid](r);\r\n\t\t\t\t} else if(trigger.statement) {\r\n\t\t\t\t\ttrigger.statement.execute(databaseid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\talasql.inserted = oldinserted;\r\n\t};\r\n\n\ttable.delete = function(index) {\r\n\t\tvar table = this;\r\n\t\tvar r = table.data[index];\r\n\n\t\t// Prevent trigger\r\n\t\tvar prevent = false;\r\n\t\tfor(var tr in table.beforedelete) {\r\n\t\t\tvar trigger = table.beforedelete[tr];\r\n\t\t\tif(trigger) {\r\n\t\t\t\tif(trigger.funcid) {\r\n\t\t\t\t\tif(alasql.fn[trigger.funcid](r) === false) prevent = prevent || true;\r\n\t\t\t\t} else if(trigger.statement) {\r\n\t\t\t\t\tif(trigger.statement.execute(databaseid) === false) prevent = prevent || true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tif(prevent) return false; \r\n\n\t\t// Trigger prevent functionality\r\n\t\tvar escape = false;\r\n\t\tfor(var tr in table.insteadofdelete) {\r\n\t\t\tescape = true;\r\n\t\t\tvar trigger = table.insteadofdelete[tr];\r\n\t\t\tif(trigger) {\r\n\t\t\t\tif(trigger.funcid) {\r\n\t\t\t\t\talasql.fn[trigger.funcid](r);\r\n\t\t\t\t} else if(trigger.statement) {\r\n\t\t\t\t\ttrigger.statement.execute(databaseid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tif(escape) return;\r\n\n\t\tif(this.pk) {\r\n\t\t\tvar pk = this.pk;\r\n\t\t\tvar addr = pk.onrightfn(r);\r\n\t\t\tif(typeof this.uniqs[pk.hh][addr] === 'undefined') {\r\n\t\t\t\tthrow new Error('Something wrong with primary key index on table');\r\n\t\t\t} else {\r\n\t\t\t\tthis.uniqs[pk.hh][addr]=undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(table.uk && table.uk.length) {\r\n\t\t\ttable.uk.forEach(function(uk){\r\n\t\t\t\tvar ukaddr = uk.onrightfn(r);\r\n\t\t\t\tif(typeof table.uniqs[uk.hh][ukaddr] === 'undefined') {\r\n\t\t\t\t\tthrow new Error('Something wrong with unique index on table');\r\n\t\t\t\t} \t\t\t\t\r\n\t\t\t\ttable.uniqs[uk.hh][ukaddr]=undefined;\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\n\ttable.deleteall = function() {\r\n\t\tthis.data.length = 0;\r\n\t\tif(this.pk) {\r\n\n\t\t\tthis.uniqs[this.pk.hh] = {};\r\n\t\t}\r\n\t\tif(table.uk && table.uk.length) {\r\n\t\t\ttable.uk.forEach(function(uk){\r\n\t\t\t\ttable.uniqs[uk.hh]={};\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\n\ttable.update = function(assignfn, i, params) {\r\n\t\t// TODO: Analyze the speed\r\n\t\tvar r = cloneDeep(this.data[i]);\r\n\n\t\tvar pk;\r\n\t\t// PART 1 - PRECHECK\r\n\t\tif(this.pk) {\r\n\t\t\tpk = this.pk;\r\n\t\t\tpk.pkaddr = pk.onrightfn(r,params);\r\n\t\t\tif(typeof this.uniqs[pk.hh][pk.pkaddr] === 'undefined') {\r\n\t\t\t\tthrow new Error('Something wrong with index on table');\r\n\t\t\t} \r\n\t\t}\r\n\t\tif(table.uk && table.uk.length) {\r\n\t\t\ttable.uk.forEach(function(uk){\r\n\t\t\t\tuk.ukaddr = uk.onrightfn(r);\r\n\t\t\t\tif(typeof table.uniqs[uk.hh][uk.ukaddr] === 'undefined') {\r\n\t\t\t\t\tthrow new Error('Something wrong with unique index on table');\r\n\t\t\t\t} \t\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\n\t\tassignfn(r,params,alasql);\r\n\n\t\t// Prevent trigger\r\n\t\tvar prevent = false;\r\n\t\tfor(var tr in table.beforeupdate) {\r\n\t\t\tvar trigger = table.beforeupdate[tr];\r\n\t\t\tif(trigger) {\r\n\t\t\t\tif(trigger.funcid) {\r\n\t\t\t\t\tif(alasql.fn[trigger.funcid](this.data[i],r) === false) prevent = prevent || true;\r\n\t\t\t\t} else if(trigger.statement) {\r\n\t\t\t\t\tif(trigger.statement.execute(databaseid) === false) prevent = prevent || true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tif(prevent) return false; \r\n\n\t\t// Trigger prevent functionality\r\n\t\tvar escape = false;\r\n\t\tfor(var tr in table.insteadofupdate) {\r\n\t\t\tescape = true;\r\n\t\t\tvar trigger = table.insteadofupdate[tr];\r\n\t\t\tif(trigger) {\r\n\t\t\t\tif(trigger.funcid) {\r\n\t\t\t\t\talasql.fn[trigger.funcid](this.data[i],r);\r\n\t\t\t\t} else if(trigger.statement) {\r\n\t\t\t\t\ttrigger.statement.execute(databaseid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tif(escape) return;\r\n\n\t\t// PART 2 - POST CHECK\r\n\t\tif(table.checks && table.checks.length>0) {\r\n\t\t\ttable.checks.forEach(function(check){\r\n\t\t\t\tif(!check.fn(r)) {\r\n\t\t\t\t\tthrow new Error('Violation of CHECK constraint ' + (check.id || ''));\t\t\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\n\t\ttable.columns.forEach(function(column){\r\n\t\t\tif(column.notnull && typeof r[column.columnid] === 'undefined') {\r\n\t\t\t\tthrow new Error('Wrong NULL value in NOT NULL column '+column.columnid);\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(this.pk) {\r\n\t\t\t\tpk.newpkaddr = pk.onrightfn(r);\r\n\t\t\t\tif(typeof this.uniqs[pk.hh][pk.newpkaddr] !== 'undefined'\r\n\t\t\t\t\t&& pk.newpkaddr !== pk.pkaddr) {\r\n\t\t\t\t\tthrow new Error('Record already exists');\r\n\t\t\t\t} \r\n\t\t}\r\n\n\t\tif(table.uk && table.uk.length) {\r\n\t\t\ttable.uk.forEach(function(uk){\r\n\t\t\t\tuk.newukaddr = uk.onrightfn(r);\r\n\t\t\t\tif(typeof table.uniqs[uk.hh][uk.newukaddr] !== 'undefined'\r\n\t\t\t\t\t&& uk.newukaddr !== uk.ukaddr) {\r\n\t\t\t\t\tthrow new Error('Record already exists');\r\n\t\t\t\t} \t\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\n\t\t// PART 3 UPDATE\r\n\t\tif(this.pk) {\r\n\t\t\tthis.uniqs[pk.hh][pk.pkaddr]=undefined;\r\n\t\t\tthis.uniqs[pk.hh][pk.newpkaddr] = r;\t\t\t\r\n\t\t}\r\n\t\tif(table.uk && table.uk.length) {\r\n\t\t\ttable.uk.forEach(function(uk){\r\n\t\t\t\ttable.uniqs[uk.hh][uk.ukaddr]=undefined;\r\n\t\t\t\ttable.uniqs[uk.hh][uk.newukaddr]=r;\r\n\t\t\t});\r\n\t\t}\r\n\n\t\tthis.data[i] = r;\r\n\n\t\t// Trigger prevent functionality\r\n\t\tfor(var tr in table.afterupdate) {\r\n\t\t\tvar trigger = table.afterupdate[tr];\r\n\t\t\tif(trigger) {\r\n\t\t\t\tif(trigger.funcid) {\r\n\t\t\t\t\talasql.fn[trigger.funcid](this.data[i],r);\r\n\t\t\t\t} else if(trigger.statement) {\r\n\t\t\t\t\ttrigger.statement.execute(databaseid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\n\t};\r\n\n\tvar res;\r\n\n\tif(!alasql.options.nocount){\r\n\t\tres = 1;\r\n\t}\r\n\n\tif(cb) res = cb(res);\r\n\treturn res;\r\n};\r\n\n//\n// Date functions\n// \n// (c) 2014, Andrey Gershun\n//\n\n/** Standard JavaScript data types */\n\nalasql.fn.Date = Object;\nalasql.fn.Date = Date;\nalasql.fn.Number = Number;\nalasql.fn.String = String;\nalasql.fn.Boolean = Boolean;\n\n/** Extend Object with properties */\nstdfn.EXTEND = alasql.utils.extend;\n\nstdfn.CHAR = String.fromCharCode.bind(String);\nstdfn.ASCII = function(a) {\n    return a.charCodeAt(0);\n};\n\n/** \n Return first non-null argument\n See https://msdn.microsoft.com/en-us/library/ms190349.aspx\n*/\nstdfn.COALESCE = function() {\n\tfor(var i=0;i<arguments.length;i++) {\n\t\tif(typeof arguments[i] == 'undefined') continue;\n\t\tif(typeof arguments[i] == \"number\" && isNaN(arguments[i]) ) continue;\n\t\treturn arguments[i];\n\t}\n\treturn undefined;\n}\n\nstdfn.USER = function(){\n\treturn 'alasql';\n}\n\nstdfn.OBJECT_ID = function(objid){\n\treturn !!alasql.tables[objid];\n};\n\nstdfn.DATE = function (d) {\n\tif(/\\d{8}/.test(d)) return new Date(+d.substr(0,4),+d.substr(4,2)-1,+d.substr(6,2));\n\treturn new Date(d);\n};\n\nstdfn.NOW = function(){\n\tvar d = new Date();\n\tvar s = d.getFullYear()+\".\"+(\"0\"+(d.getMonth()+1)).substr(-2)+\".\"+(\"0\"+d.getDate()).substr(-2);\n\ts += \" \"+(\"0\"+d.getHours()).substr(-2)+\":\"+(\"0\"+d.getMinutes()).substr(-2)+\":\"+(\"0\"+d.getSeconds()).substr(-2);\n\ts += '.'+(\"00\"+d.getMilliseconds()).substr(-3)\n\treturn s;\n};\n\nstdfn.GETDATE = stdfn.NOW;\nstdfn.CURRENT_TIMESTAMP = stdfn.NOW;\n\nstdfn.SECOND = function(d){\n\tvar d = new Date(d);\n\treturn d.getSeconds();\n};\n\nstdfn.MINUTE = function(d){\n\tvar d = new Date(d);\n\treturn d.getMinutes();\n};\n\nstdfn.HOUR = function(d){\n\tvar d = new Date(d);\n\treturn d.getHours();\n};\n\nstdfn.DAYOFWEEK = stdfn.WEEKDAY = function(d){\n\tvar d = new Date(d);\n\treturn d.getDay();\n};\n\nstdfn.DAY = stdfn.DAYOFMONTH = function(d){\n\tvar d = new Date(d);\n\treturn d.getDate();\n};\n\nstdfn.MONTH = function(d){\n\tvar d = new Date(d);\n\treturn d.getMonth()+1;\n};\n\nstdfn.YEAR = function(d){\n\tvar d = new Date(d);\n\treturn d.getFullYear();\n};\n\nvar PERIODS = {\n  'year': 1000*3600*24*365,\n  'quarter':1000*3600*24*365/4,\n  'month':1000*3600*24*30,\n  'week': 1000*3600*24*7,\n  'day': 1000*3600*24,\n  'dayofyear': 1000*3600*24,\n  'weekday': 1000*3600*24,\n  'hour': 1000*3600,\n  'minute': 1000*60,\n  'second': 1000,\n  'millisecond': 1,\n  'microsecond': 0.001\n};\n\nalasql.stdfn.DATEDIFF = function(period, d1, d2) {\n  var interval = (new Date(d2)).getTime() - (new Date(d1)).getTime();\n  return interval / PERIODS[period.toLowerCase()];\n};\n\nalasql.stdfn.DATEADD = function(period, interval, d) {\n  var nd = (new Date(d)).getTime() + interval*PERIODS[period.toLowerCase()];\n  return new Date(nd);\n};\n\nalasql.stdfn.INTERVAL = function(interval, period) {\n  return interval*PERIODS[period.toLowerCase()];\n};\n\nalasql.stdfn.DATE_ADD = alasql.stdfn.ADDDATE = function(d, interval) {\n  var nd = (new Date(d)).getTime() + interval;\n  return new Date(nd);\n};\n\nalasql.stdfn.DATE_SUB = alasql.stdfn.SUBDATE = function(d,interval) {\n  var nd = (new Date(d)).getTime() - interval;\n  return new Date(nd);\n};\n\n/*\r\n//\r\n// DROP TABLE for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.DropTable = function (params) { return yy.extend(this, params); };\r\nyy.DropTable.prototype.toString = function() {\r\n\tvar s = 'DROP'+' ';\r\n\tif(this.view) s += 'VIEW';\r\n\telse s += 'TABLE';\r\n\tif(this.ifexists) s += ' IF EXISTS';\r\n\ts += ' '+this.tables.toString();\r\n\treturn s;\r\n};\r\n\n// DROP TABLE\r\n/**\r\n\tDrop tables\r\n\t@param {string} databaseid Database id\r\n\t@param {object} params Parameters\r\n\t@param {callback} cb Callback function\r\n\t@return Number of dropped tables\r\n\t@example\r\n\tDROP TABLE one;\r\n\tDROP TABLE IF NOT EXISTS two, three;\r\n*/\r\nyy.DropTable.prototype.execute = function (databaseid, params, cb) {\r\n\tvar ifexists = this.ifexists;\r\n\tvar res = 0; // No tables removed\r\n\tvar count = 0;\r\n\tvar tlen = this.tables.length;\r\n\n\t// For each table in the list\r\n\tthis.tables.forEach(function(table){\r\n\t\tvar db = alasql.databases[table.databaseid || databaseid];\r\n\t\tvar tableid = table.tableid;\r\n\n\t\t/** @todo Test with AUTOCOMMIT flag is ON */\r\n\t\t/** @todo Test with IndexedDB and multiple tables */\r\n\n\t\tif(!ifexists || ifexists && db.tables[tableid]) {\r\n\t\t\tif(!db.tables[tableid]) {\r\n\t\t\t\tif(!alasql.options.dropifnotexists) {\r\n\t\t\t\t\tthrow new Error('Can not drop table \\''+table.tableid+'\\', because it does not exist in the database.');\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif(db.engineid /*&& alasql.options.autocommit*/) {\r\n\t\t\t\t\talasql.engines[db.engineid].dropTable(table.databaseid || databaseid, tableid, ifexists, function(res1){\r\n\t\t\t\t\t\tdelete db.tables[tableid];\r\n\t\t\t\t\t\tres+=res1;\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\tif(count == tlen && cb) cb(res);\t\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdelete db.tables[tableid];\r\n\t\t\t\t\tres++;\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t\tif(count == tlen && cb) cb(res);\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tcount++;\r\n\t\t\tif(count == tlen && cb) cb(res);\t\r\n\t\t}\r\n\t});\r\n\t// if(cb) res = cb(res);\r\n\treturn res;\r\n};\r\n\nyy.TruncateTable = function (params) { return yy.extend(this, params); };\r\nyy.TruncateTable.prototype.toString = function() {\r\n\tvar s = 'TRUNCATE TABLE';\r\n\ts += ' '+this.table.toString();\r\n\treturn s;\r\n};\r\n\nyy.TruncateTable.prototype.execute = function (databaseid, params, cb) {\r\n\tvar db = alasql.databases[this.table.databaseid || databaseid];\r\n\tvar tableid = this.table.tableid;\r\n\tif(db.engineid) {\r\n\t\treturn alasql.engines[db.engineid].truncateTable(this.table.databaseid || databaseid,tableid, this.ifexists, cb);\r\n\t}\r\n\tif(db.tables[tableid]) {\r\n\t\tdb.tables[tableid].data = [];\r\n\t} else {\r\n\t\tthrow new Error('Cannot truncate table becaues it does not exist');\r\n\t}\r\n\treturn cb?cb(0):0;\r\n};\r\n\n/*\r\n//\r\n// CREATE VERTEX for AlaSQL\r\n// Date: 21.04.2015\r\n// (c) 2015, Andrey Gershun\r\n//\r\n*/\r\n\nyy.CreateVertex = function (params) { return yy.extend(this, params); }\r\nyy.CreateVertex.prototype.toString = function() {\r\n\tvar s = 'CREATE VERTEX ';\r\n\tif(this.class){\r\n\t\ts += this.class+' ';\r\n\t}\r\n\tif(this.sharp){\r\n\t\ts += '#'+this.sharp+' ';\r\n\t}\r\n\tif(this.sets) {\r\n\t\ts += this.sets.toString();\r\n\t} else if(this.content) {\r\n\t\ts += this.content.toString();\r\n\t} else if(this.select) {\r\n\t\ts += this.select.toString();\r\n\t}\r\n\n\treturn s;\r\n}\r\n\nyy.CreateVertex.prototype.toJS = function(context) {\r\n\n\tvar s = 'this.queriesfn['+(this.queriesidx-1)+'](this.params,null,'+context+')';\r\n\t// var s = '';\r\n\treturn s;\r\n};\r\n\n// CREATE TABLE\r\n\nyy.CreateVertex.prototype.compile = function (databaseid) {\r\n\tvar dbid = databaseid;\r\n\n\t// CREATE VERTEX #id\r\n\tvar sharp = this.sharp; \r\n\n\t// CREATE VERTEX \"Name\"\r\n\tif(typeof this.name !== 'undefined') {\r\n\t\tvar s = 'x.name='+this.name.toJS();\r\n\t\tvar namefn = new Function('x',s);\r\n\t}\r\n\n\tif(this.sets && this.sets.length > 0) {\r\n\t\tvar s = this.sets.map(function(st){\r\n\t\t\treturn 'x[\\''+st.column.columnid+'\\']='+st.expression.toJS('x','');\r\n\t\t}).join(';');\r\n\t\tvar setfn = new Function('x,params,alasql',s);\r\n\t} \r\n\n\t// Todo: check for content, select and default\r\n\n\tvar statement = function(params,cb){\r\n\t\tvar res;\r\n\n\t\t// CREATE VERTEX without parameters\r\n\t\tvar db = alasql.databases[dbid];\r\n\t\tvar id;\r\n\t\tif(typeof sharp !== 'undefined') {\r\n\t\t\tid = sharp;\r\n\t\t} else {\r\n\t\t\tid = db.counter++;\r\n\t\t}\r\n\t\tvar vertex = {$id: id, $node:'VERTEX'};\r\n\t\tdb.objects[vertex.$id] = vertex;\r\n\t\tres = vertex;\r\n\t\tif(namefn){\r\n\t\t\tnamefn(vertex);\r\n\t\t}\r\n\t\tif(setfn){\r\n\t\t\tsetfn(vertex,params,alasql);\r\n\t\t}\r\n\n\t\tif(cb){\r\n\t\t\tres = cb(res);\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\treturn statement;\r\n};\r\n\nyy.CreateEdge = function (params) { return yy.extend(this, params); }\r\nyy.CreateEdge.prototype.toString = function() {\r\n\n\tvar s = 'CREATE EDGE'+' ';\r\n\tif(this.class){\r\n\t\ts += this.class+' ';\r\n\t}\r\n\t// todo: SET\r\n\t// todo: CONTENT\r\n\t// todo: SELECT\r\n\treturn s;\r\n}\r\n\nyy.CreateEdge.prototype.toJS = function(context) {\r\n\tvar s = 'this.queriesfn['+(this.queriesidx-1)+'](this.params,null,'+context+')';\r\n\treturn s;\r\n};\r\n\n// CREATE TABLE\r\n\nyy.CreateEdge.prototype.compile = function (databaseid) {\r\n\tvar dbid = databaseid;\r\n\tvar fromfn = new Function('params,alasql','var y;return '+this.from.toJS());\r\n\tvar tofn = new Function('params,alasql','var y;return '+this.to.toJS());\r\n\n\t// CREATE VERTEX \"Name\"\r\n\tif(typeof this.name !== 'undefined') {\r\n\t\tvar s = 'x.name='+this.name.toJS();\r\n\t\tvar namefn = new Function('x',s);\r\n\t}\r\n\n\tif(this.sets && this.sets.length > 0) {\r\n\t\tvar s = this.sets.map(function(st){\r\n\t\t\treturn 'x[\\''+st.column.columnid+'\\']='+st.expression.toJS('x','');\r\n\t\t}).join(';');\r\n\t\tvar setfn = new Function('x,params,alasql','var y;'+s);\r\n\t} \r\n\n\t/*\r\n\ttodo: handle content, select and default\r\n\telse if(this.content) {\r\n\n\t} else if(this.select) {\r\n\n\t} else {\r\n\t}\r\n\t*/\r\n\n\tvar statement = function(params,cb){\r\n\t\tvar res = 0;\r\n\t\t\t// CREATE VERTEX without parameters\r\n\t\tvar db = alasql.databases[dbid];\r\n\t\tvar edge = {$id: db.counter++, $node:'EDGE'};\r\n\t\tvar v1 = fromfn(params,alasql);\r\n\t\tvar v2 = tofn(params,alasql);\r\n\t\t// Set link\r\n\t\tedge.$in = [v1.$id];\r\n\t\tedge.$out = [v2.$id];\r\n\t\t// Set sides\r\n\t\tif(v1.$out === undefined){\r\n\t\t\tv1.$out = [];\r\n\t\t}\r\n\t\tv1.$out.push(edge.$id);\r\n\n\t\tif(typeof v2.$in === undefined){\r\n\t\t\tv2.$in = [];\r\n\t\t}\r\n\t\tv2.$in.push(edge.$id);\r\n\n\t\t// Save in objects\r\n\t\tdb.objects[edge.$id] = edge;\r\n\t\tres = edge;\r\n\t\tif(namefn){\r\n\t\t\tnamefn(edge);\r\n\t\t}\r\n\n\t\tif(setfn){\r\n\t\t\tsetfn(edge,params,alasql);\r\n\t\t}\r\n\n\t\tif(cb){\r\n\t\t\tres = cb(res);\r\n\t\t}\r\n\n\t\treturn res;\r\n\t};\r\n\treturn statement;\r\n\n};\r\n\nyy.CreateGraph = function (params) { return yy.extend(this, params); }\r\nyy.CreateGraph.prototype.toString = function() {\r\n\tvar s = 'CREATE GRAPH'+' ';\r\n\tif(this.class){\r\n\t\ts += this.class+' ';\r\n\t}\r\n\treturn s;\r\n}\r\n\nyy.CreateGraph.prototype.execute = function (databaseid,params,cb) {\r\n\tvar res = [];\r\n\tif(this.from) {\r\n\t\tif(alasql.from[this.from.funcid]) {\r\n\t\t\tthis.graph = alasql.from[this.from.funcid.toUpperCase()]\r\n\t\t}\r\n\t}\r\n\n//\tstop;\r\n\t\tthis.graph.forEach(function(g){\r\n\t\t\tif(g.source) {\r\n\t\t\t\t// GREATE EDGE\r\n\t\t\t\tvar e = {};\r\n\t\t\t\tif(typeof g.as !== 'undefined'){\r\n\t\t\t\t\talasql.vars[g.as] = e;\r\n\t\t\t\t}\r\n\n\t\t\t\tif(typeof g.prop !== 'undefined') {\r\n\t//\t\t\t\te[g.prop] = e;\r\n\t//\t\t\t\tv.$id = g.prop; // We do not create $id for edge automatically\r\n\t\t\t\t\te.name = g.prop;\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif(typeof g.sharp !== 'undefined'){\r\n\t\t\t\t\te.$id = g.sharp;\r\n\t\t\t\t}\r\n\t\t\t\tif(typeof g.name !== 'undefined'){\r\n\t\t\t\t\te.name = g.name;\r\n\t\t\t\t}\r\n\t\t\t\tif(typeof g.class !== 'undefined'){\r\n\t\t\t\t\te.$class = g.class;\r\n\t\t\t\t}\r\n\n\t\t\t\tvar db = alasql.databases[databaseid];\r\n\t\t\t\tif(typeof e.$id === 'undefined') {\r\n\t\t\t\t\te.$id = db.counter++;\r\n\t\t\t\t}\r\n\t\t\t\te.$node='EDGE';\r\n\t\t\t\tif(typeof g.json !== 'undefined') {\r\n\t\t\t\t\textend(e,(new Function('params,alasql','var y;return '+\r\n\t\t\t\t\tg.json.toJS()))(params,alasql));\r\n\t\t\t\t}\r\n\n\t\t\t\tvar v1;\r\n\t\t\t\tif(g.source.vars) {\r\n\t\t\t\t\tvar vo = alasql.vars[g.source.vars];\r\n\t\t\t\t\tif(typeof vo === 'object'){\r\n\t\t\t\t\t\tv1 = vo;\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tv1 = db.objects[vo];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar av1 = g.source.sharp; \r\n\t\t\t\t\tif(typeof av1 === 'undefined'){\r\n\t\t\t\t\t\tav1 = g.source.prop;\r\n\t\t\t\t\t} \r\n\t\t\t\t\tv1 = alasql.databases[databaseid].objects[av1];\r\n\t\t\t\t\tif( \r\n\t\t\t\t\t\ttypeof v1 === 'undefined' && \r\n\t\t\t\t\t\talasql.options.autovertex && \r\n\t\t\t\t\t\t((typeof g.source.prop !== 'undefined') || (typeof g.source.name !== 'undefined'))\r\n\t\t\t\t\t){\r\n\t\t\t\t\t\tv1 = findVertex(g.source.prop || g.source.name);\r\n\t\t\t\t\t\tif(typeof v1 === 'undefined') {\r\n\t\t\t\t\t\t\tv1 = createVertex(g.source);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\n\t\t\t\t}\r\n\n\t\t\t\tvar v2;\r\n\t\t\t\tif(g.source.vars) {\r\n\t\t\t\t\tvar vo = alasql.vars[g.target.vars];\r\n\t\t\t\t\tif(typeof vo === 'object'){\r\n\t\t\t\t\t\tv2 = vo;\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tv2 = db.objects[vo];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar av2 = g.target.sharp; \r\n\t\t\t\t\tif(typeof av2 === 'undefined'){\r\n\t\t\t\t\t\tav2 = g.target.prop; \r\n\t\t\t\t\t}\r\n\t\t\t\t\tv2 = alasql.databases[databaseid].objects[av2];\r\n\t\t\t\t\tif(\r\n\t\t\t\t\t\ttypeof v2 === 'undefined' && \r\n\t\t\t\t\t\talasql.options.autovertex && \r\n\t\t\t\t\t\t((typeof g.target.prop !== 'undefined') || (typeof g.target.name !== 'undefined'))\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tv2 = findVertex(g.target.prop || g.target.name);\r\n\t\t\t\t\t\tif(typeof v2 === 'undefined') {\r\n\t\t\t\t\t\t\tv2 = createVertex(g.target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\n\t\t\t\t// Set link\r\n\t\t\t\te.$in = [v1.$id];\r\n\t\t\t\te.$out = [v2.$id];\r\n\t\t\t\t// Set sides\r\n\t\t\t\tif(typeof v1.$out === 'undefined'){\r\n\t\t\t\t\tv1.$out = [];\r\n\t\t\t\t}\r\n\t\t\t\tv1.$out.push(e.$id);\r\n\t\t\t\tif(typeof v2.$in === 'undefined'){\r\n\t\t\t\t\tv2.$in = [];\r\n\t\t\t\t}\r\n\t\t\t\tv2.$in.push(e.$id);\r\n\n\t\t\t\tdb.objects[e.$id] = e;\r\n\t\t\t\tif(typeof e.$class !== 'undefined') {\r\n\t\t\t\t\tif(typeof alasql.databases[databaseid].tables[e.$class] === 'undefined') {\r\n\t\t\t\t\t\tthrow new Error('No such class. Pleace use CREATE CLASS');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// TODO - add insert()\r\n\t\t\t\t\t\talasql.databases[databaseid].tables[e.$class].data.push(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\n\t\t\t\tres.push(e.$id);\r\n\n\t\t\t} else {\r\n\t\t\t\tcreateVertex(g);\r\n\t\t\t}\r\n\t\t});\r\n\n\tif(cb){\r\n\t\tres = cb(res);\r\n\t}\r\n\treturn res;\r\n\n\t// Find vertex by name\r\n\tfunction findVertex(name) {\r\n\t\tvar objects = alasql.databases[alasql.useid].objects;\r\n\t\tfor(var k in objects) {\r\n\t\t\tif(objects[k].name === name) {\r\n\t\t\t\treturn objects[k];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\n\tfunction createVertex(g) {\r\n\t\t// GREATE VERTEX\r\n\t\tvar v = {};\r\n\t\tif(typeof g.as !== 'undefined'){\r\n\t\t\talasql.vars[g.as] = v;\r\n\t\t}\r\n\n\t\tif(typeof g.prop !== 'undefined') {\r\n\t//\t\t\t\tv[g.prop] = true;\r\n\t\t\tv.$id = g.prop;\r\n\t\t\tv.name = g.prop;\t\t\t\t\r\n\t\t}\r\n\n\t\tif(typeof g.sharp !== 'undefined'){\r\n\t\t\tv.$id = g.sharp;\r\n\t\t}\r\n\t\tif(typeof g.name !== 'undefined'){\r\n\t\t\tv.name = g.name;\r\n\t\t}\r\n\t\tif(typeof g.class !== 'undefined'){\r\n\t\t\tv.$class = g.class;\r\n\t\t}\r\n\n\t\tvar db = alasql.databases[databaseid];\r\n\t\tif(typeof v.$id === 'undefined') {\r\n\t\t\tv.$id = db.counter++;\r\n\t\t}\r\n\t\tv.$node='VERTEX';\r\n\t\tif(typeof g.json !== 'undefined') {\r\n\t\t\textend(v,(new Function('params,alasql','var y;return '+\r\n\t\t\tg.json.toJS()))(params,alasql));\r\n\t\t}\r\n\t\tdb.objects[v.$id] = v;\r\n\t\tif(typeof v.$class !== 'undefined') {\r\n\t\t\tif(typeof alasql.databases[databaseid].tables[v.$class] === 'undefined') {\r\n\t\t\t\tthrow new Error('No such class. Pleace use CREATE CLASS');\r\n\t\t\t} else {\r\n\t\t\t\t// TODO - add insert()\r\n\t\t\t\talasql.databases[databaseid].tables[v.$class].data.push(v);\r\n\t\t\t}\r\n\t\t}\r\n\n\t\tres.push(v.$id);\r\n\t\treturn v;\r\n\t}\r\n\n};\r\n\nyy.CreateGraph.prototype.compile1 = function (databaseid) {\r\n\tvar dbid = databaseid;\r\n\tvar fromfn = new Function('params,alasql','var y;return '+this.from.toJS());\r\n\tvar tofn = new Function('params,alasql','var y;return '+this.to.toJS());\r\n\n\t// CREATE VERTEX \"Name\"\r\n\tif(typeof this.name !== 'undefined') {\r\n\t\tvar s = 'x.name='+this.name.toJS();\r\n\t\tvar namefn = new Function('x',s);\r\n\t}\r\n\n\tif(this.sets && this.sets.length > 0) {\r\n\t\tvar s = this.sets.map(function(st){\r\n\t\t\treturn 'x[\\''+st.column.columnid+'\\']='+st.expression.toJS('x','');\r\n\t\t}).join(';');\r\n\t\tvar setfn = new Function('x,params,alasql','var y;'+s);\r\n\t} \r\n\n\t// Todo: handle content, select and default\r\n\n\tvar statement = function(params,cb){\r\n\t\tvar res = 0;\r\n\t\t\t// CREATE VERTEX without parameters\r\n\t\tvar db = alasql.databases[dbid];\r\n\t\tvar edge = {$id: db.counter++, $node:'EDGE'};\r\n\t\tvar v1 = fromfn(params,alasql);\r\n\t\tvar v2 = tofn(params,alasql);\r\n\t\t// Set link\r\n\t\tedge.$in = [v1.$id];\r\n\t\tedge.$out = [v2.$id];\r\n\t\t// Set sides\r\n\t\tif(typeof v1.$out === 'undefined'){\r\n\t\t\tv1.$out = [];\r\n\t\t}\r\n\t\tv1.$out.push(edge.$id);\r\n\n\t\tif(typeof v2.$in === 'undefined'){\r\n\t\t\tv2.$in = [];\r\n\t\t}\r\n\t\tv2.$in.push(edge.$id);\r\n\t\t// Save in objects\r\n\t\tdb.objects[edge.$id] = edge;\r\n\t\tres = edge;\r\n\t\tif(namefn){\r\n\t\t\tnamefn(edge);\r\n\t\t}\r\n\t\tif(setfn){\r\n\t\t\tsetfn(edge,params,alasql);\r\n\t\t}\r\n\n\t\tif(cb){\r\n\t\t\tres = cb(res);\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\treturn statement;\r\n\n};\r\n\n/*\r\n//\r\n// ALTER TABLE for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n// ALTER TABLE table1 RENAME TO table2\r\nyy.AlterTable = function (params) { return yy.extend(this, params); }\r\nyy.AlterTable.prototype.toString = function() {\r\n\tvar s = 'ALTER TABLE '+this.table.toString(); \r\n\tif(this.renameto) s += ' RENAME TO '+this.renameto;\r\n\treturn s;\r\n}\r\n\nyy.AlterTable.prototype.execute = function (databaseid, params, cb) {\r\n\tvar db = alasql.databases[databaseid];\r\n\tdb.dbversion = Date.now();\r\n\n\tif(this.renameto) {\r\n\t\tvar oldtableid = this.table.tableid;\r\n\t\tvar newtableid = this.renameto;\r\n\t\t\tvar res = 1;\r\n\t\t\tif(db.tables[newtableid]) {\r\n\t\t\t\tthrow new Error(\"Can not rename a table '\"+oldtableid+\"' to '\"\r\n\t\t\t\t\t+newtableid+\"', because the table with this name already exists\");\r\n\t\t\t} else if(newtableid == oldtableid) {\r\n\t\t\t\tthrow new Error(\"Can not rename a table '\"+oldtableid+\"' to itself\");\r\n\t\t\t} else {\r\n\t\t\t\tdb.tables[newtableid] = db.tables[oldtableid];\r\n\t\t\t\tdelete db.tables[oldtableid];\r\n\t\t\t\tres = 1;\r\n\t\t\t};\r\n\t\t\tif(cb) cb(res)\r\n\t\t\treturn res;\r\n\t} else if(this.addcolumn) {\r\n\t\tvar db = alasql.databases[this.table.databaseid || databaseid];\r\n\t\tdb.dbversion++;\r\n\t\tvar tableid = this.table.tableid;\r\n\t\tvar table = db.tables[tableid];\r\n\t\tvar columnid = this.addcolumn.columnid;\r\n\t\tif(table.xcolumns[columnid]) {\r\n\t\t\tthrow new Error('Cannot add column \"'+columnid+'\", because it already exists in the table \"'+tableid+'\"');\r\n\t\t}\r\n\n\t\tvar col = {\r\n\t\t\tcolumnid:columnid,\r\n\t\t\tdbtypeid:this.dbtypeid,\r\n\t\t\tdbsize:this.dbsize,\r\n\t\t\tdbprecision:this.dbprecision,\r\n\t\t\tdbenum:this.dbenum,\r\n\t\t\tdefaultfns: null // TODO defaultfns!!!\r\n\t\t};\r\n\n\t\tvar defaultfn = function(){};\r\n\n\t\ttable.columns.push(col);\r\n\t\ttable.xcolumns[columnid] = col;\r\n\n\t\tfor(var i=0, ilen=table.data.length; i<ilen; i++) {\r\n\n\t\t\ttable.data[i][columnid] = defaultfn();\r\n\t\t}\r\n\n\t\t// TODO\r\n\t\treturn cb?cb(1):1;\r\n\t} else if(this.modifycolumn) {\r\n\t\tvar db = alasql.databases[this.table.databaseid || databaseid];\r\n\t\tdb.dbversion++;\r\n\t\tvar tableid = this.table.tableid;\r\n\t\tvar table = db.tables[tableid];\r\n\t\tvar columnid = this.modifycolumn.columnid;\r\n\n\t\tif(!table.xcolumns[columnid]) {\r\n\t\t\tthrow new Error('Cannot modify column \"'+columnid+'\", because it was not found in the table \"'+tableid+'\"');\r\n\t\t}\r\n\n\t\tvar col = table.xcolumns[columnid];\r\n\t\tcol.dbtypeid = this.dbtypeid;\r\n\t\tcol.dbsize = this.dbsize;\r\n\t\tcol.dbprecision = this.dbprecision;\r\n\t\tcol.dbenum = this.dbenum;\r\n\n\t\t// TODO\r\n\t\treturn cb?cb(1):1;\r\n\t} else if(this.renamecolumn) {\r\n\t\tvar db = alasql.databases[this.table.databaseid || databaseid];\r\n\t\tdb.dbversion++;\r\n\n\t\tvar tableid = this.table.tableid;\r\n\t\tvar table = db.tables[tableid];\r\n\t\tvar columnid = this.renamecolumn;\r\n\t\tvar tocolumnid = this.to;\r\n\n\t\tvar col;\r\n\t\tif(!table.xcolumns[columnid]) {\r\n\t\t\tthrow new Error('Column \"'+columnid+'\" is not found in the table \"'+tableid+'\"');\r\n\t\t}\r\n\t\tif(table.xcolumns[tocolumnid]) {\r\n\t\t\tthrow new Error('Column \"'+tocolumnid+'\" already exists in the table \"'+tableid+'\"');\r\n\t\t}\r\n\n\t\tif(columnid != tocolumnid) {\r\n\t\t\tfor(var j=0; j<table.columns.length; j++) {\r\n\t\t\t\tif(table.columns[j].columnid == columnid) {\r\n\t\t\t\t\ttable.columns[j].columnid = tocolumnid;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\n\t\t\ttable.xcolumns[tocolumnid]=table.xcolumns[columnid];\r\n\t\t\tdelete table.xcolumns[columnid];\r\n\n\t\t\tfor(var i=0, ilen=table.data.length; i<ilen; i++) {\r\n\n\t\t\t\ttable.data[i][tocolumnid] = table.data[i][columnid];\r\n\t\t\t\tdelete table.data[i][columnid];\r\n\t\t\t}\r\n\t\t\treturn table.data.length;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn cb?cb(0):0;\r\n\t\t}\r\n\t} else if(this.dropcolumn) {\r\n\t\tvar db = alasql.databases[this.table.databaseid || databaseid];\r\n\t\tdb.dbversion++;\r\n\t\tvar tableid = this.table.tableid;\r\n\t\tvar table = db.tables[tableid];\r\n\t\tvar columnid = this.dropcolumn;\r\n\n\t\tvar found = false;\r\n\t\tfor(var j=0; j<table.columns.length; j++) {\r\n\t\t\tif(table.columns[j].columnid == columnid) {\r\n\t\t\t\tfound = true;\r\n\t\t\t\ttable.columns.splice(j,1);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\n\t\tif(!found) {\r\n\t\t\tthrow new Error('Cannot drop column \"'+columnid+'\", because it was not found in the table \"'+tableid+'\"');\r\n\t\t}\r\n\n\t\tdelete table.xcolumns[columnid];\r\n\n\t\tfor(var i=0, ilen=table.data.length; i<ilen; i++) {\r\n\t\t\tdelete table.data[i][columnid];\r\n\t\t}\r\n\t\treturn cb?cb(table.data.length):table.data.length;\r\n\t} else {\r\n\t\tthrow Error('Unknown ALTER TABLE method');\r\n\t}\r\n\n};\r\n\n/*\r\n//\r\n// CREATE TABLE for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.CreateIndex = function (params) { return yy.extend(this, params); }\r\nyy.CreateIndex.prototype.toString = function() {\r\n\tvar s = 'CREATE';\r\n\tif(this.unique) s+=' UNIQUE';\r\n\ts += ' INDEX ' + this.indexid + \" ON \"+this.table.toString();\r\n\ts += \"(\"+this.columns.toString()+\")\";\r\n\treturn s;\r\n}\r\n\n// CREATE TABLE\r\nyy.CreateIndex.prototype.execute = function (databaseid,params,cb) {\r\n//\tvar self = this;\r\n\tvar db = alasql.databases[databaseid];\r\n\tvar tableid = this.table.tableid;\r\n\tvar table = db.tables[tableid];\r\n\tvar indexid = this.indexid;\r\n\tdb.indices[indexid] = tableid;\r\n\n\t\tvar rightfns = this.columns.map(function(expr){\r\n\t\t\treturn expr.expression.toJS('r','')\r\n\t\t}).join(\"+'`'+\");\r\n\n\t\tvar rightfn = new Function('r,params,alasql','return '+rightfns);\r\n\n\tif(this.unique) {\r\n\t\ttable.uniqdefs[indexid] = {\r\n\t\t\trightfns: rightfns\r\n\t\t};\r\n\t\tvar ux = table.uniqs[indexid] = {};\r\n\t\tif(table.data.length > 0) {\r\n\t\t\tfor(var i=0, ilen=table.data.length; i<ilen;i++) {\r\n\t\t\t\tvar addr = rightfns(table.data[i]);\r\n\t\t\t\tif(!ux[addr]) {\r\n\t\t\t\t\tux[addr] = {num:0};\r\n\t\t\t\t};\r\n\t\t\t\tux[addr].num++;\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tvar hh = hash(rightfns);\r\n\t\ttable.inddefs[indexid] = {rightfns:rightfns, hh:hh};\r\n\t\ttable.indices[hh] = {};\r\n\n\t\tvar ix = table.indices[hh] = {};\r\n\t\tif(table.data.length > 0) {\r\n\t\t\tfor(var i=0, ilen=table.data.length; i<ilen;i++) {\r\n\t\t\t\tvar addr = rightfn(table.data[i],params,alasql);\r\n\t\t\t\tif(!ix[addr]) {\r\n\t\t\t\t\tix[addr] = [];\r\n\t\t\t\t};\r\n\t\t\t\tix[addr].push(table.data[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tvar res = 1;\r\n\tif(cb) res = cb(res);\r\n\treturn res;\r\n};\r\n\nyy.Reindex = function (params) { return yy.extend(this, params); };\r\nyy.Reindex.prototype.toString = function() {\r\n\tvar s = 'REINDEX '+this.indexid;\r\n\treturn s;\r\n};\r\n\n// CREATE TABLE\r\nyy.Reindex.prototype.execute = function (databaseid,params,cb) {\r\n//\tvar self = this;\r\n\tvar db = alasql.databases[databaseid];\r\n\tvar indexid = this.indexid;\r\n\n\tvar tableid = db.indices[indexid];\r\n\tvar table = db.tables[tableid];\r\n\ttable.indexColumns();\r\n\tvar res = 1;\r\n\tif(cb) res = cb(res);\r\n\treturn res;\r\n};\r\n\n/*\r\n//\r\n// DROP TABLE for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.DropIndex = function (params) { return yy.extend(this, params); }\r\nyy.DropIndex.prototype.toString = function() {\r\n\treturn 'DROP INDEX' + this.indexid;\r\n}\r\n\n// DROP TABLE\r\nyy.DropIndex.prototype.compile = function (db) {\r\n\tvar indexid = this.indexid;\r\n\treturn function() {\r\n\t\treturn 1;\r\n\t}\r\n};\r\n\n/*\r\n//\r\n// WITH SELECT for Alasql.js\r\n// Date: 11.01.2015\r\n// (c) 2015, Andrey Gershun\r\n//\r\n*/\r\n\nyy.WithSelect = function (params) { return yy.extend(this, params); }\r\nyy.WithSelect.prototype.toString = function() {\r\n\tvar s = 'WITH ';\r\n\ts += this.withs.map(function(w){\r\n\t\treturn w.name+' AS ('+w.select.toString()+')';\r\n\t}).join(',')+' ';\r\n\ts += this.select.toString();\r\n\treturn s;\r\n};\r\n\nyy.WithSelect.prototype.execute = function (databaseid,params,cb) {\r\n\tvar self = this;\r\n\t// Create temporary tables\r\n\tvar savedTables = [];\r\n\tself.withs.forEach(function(w){\r\n\t\tsavedTables.push(alasql.databases[databaseid].tables[w.name]);\r\n\t\tvar tb = alasql.databases[databaseid].tables[w.name] = new Table({tableid:w.name});\r\n\t\ttb.data = w.select.execute(databaseid,params);\r\n\t});\r\n\n\tvar res = 1;\r\n\tres = this.select.execute(databaseid,params,function(data){\r\n\t\t// Clear temporary tables\r\n\n\t\t\tself.withs.forEach(function(w,idx){\r\n\t\t\t\tif(savedTables[idx]) alasql.databases[databaseid].tables[w.name] = savedTables[idx] ;\r\n\t\t\t\telse delete alasql.databases[databaseid].tables[w.name];\r\n\t\t\t});\t\t\t\r\n\n\t\tif(cb) data = cb(data);\r\n\t\treturn data;\r\n\t});\r\n\treturn res;\r\n};\r\n\n/*\r\n//\r\n// IF for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.If = function (params) { return yy.extend(this, params); }\r\nyy.If.prototype.toString = function() {\r\n\tvar s = 'IF'+' ';\r\n\ts += this.expression.toString();\r\n\ts += ' '+this.thenstat.toString();\r\n\tif(this.elsestat) s += ' ELSE '+this.thenstat.toString();\r\n\treturn s;\r\n};\r\n\n// CREATE TABLE\r\n\nyy.If.prototype.execute = function (databaseid,params,cb){\r\n\tvar res;\r\n\n\tvar fn = new Function('params,alasql,p','var y;return '+this.expression.toJS('({})','',null)).bind(this);\r\n\n\tif(fn(params,alasql)) res = this.thenstat.execute(databaseid,params,cb);\r\n\telse {\r\n\t\tif(this.elsestat) res = this.elsestat.execute(databaseid,params,cb);\r\n\t\telse {\r\n\t\t\tif(cb) res = cb(res);\r\n\t\t}\r\n\t}\r\n\n\treturn res;\r\n};\r\n\n/*\r\n//\r\n// CREATE VIEW for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.While = function (params) { return yy.extend(this, params); }\r\nyy.While.prototype.toString = function() {\r\n\tvar s = 'WHILE ';\r\n\ts += this.expression.toString();\r\n\ts += ' '+this.loopstat.toString();\r\n\treturn s;\r\n};\r\n\nyy.While.prototype.execute = function (databaseid,params,cb) {\r\n\tvar self = this;\r\n\tvar res = [];\r\n\n\tvar fn = new Function('params,alasql,p','var y;return '+this.expression.toJS());\r\n\n\tif(cb) {\r\n\t\tvar first = false;\r\n\t\tloop();\r\n\t\tfunction loop(data) {\r\n\t\t\tif(first) {\r\n\t\t\t\tres.push(data);\r\n\t\t\t} else {\r\n\t\t\t\tfirst = true;\r\n\t\t\t};\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tif(fn(params,alasql)) {\r\n\t\t\t\t\tself.loopstat.execute(databaseid,params,loop);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tres = cb(res);\r\n\t\t\t\t}\r\n\t\t\t},0);\r\n\t\t}\t\t\r\n\t} else {\r\n\t\twhile(fn(params,alasql)) {\r\n\t\t\tvar res1 = self.loopstat.execute(databaseid,params); \r\n\t\t\tres.push(res1);\r\n\t\t}\r\n\t}\r\n\treturn res;\r\n};\r\n\nyy.Break = function (params) { return yy.extend(this, params); }\r\nyy.Break.prototype.toString = function() {\r\n\tvar s = 'BREAK';\r\n\treturn s;\r\n};\r\n\nyy.Break.prototype.execute = function (databaseid,params,cb,scope) {\r\n\tvar res = 1;\r\n\tif(cb) res = cb(res);\r\n\treturn res;\r\n};\r\n\nyy.Continue = function (params) { return yy.extend(this, params); }\r\nyy.Continue.prototype.toString = function() {\r\n\tvar s = 'CONTINUE';\r\n\treturn s;\r\n};\r\n\nyy.Continue.prototype.execute = function (databaseid,params,cb,scope) {\r\n\tvar res = 1;\r\n\tif(cb) res = cb(res);\t\r\n\treturn res;\r\n};\r\n\nyy.BeginEnd = function (params) { return yy.extend(this, params); }\r\nyy.BeginEnd.prototype.toString = function() {\r\n\tvar s = 'BEGIN '+this.statements.toString()+' END';\r\n\treturn s;\r\n};\r\n\nyy.BeginEnd.prototype.execute = function (databaseid,params,cb,scope) {\r\n\tvar self = this;\r\n\tvar res = [];\r\n\n\tvar idx = 0;\r\n\trunone();\r\n\tfunction runone() {\r\n\t\tself.statements[idx].execute(databaseid,params,function(data){\r\n\t\t\tres.push(data);\r\n\t\t\tidx++;\r\n\t\t\tif(idx<self.statements.length) return runone();\r\n\t\t\tif(cb) res = cb(res);\r\n\t\t});\r\n\t}\r\n\treturn res;\r\n};\r\n\n/*\n//\n// INSERT for Alasql.js\n// Date: 03.11.2014\n// (c) 2014, Andrey Gershun\n//\n*/\n\nyy.Insert = function (params) { return yy.extend(this, params); }\nyy.Insert.prototype.toString = function() {\n\tvar s = 'INSERT ';\n\tif(this.orreplace) s += 'OR REPLACE ';\n\tif(this.replaceonly) s = 'REPLACE ';\n\ts += 'INTO '+this.into.toString();\n\tif(this.columns) s += '('+this.columns.toString()+')';\n\tif(this.values) s += ' VALUES '+this.values.toString();\n\tif(this.select) s += ' '+this.select.toString();\n\treturn s;\n}\n\nyy.Insert.prototype.toJS = function(context, tableid, defcols) {\n\n//\tif(this.expression.reduced) return 'true';\n//\treturn this.expression.toJS(context, tableid, defcols);\n\n//\tvar s = 'this.queriesdata['+(this.queriesidx-1)+'][0]';\n\n\tvar s = 'this.queriesfn['+(this.queriesidx-1)+'](this.params,null,'+context+')';\n\n\treturn s;\n};\n\nyy.Insert.prototype.compile = function (databaseid) {\n\tvar self = this;\n\tdatabaseid = self.into.databaseid || databaseid\n\tvar db = alasql.databases[databaseid];\n\n\tvar tableid = self.into.tableid;\n\tvar table = db.tables[tableid];\n\n\tif(!table){\n\t\tthrow \"Table '\"+tableid+\"' could not be found\";\n\t}\n\n\t// Check, if this dirty flag is required\n\tvar s = '';\n\tvar sw = '';\n\tvar s = 'db.tables[\\''+tableid+'\\'].dirty=true;';\n\tvar s3 = 'var a,aa=[],x;';\n\n\tvar s33;\n\n// INSERT INTO table VALUES\n\tif(this.values) {\n\n\t\tif(this.exists) {\n\t\t\tthis.existsfn  = this.exists.map(function(ex) {\n\t\t\t\tvar nq = ex.compile(databaseid);\n\t\t\t\tnq.query.modifier='RECORDSET';\n\t\t\t\treturn nq;\n\t\t\t});\n\t\t}\n\t\tif(this.queries) {\n\t\t\tthis.queriesfn = this.queries.map(function(q) {\n\t\t\t\tvar nq = q.compile(databaseid);\n\t\t\t\tnq.query.modifier='RECORDSET';\n\t\t\t\treturn nq;\n\t\t\t});\t\t\n\t\t}\n\n\t\tself.values.forEach(function(values) {\n\t\t\tvar ss = [];\n\n\t\t\tif(self.columns) {\n\t\t\t\tself.columns.forEach(function(col, idx){\n\n\t\t\t\t\tvar q = \"'\"+col.columnid +'\\':';\n\t\t\t\t\tif(table.xcolumns && table.xcolumns[col.columnid]) { \n\t\t\t\t\t\tif([\"INT\",\"FLOAT\",\"NUMBER\",\"MONEY\"].indexOf(table.xcolumns[col.columnid].dbtypeid) >=0) {\n\t\t\t\t\t\t\t//q += ''\n\t\t\t\t\t\t\tq += \"(x=\"+values[idx].toJS()+\",x==undefined?undefined:+x)\";\n\t\t\t\t\t\t} else if (alasql.fn[table.xcolumns[col.columnid].dbtypeid]) {\n\t\t\t\t\t\t\tq += \"(new \"+table.xcolumns[col.columnid].dbtypeid+\"(\";\n\t\t\t\t\t\t\tq += values[idx].toJS();\n\t\t\t\t\t\t\tq += \"))\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tq += values[idx].toJS();\n\t\t\t\t\t\t};\n\t\t\t\t\t} else { \n\t\t\t\t\t\tq += values[idx].toJS();\n\t\t\t\t\t}\n\t\t\t\t\tss.push(q);\n\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\tif((Array.isArray(values)) && table.columns && table.columns.length > 0) {\n\t\t\t\t\ttable.columns.forEach(function(col, idx){\n\n\t\t\t\t\t\tvar q = '\\''+col.columnid +'\\':';\n\n\t\t\t\t\t\tif([\"INT\",\"FLOAT\",\"NUMBER\",\"MONEY\"].indexOf(col.dbtypeid) >=0) {\n\t\t\t\t\t\t\tq += \"+\"+values[idx].toJS();\n\t\t\t\t\t\t} else if (alasql.fn[col.dbtypeid]) {\n\t\t\t\t\t\t\tq += \"(new \"+col.dbtypeid+\"(\";\n\t\t\t\t\t\t\tq += values[idx].toJS();\n\t\t\t\t\t\t\tq += \"))\";\n\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\tq += values[idx].toJS();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tss.push(q);\n\n\t\t\t\t\t});\n\t\t\t\t} else {\n\n\t\t\t\t\tsw = JSONtoJS(values);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(db.tables[tableid].defaultfns) {\n\t\t\t\tss.unshift(db.tables[tableid].defaultfns);\n\t\t\t};\n\t\t\tif(sw) {\n\t\t\t\ts += 'a='+sw+';';\n\t\t\t} else {\n\t\t\t\ts += 'a={'+ss.join(',')+'};';\n\t\t\t}\n\n\t\t\t// If this is a class\n\t\t\tif(db.tables[tableid].isclass) {\n\t\t\t\ts += 'var db=alasql.databases[\\''+databaseid+'\\'];';\n\t\t\t\ts+= 'a.$class=\"'+tableid+'\";';\n\t\t\t\ts+= 'a.$id=db.counter++;';\n\t\t\t\ts+= 'db.objects[a.$id]=a;';\n\t\t\t};\n\n\t        if(db.tables[tableid].insert) {\n\t\t\t\ts += 'var db=alasql.databases[\\''+databaseid+'\\'];';\n\t\t\t\ts += 'db.tables[\\''+tableid+'\\'].insert(a,'+(self.orreplace?\"true\":\"false\")+');';\n\t        } else {\n\t\t\t\ts += 'aa.push(a);';\n\t\t\t}\n\t\t});\n\n\t\ts33 = s3+s;\n\n        if(db.tables[tableid].insert) {\n\n        } else {\n            s += 'alasql.databases[\\''+databaseid+'\\'].tables[\\''+tableid+'\\'].data='+\t\n            'alasql.databases[\\''+databaseid+'\\'].tables[\\''+tableid+'\\'].data.concat(aa);';\n        }\n\n        if(db.tables[tableid].insert) {\n        \tif(db.tables[tableid].isclass) {\n\t        \ts += 'return a.$id;';\n        \t} else {\n\t\t\t\ts += 'return '+self.values.length;\n        \t}\n        } else {\n\t\t\ts += 'return '+self.values.length;\n        }\n\n\t\tvar insertfn = new Function('db, params, alasql','var y;'+s3+s).bind(this);\n\n// INSERT INTO table SELECT\n\n\t} else if(this.select) {\n\t\tthis.select.modifier = 'RECORDSET';\n\t\tvar selectfn = this.select.compile(databaseid);\n\t    if(db.engineid && alasql.engines[db.engineid].intoTable) {\n\t\t\tvar statement = function(params, cb) {\n\t\t\t\tvar aa = selectfn(params);\n\t\t\t\tvar res = alasql.engines[db.engineid].intoTable(db.databaseid,tableid,aa.data,null, cb);\n\t\t\t\treturn res;\n\t\t\t};\n\t\t\treturn statement;\n\t    } else {\n\n\t\t\t\tvar defaultfns = 'return alasql.utils.extend(r,{'+table.defaultfns+'})';\n    \t    \tvar defaultfn = new Function('r,db,params,alasql',defaultfns); \n\t\t\tvar insertfn = function(db, params, alasql) {\n\t\t\t\tvar res = selectfn(params).data;\n\t\t        if(db.tables[tableid].insert) {\n\t\t        \t// If insert() function exists (issue #92)\n\t\t        \tfor(var i=0,ilen=res.length;i<ilen;i++) {\n\t\t        \t\tvar r = cloneDeep(res[i]);\n\t\t        \t\tdefaultfn(r,db,params,alasql);\n\t\t        \t\tdb.tables[tableid].insert(r,self.orreplace);\n\t\t        \t}\n\t\t        } else {\n\t\t\t\t\tdb.tables[tableid].data = db.tables[tableid].data.concat(res);\n\t\t        };\n\t\t        if(alasql.options.nocount) return;\n\t\t\t\telse return res.length;\n\t\t\t}\n\t\t}\n\n\t} else if(this.default) {\n\t\tvar insertfns = 'db.tables[\\''+tableid+'\\'].data.push({'+table.defaultfns+'});return 1;';\n        var insertfn = new Function('db,params,alasql',insertfns); \n    } else {\n    \tthrow new Error('Wrong INSERT parameters');\n    }\n\n    if(db.engineid && alasql.engines[db.engineid].intoTable && alasql.options.autocommit) {\n\t\tvar statement = function(params, cb) {\n\t\t\tvar aa = new Function(\"db,params\",'var y;'+s33+'return aa;')(db,params);\n\n\t\t\tvar res = alasql.engines[db.engineid].intoTable(db.databaseid,tableid,aa, null, cb);\n\n\t\t\treturn res;\n\t\t};\n\n    } else {\n\n\t\tvar statement = function(params, cb) {\n\n\t\t\tvar db = alasql.databases[databaseid];\n\n\t\t\tif(alasql.options.autocommit && db.engineid) {\n\t\t\t\talasql.engines[db.engineid].loadTableData(databaseid,tableid);\n\t\t\t}\n\n\t\t\tvar res = insertfn(db,params,alasql);\n\n\t\t\tif(alasql.options.autocommit && db.engineid) {\n\t\t\t\talasql.engines[db.engineid].saveTableData(databaseid,tableid);\n\t\t\t}\n\t//\t\tvar res = insertfn(db, params);\n\t        if(alasql.options.nocount) res = undefined;\n\t\t\tif(cb) cb(res);\n\t\t\treturn res;\n\t\t};\n\t};\n\n\treturn statement;\n};\n\nyy.Insert.prototype.execute = function (databaseid, params, cb) {\n\treturn this.compile(databaseid)(params,cb);\n//\tthrow new Error('Insert statement is should be compiled')\n}\n\n/*\r\n//\r\n// TRIGGER for Alasql.js\r\n// Date: 29.12.2015\r\n//\r\n*/\r\n\nyy.CreateTrigger = function (params) { return yy.extend(this, params); };\r\nyy.CreateTrigger.prototype.toString = function() {\r\n\tvar s = 'CREATE TRIGGER '+this.trigger +' ';\r\n\tif(this.when) s += this.when+' ';\r\n\ts += this.action+' ON ';\r\n\tif(this.table.databaseid) s += this.table.databaseid+'.';\r\n\ts += this.table.tableid+' ';\r\n\ts += this.statement.toString();\r\n\treturn s;\r\n};\r\n\nyy.CreateTrigger.prototype.execute = function (databaseid, params, cb) {\r\n\tvar res = 1; // No tables removed\r\n\tvar triggerid = this.trigger;\r\n\tdatabaseid = this.table.databaseid || databaseid;\r\n\tvar db = alasql.databases[databaseid];\r\n\tvar tableid = this.table.tableid;\r\n\n\tvar trigger = {\r\n\t\taction: this.action,\r\n\t\twhen: this.when,\r\n\t\tstatement: this.statement,\r\n\t\tfuncid: this.funcid\r\n\t};\r\n\n\tdb.triggers[triggerid] = trigger;\r\n\tif(trigger.action == 'INSERT' && trigger.when == 'BEFORE') {\r\n\t\tdb.tables[tableid].beforeinsert[triggerid] = trigger;\r\n\t} else if(trigger.action == 'INSERT' && trigger.when == 'AFTER') {\r\n\t\tdb.tables[tableid].afterinsert[triggerid] = trigger;\r\n\t} else if(trigger.action == 'INSERT' && trigger.when == 'INSTEADOF') {\r\n\t\tdb.tables[tableid].insteadofinsert[triggerid] = trigger;\r\n\t} else if(trigger.action == 'DELETE' && trigger.when == 'BEFORE') {\r\n\t\tdb.tables[tableid].beforedelete[triggerid] = trigger;\r\n\t} else if(trigger.action == 'DELETE' && trigger.when == 'AFTER') {\r\n\t\tdb.tables[tableid].afterdelete[triggerid] = trigger;\r\n\t} else if(trigger.action == 'DELETE' && trigger.when == 'INSTEADOF') {\r\n\t\tdb.tables[tableid].insteadofdelete[triggerid] = trigger;\r\n\t} else if(trigger.action == 'UPDATE' && trigger.when == 'BEFORE') {\r\n\t\tdb.tables[tableid].beforeupdate[triggerid] = trigger;\r\n\t} else if(trigger.action == 'UPDATE' && trigger.when == 'AFTER') {\r\n\t\tdb.tables[tableid].afterupdate[triggerid] = trigger;\r\n\t} else if(trigger.action == 'UPDATE' && trigger.when == 'INSTEADOF') {\r\n\t\tdb.tables[tableid].insteadofupdate[triggerid] = trigger;\r\n\t}\r\n\n\tif(cb) res = cb(res);\r\n\treturn res;\r\n};\r\n\nyy.DropTrigger = function (params) { return yy.extend(this, params); };\r\nyy.DropTrigger.prototype.toString = function() {\r\n\tvar s = 'DROP TRIGGER '+this.trigger;\r\n\treturn s;\r\n};\r\n\n/**\r\n\tDrop trigger\r\n\t@param {string} databaseid Database id\r\n\t@param {object} params Parameters\r\n\t@param {callback} cb Callback function\r\n\t@return Number of dropped triggers\r\n\t@example\r\n\tDROP TRIGGER one;\r\n*/\r\nyy.DropTrigger.prototype.execute = function (databaseid, params, cb) {\r\n\tvar res = 0; // No tables removed\r\n\tvar db = alasql.databases[databaseid];\r\n\tvar triggerid = this.trigger;\r\n\t// For each table in the list\r\n\tvar tableid = db.triggers[triggerid];\r\n\tif(tableid) {\r\n\t\tres = 1;\r\n\t\tdelete db.tables[tableid].beforeinsert[triggerid];\r\n\t\tdelete db.tables[tableid].afterinsert[triggerid];\r\n\t\tdelete db.tables[tableid].insteadofinsert[triggerid];\r\n\t\tdelete db.tables[tableid].beforedelte[triggerid];\r\n\t\tdelete db.tables[tableid].afterdelete[triggerid];\r\n\t\tdelete db.tables[tableid].insteadofdelete[triggerid];\r\n\t\tdelete db.tables[tableid].beforeupdate[triggerid];\r\n\t\tdelete db.tables[tableid].afterupdate[triggerid];\r\n\t\tdelete db.tables[tableid].insteadofupdate[triggerid];\r\n\t\tdelete db.triggers[triggerid];\r\n\t} else {\r\n\t\tthrow new Error('Trigger not found');\r\n\t}\r\n\tif(cb) res = cb(res);\r\n\treturn res;\r\n};\r\n\n/*\n//\n// DELETE for Alasql.js\n// Date: 03.11.2014\n// (c) 2014, Andrey Gershun\n//\n*/\n\nyy.Delete = function (params) { return yy.extend(this, params); }\nyy.Delete.prototype.toString = function() {\n\tvar s = 'DELETE FROM '+this.table.toString();\n\tif(this.where) s += ' WHERE '+this.where.toString();\n\treturn s;\n}\n\nyy.Delete.prototype.compile = function (databaseid) {\n\n\tdatabaseid = this.table.databaseid || databaseid;\n\tvar tableid = this.table.tableid;\n\tvar statement;\n\tvar db = alasql.databases[databaseid];\n\n\tif(this.where) {\n\n\t\tif(this.exists) {\n\t\t\tthis.existsfn = this.exists.map(function(ex) {\n\t\t\t\tvar nq = ex.compile(databaseid);\n\t\t\t\tnq.query.modifier='RECORDSET';\n\t\t\t\treturn nq;\n\t\t\t});\n\t\t}\n\t\tif(this.queries) {\n\t\t\tthis.queriesfn = this.queries.map(function(q) {\n\t\t\t\tvar nq = q.compile(databaseid);\n\t\t\t\tnq.query.modifier='RECORDSET';\n\t\t\t\treturn nq;\n\t\t\t});\n\t\t}\n\n\t\tvar wherefn = new Function('r,params,alasql','var y;return ('+this.where.toJS('r','')+')').bind(this);\n\n\t\tstatement = (function (params, cb) {\n\t\t\tif(db.engineid && alasql.engines[db.engineid].deleteFromTable) {\n\t\t\t\treturn alasql.engines[db.engineid].deleteFromTable(databaseid, tableid, wherefn, params, cb);\n\t\t\t}\n\n\t\t\tif(alasql.options.autocommit && db.engineid && db.engineid == 'LOCALSTORAGE') {\n\t\t\t\talasql.engines[db.engineid].loadTableData(databaseid,tableid);\n\t\t\t}\n\n\t\t\tvar table = db.tables[tableid];\n\n\t\t\tvar orignum = table.data.length;\n\n\t\t\tvar newtable = [];\n\t\t\tfor(var i=0, ilen=table.data.length;i<ilen;i++) {\n\t\t\t\tif(wherefn(table.data[i],params,alasql)) {\n\t\t\t\t\t// Check for transaction - if it is not possible then return all back\n\t\t\t\t\tif(table.delete) {\n\t\t\t\t\t\ttable.delete(i,params,alasql);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Simply do not push\n\t\t\t\t\t}\n\t\t\t\t} else newtable.push(table.data[i]);\n\t\t\t}\n\n\t\t\ttable.data = newtable;\n\n\t\t\t// Trigger prevent functionality\n\t\t\tfor(var tr in table.afterdelete) {\n\t\t\t\tvar trigger = table.afterdelete[tr];\n\t\t\t\tif(trigger) {\n\t\t\t\t\tif(trigger.funcid) {\n\t\t\t\t\t\talasql.fn[trigger.funcid]();\n\t\t\t\t\t} else if(trigger.statement) {\n\t\t\t\t\t\ttrigger.statement.execute(databaseid);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar res = orignum - table.data.length;\n\t\t\tif(alasql.options.autocommit && db.engineid && db.engineid == 'LOCALSTORAGE') {\n\t\t\t\talasql.engines[db.engineid].saveTableData(databaseid,tableid);\n\t\t\t}\n\n\t\t\tif(cb) cb(res);\n\t\t\treturn res;\n\t\t});\n\n\t} else {\n\t\tstatement = function (params, cb) {\n\t\t\tif(alasql.options.autocommit && db.engineid) {\n\t\t\t\talasql.engines[db.engineid].loadTableData(databaseid,tableid);\n\t\t\t}\n\n\t\t\tvar table = db.tables[tableid];\n\t\t\ttable.dirty = true;\n\t\t\tvar orignum = db.tables[tableid].data.length;\n\t\t\t//table.deleteall();\n\t\t\t// Delete all records from the array\n\t\t\tdb.tables[tableid].data.length = 0;\n\n\t\t\t// Reset PRIMARY KEY and indexes\n\t\t\tfor(var ix in db.tables[tableid].uniqs) {\n\t\t\t\tdb.tables[tableid].uniqs[ix] = {};\n\t\t\t}\n\n\t\t\tfor(var ix in db.tables[tableid].indices) {\n\t\t\t\tdb.tables[tableid].indices[ix] = {};\n\t\t\t}\n\n\t\t\tif(alasql.options.autocommit && db.engineid) {\n\t\t\t\talasql.engines[db.engineid].saveTableData(databaseid,tableid);\n\t\t\t}\n\n\t\t\tif(cb) cb(orignum);\n\t\t\treturn orignum;\n\t\t};\n\t}\n\n\treturn statement;\n\n};\n\nyy.Delete.prototype.execute = function (databaseid, params, cb) {\n\treturn this.compile(databaseid)(params,cb);\n}\n\n/*\r\n//\r\n// UPDATE for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.Update = function (params) { return yy.extend(this, params); }\r\nyy.Update.prototype.toString = function() {\r\n\tvar s = 'UPDATE '+this.table.toString();\r\n\tif(this.columns) s += ' SET '+this.columns.toString();\r\n\tif(this.where) s += ' WHERE '+this.where.toString();\r\n\treturn s;\r\n}\r\n\nyy.SetColumn = function (params) { return yy.extend(this, params); }\r\nyy.SetColumn.prototype.toString = function() {\r\n\treturn this.column.toString() + '='+this.expression.toString();\r\n}\r\n\nyy.Update.prototype.compile = function (databaseid) {\r\n\n\tdatabaseid = this.table.databaseid || databaseid;\r\n\tvar tableid = this.table.tableid;\r\n\n\tif(this.where) {\r\n\t\tif(this.exists) {\r\n\t\t\tthis.existsfn  = this.exists.map(function(ex) {\r\n\t\t\t\tvar nq = ex.compile(databaseid);\r\n\t\t\t\tnq.query.modifier='RECORDSET';\r\n\t\t\t\treturn nq;\r\n\t\t\t});\r\n\t\t}\r\n\t\tif(this.queries) {\r\n\t\t\tthis.queriesfn = this.queries.map(function(q) {\r\n\t\t\t\tvar nq = q.compile(databaseid);\r\n\t\t\t\tnq.query.modifier='RECORDSET';\r\n\t\t\t\treturn nq;\r\n\t\t\t});\t\t\r\n\t\t}\r\n\n\t\tvar wherefn = new Function('r,params,alasql','var y;return '+this.where.toJS('r','')).bind(this);\r\n\t};\r\n\n\t// Construct update function\r\n\tvar s = alasql.databases[databaseid].tables[tableid].onupdatefns || '';\r\n\ts += ';';\r\n\tthis.columns.forEach(function(col){\r\n\t\ts += 'r[\\''+col.column.columnid+'\\']='+col.expression.toJS('r','')+';'; \r\n\t});\r\n\tvar assignfn = new Function('r,params,alasql','var y;'+s);\r\n\n\tvar statement = function(params, cb) {\r\n\t\tvar db = alasql.databases[databaseid];\r\n\n\t\tif(db.engineid && alasql.engines[db.engineid].updateTable) {\r\n\n\t\t\treturn alasql.engines[db.engineid].updateTable(databaseid, tableid, assignfn, wherefn, params, cb);\r\n\t\t}\r\n\n\t\tif(alasql.options.autocommit && db.engineid) {\r\n\t\t\talasql.engines[db.engineid].loadTableData(databaseid,tableid);\r\n\t\t}\r\n\n\t\tvar table = db.tables[tableid];\r\n\t\tif(!table) {\r\n\t\t\tthrow new Error(\"Table '\"+tableid+\"' not exists\")\r\n\t\t}\r\n\n\t\tvar numrows = 0;\r\n\t\tfor(var i=0, ilen=table.data.length; i<ilen; i++) {\r\n\t\t\tif(!wherefn || wherefn(table.data[i], params,alasql) ) {\r\n\t\t\t\tif(table.update) {\r\n\t\t\t\t\ttable.update(assignfn, i, params);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tassignfn(table.data[i], params,alasql);\r\n\t\t\t\t}\r\n\t\t\t\tnumrows++;\r\n\t\t\t}\r\n\t\t};\r\n\n\t\tif(alasql.options.autocommit && db.engineid) {\r\n\t\t\talasql.engines[db.engineid].saveTableData(databaseid,tableid);\r\n\t\t}\r\n\n\t\tif(cb) cb(numrows);\r\n\t\treturn numrows;\r\n\t};\r\n\treturn statement;\r\n};\r\n\nyy.Update.prototype.execute = function (databaseid, params, cb) {\r\n\treturn this.compile(databaseid)(params,cb);\r\n}\r\n\n/*\r\n//\r\n// SET for Alasql.js\r\n// Date: 01.12.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.Merge = function (params) { return yy.extend(this, params); }\r\nyy.Merge.prototype.toString = function() {\r\n\tvar s = 'MERGE ';\r\n\ts += this.into.tableid+' ';\r\n\tif(this.into.as) s += 'AS '+this.into.as+' ';\r\n\ts += 'USING '+this.using.tableid+' ';\r\n\tif(this.using.as) s += 'AS '+this.using.as+' ';\r\n\ts += 'ON '+this.on.toString()+' ';\r\n\tthis.matches.forEach(function(m){\r\n\t\ts += 'WHEN ';\r\n\t\tif(!m.matched) s += 'NOT ';\r\n\t\ts += 'MATCHED ';\r\n\t\tif(m.bytarget) s += 'BY TARGET ';\r\n\t\tif(m.bysource) s += 'BY SOURCE ';\r\n\t\tif(m.expr) s+= 'AND'+' '+m.expr.toString()+' ';\r\n\t\ts += 'THEN ';\r\n\t\tif(m.action.delete) s += 'DELETE ';\r\n\t\tif(m.action.insert) {\r\n\t\t\ts += 'INSERT ';\r\n\t\t\tif(m.action.columns) s += '('+m.action.columns.toString()+') ';\r\n\t\t\tif(m.action.values) s += 'VALUES ('+m.action.values.toString()+') ';\r\n\t\t\tif(m.action.defaultvalues) s += 'DEFAULT VALUES ';\r\n\t\t}\r\n\t\tif(m.action.update) {\r\n\t\t\ts += 'UPDATE ';\r\n\t\t\ts += m.action.update.map(function(u){\r\n\t\t\t\treturn u.toString();\r\n\t\t\t}).join(',')+' ';\r\n\t\t}\r\n\n\t});\r\n\n\treturn s;\r\n}\r\n\nyy.Merge.prototype.execute = function (databaseid,params,cb) {\r\n\tvar res = 1;\r\n\n\tif(cb) res=cb(res);\r\n\treturn res;\r\n};\r\n\n/*\r\n//\r\n// UPDATE for Alasql.js\r\n// Date: 03.11.2014\r\n// Modified: 16.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n// CREATE DATABASE databaseid\r\nyy.CreateDatabase = function (params) { return yy.extend(this, params); };\r\nyy.CreateDatabase.prototype.toString = function() {\r\n\tvar s = 'CREATE'; \r\n\tif(this.engineid) s+=' '+this.engineid;\r\n\ts += ' DATABASE';\r\n\tif(this.ifnotexists) s += ' IF NOT EXISTS';\r\n\ts += ' '+this.databaseid;\r\n\tif(this.args && this.args.length > 0) { \r\n\t\ts += '('+this.args.map(function(arg){ return arg.toString()}).join(', ')+')';\r\n\t}\r\n\tif(this.as) s += ' AS '+this.as;\r\n\treturn s;\r\n}\r\n//yy.CreateDatabase.prototype.compile = returnUndefined;\r\nyy.CreateDatabase.prototype.execute = function (databaseid, params, cb) {\r\n\tvar args;\r\n\tif(this.args && this.args.length > 0) {\r\n\t\targs = this.args.map(function(arg){\r\n\t\t\treturn new Function('params,alasql','var y;return '+arg.toJS())(params,alasql);\r\n\t\t});\r\n\t};\r\n\tif(this.engineid) {\r\n\t\tvar res = alasql.engines[this.engineid].createDatabase(this.databaseid, this.args, this.ifnotexists, this.as, cb);\r\n\t\treturn res;\r\n\t} else {\r\n\t\tvar dbid = this.databaseid;\r\n\t\tif(alasql.databases[dbid]) {\r\n\t\t\tthrow new Error(\"Database '\"+dbid+\"' already exists\")\r\n\t\t};\r\n\t\tvar a = new alasql.Database(dbid);\r\n\t\tvar res = 1;\r\n\t\tif(cb) return cb(res);\r\n\t\treturn res;\r\n\t}\r\n};\r\n\n// CREATE DATABASE databaseid\r\nyy.AttachDatabase = function (params) { return yy.extend(this, params); };\r\nyy.AttachDatabase.prototype.toString = function() {\r\n\tvar s = 'ATTACH';\r\n\tif(this.engineid) s += ' '+this.engineid;\r\n\ts += ' DATABASE'+' '+this.databaseid;\r\n\t// TODO add params\r\n\tif(args) {\r\n\t\ts += '(';\r\n\t\t\tif(args.length>0) {\r\n\t\t\t\ts += args.map(function(arg){ return arg.toString(); }).join(', ');\r\n\t\t\t}\r\n\t\ts += ')';\r\n\t}\r\n\tif(this.as) s+= ' AS'+' '+this.as;\r\n\treturn s;\r\n}\r\n//yy.CreateDatabase.prototype.compile = returnUndefined;\r\nyy.AttachDatabase.prototype.execute = function (databaseid, params, cb) {\r\n\tif(!alasql.engines[this.engineid]) {\r\n\t\tthrow new Error('Engine \"'+this.engineid+'\" is not defined.');\r\n\t};\r\n\tvar res = alasql.engines[this.engineid].attachDatabase(this.databaseid, this.as, this.args, params, cb);\r\n\treturn res;\r\n};\r\n\n// CREATE DATABASE databaseid\r\nyy.DetachDatabase = function (params) { return yy.extend(this, params); };\r\nyy.DetachDatabase.prototype.toString = function() {\r\n\tvar s = 'DETACH';\r\n\ts += ' DATABASE'+' '+this.databaseid;\r\n\treturn s;\r\n}\r\n//yy.CreateDatabase.prototype.compile = returnUndefined;\r\nyy.DetachDatabase.prototype.execute = function (databaseid, params, cb) {\r\n\tif(!alasql.databases[this.databaseid].engineid) {\r\n\t\tthrow new Error('Cannot detach database \"'+this.engineid+'\", because it was not attached.');\r\n\t};\r\n\tvar res;\r\n\n\tvar dbid = this.databaseid;\r\n\n\tif(dbid == alasql.DEFAULTDATABASEID) {\r\n\t\tthrow new Error(\"Drop of default database is prohibited\");\t\t\t\r\n\t}\r\n\n\tif(!alasql.databases[dbid]) {\r\n\t\tif(!this.ifexists) {\r\n\t\t\tthrow new Error(\"Database '\"+dbid+\"' does not exist\");\t\r\n\t\t} else {\r\n\t\t\tres = 0;\r\n\t\t}\r\n\t} else {\r\n\t\tdelete alasql.databases[dbid];\r\n\t\tif(dbid == alasql.useid) {\r\n\t\t\talasql.use();\t\t\r\n\t\t}\r\n\t\tres = 1;\r\n\t}\r\n\tif(cb) cb(res);\r\n\treturn res;\r\n//\tvar res = alasql.engines[this.engineid].attachDatabase(this.databaseid, this.as, cb);\r\n//\treturn res;\r\n};\r\n\n// USE DATABSE databaseid\r\n// USE databaseid\r\nyy.UseDatabase = function (params) { return yy.extend(this, params); };\r\nyy.UseDatabase.prototype.toString = function() {\r\n\treturn 'USE' +' '+'DATABASE'+' '+this.databaseid;\r\n}\r\n//yy.UseDatabase.prototype.compile = returnUndefined;\r\nyy.UseDatabase.prototype.execute = function (databaseid, params, cb) {\r\n\tvar dbid = this.databaseid;\r\n\tif(!alasql.databases[dbid]) {\r\n\t\tthrow new Error(\"Database '\"+dbid+\"' does not exist\")\r\n\t};\r\n\talasql.use(dbid);\r\n\tvar res = 1;\r\n\tif(cb) cb(res);\r\n\treturn res;\r\n};\r\n\n// DROP DATABASE databaseid\r\nyy.DropDatabase = function (params) { return yy.extend(this, params); }\r\nyy.DropDatabase.prototype.toString = function() {\r\n\tvar s = 'DROP';\r\n\tif(this.ifexists) s += ' IF EXISTS';\r\n\ts += ' DATABASE '+this.databaseid;\r\n\treturn s;\r\n}\r\n//yy.DropDatabase.prototype.compile = returnUndefined;\r\nyy.DropDatabase.prototype.execute = function (databaseid, params, cb) {\r\n\tif(this.engineid) {\r\n\n\t\treturn alasql.engines[this.engineid].dropDatabase(this.databaseid, this.ifexists, cb);\r\n\t}\r\n\tvar res;\r\n\n\tvar dbid = this.databaseid;\r\n\n\tif(dbid == alasql.DEFAULTDATABASEID) {\r\n\t\tthrow new Error(\"Drop of default database is prohibited\");\t\t\t\r\n\t}\r\n\tif(!alasql.databases[dbid]) {\r\n\t\tif(!this.ifexists) {\r\n\t\t\tthrow new Error(\"Database '\"+dbid+\"' does not exist\");\t\r\n\t\t} else {\r\n\t\t\tres = 0;\r\n\t\t}\r\n\t} else {\r\n\t\tif(alasql.databases[dbid].engineid) {\r\n\t\t\tthrow new Error(\"Cannot drop database '\"+dbid+\"', because it is attached. Detach it.\");\t\r\n\t\t}\r\n\n\t\tdelete alasql.databases[dbid];\r\n\t\tif(dbid == alasql.useid) {\r\n\t\t\talasql.use();\t\t\r\n\t\t}\r\n\t\tres = 1;\r\n\t}\r\n\tif(cb) cb(res);\r\n\treturn res;\r\n};\r\n\n/*\r\n//\r\n// SET for Alasql.js\r\n// Date: 01.12.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.Declare = function (params) { return yy.extend(this, params); }\r\nyy.Declare.prototype.toString = function() {\r\n\tvar s = 'DECLARE ';\r\n\tif(this.declares && this.declares.length > 0) {\r\n\t\ts = this.declares.map(function(declare){\r\n\t\t\tvar s = '';\r\n\t\t\ts += '@'+declare.variable+' ';\r\n\t\t\ts += declare.dbtypeid;\r\n\t\t\tif(this.dbsize){\r\n\t\t\t\ts += '('+this.dbsize;\r\n\t\t\t\tif(this.dbprecision){\r\n\t\t\t\t\ts+= ','+this.dbprecision;\r\n\t\t\t\t}\r\n\t\t\t\ts += ')';\r\n\t\t\t}\r\n\t\t\tif(declare.expression){\r\n\t\t\t\ts += ' = '+declare.expression.toString();\r\n\t\t\t}\r\n\t\t\treturn s;\r\n\t\t}).join(',');\r\n\t}\r\n\treturn s;\r\n}\r\n\nyy.Declare.prototype.execute = function (databaseid,params,cb) {\r\n\tvar res = 1;\r\n\tif(this.declares && this.declares.length > 0) {\r\n\t\tthis.declares.map(function(declare){\r\n\t\t\tvar dbtypeid = declare.dbtypeid;\r\n\t\t\tif(!alasql.fn[dbtypeid]){\r\n\t\t\t\tdbtypeid = dbtypeid.toUpperCase();\r\n\t\t\t}\r\n\t\t\talasql.declares[declare.variable] = {dbtypeid:dbtypeid,\r\n\t\t\t\tdbsize:declare.dbsize, dbprecision:declare.dbprecision};\r\n\n\t\t\t// Set value\r\n\t\t\tif(declare.expression) {\r\n\n\t\t\t\talasql.vars[declare.variable] = new Function(\"params,alasql\",\"return \"\r\n\t\t\t\t\t+declare.expression.toJS('({})','', null))(params,alasql);\r\n\t\t\t\tif(alasql.declares[declare.variable]) {\r\n\t\t\t\t\talasql.vars[declare.variable] = alasql.stdfn.CONVERT(alasql.vars[declare.variable],alasql.declares[declare.variable]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\n\t\t});\r\n\t}\r\n\tif(cb){\r\n\t\tres=cb(res);\r\n\n\t}\r\n\treturn res;\r\n};\r\n\n/*\r\n//\r\n// SHOW for Alasql.js\r\n// Date: 19.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.ShowDatabases = function (params) { return yy.extend(this, params); }\r\nyy.ShowDatabases.prototype.toString = function() {\r\n\tvar s = 'SHOW DATABASES';\r\n\tif(this.like) s += 'LIKE '+this.like.toString();\r\n\treturn s;\r\n}\r\nyy.ShowDatabases.prototype.execute = function (databaseid, params, cb) {\r\n\tif(this.engineid) {\r\n\t\treturn alasql.engines[this.engineid].showDatabases(this.like, cb);\r\n\t} else {\r\n\t\tvar self = this;\r\n\t\tvar res = [];\r\n\t\tfor(dbid in alasql.databases) {\r\n\t\t\tres.push({databaseid: dbid});\r\n\t\t};\r\n\t\tif(self.like && res && res.length > 0) {\r\n\t\t\tres = res.filter(function(d){\r\n\n\t\t\t\treturn alasql.utils.like(self.like.value,d.databaseid);\r\n\t\t\t});\r\n\t\t}\r\n\t\tif(cb) cb(res);\r\n\t\treturn res;\r\n\t};\r\n\n};\r\n\nyy.ShowTables = function (params) { return yy.extend(this, params); }\r\nyy.ShowTables.prototype.toString = function() {\r\n\tvar s = 'SHOW TABLES';\r\n\tif(this.databaseid) s += ' FROM '+this.databaseid;\r\n\tif(this.like) s += ' LIKE '+this.like.toString();\r\n\treturn s;\r\n}\r\nyy.ShowTables.prototype.execute = function (databaseid, params, cb) {\r\n\tvar db = alasql.databases[this.databaseid || databaseid];\r\n\n\tvar self = this;\r\n\tvar res = [];\r\n\tfor(tableid in db.tables) {\r\n\t\tres.push({tableid: tableid});\r\n\t};\r\n\tif(self.like && res && res.length > 0) {\r\n\t\tres = res.filter(function(d){\r\n\t\t\t//return d.tableid.match(new RegExp((self.like.value||'').replace(/\\%/g,'.*').replace(/\\?|_/g,'.'),'g'));\r\n\t\t\treturn alasql.utils.like(self.like.value,d.tableid);\r\n\t\t});\r\n\t};\r\n\tif(cb) cb(res);\r\n\treturn res;\r\n};\r\n\nyy.ShowColumns = function (params) { return yy.extend(this, params); }\r\nyy.ShowColumns.prototype.toString = function() {\r\n\tvar s = 'SHOW COLUMNS';\r\n\tif(this.table.tableid) s += ' FROM '+this.table.tableid;\r\n\tif(this.databaseid) s += ' FROM '+this.databaseid;\r\n\treturn s;\r\n};\r\n\nyy.ShowColumns.prototype.execute = function (databaseid) {\r\n\tvar db = alasql.databases[this.databaseid || databaseid];\r\n\tvar table = db.tables[this.table.tableid];\r\n\tvar self = this;\r\n\tif(table && table.columns) {\r\n\t\tvar res = table.columns.map(function(col){\r\n\t\t\treturn {columnid: col.columnid, dbtypeid: col.dbtypeid, dbsize: col.dbsize};\r\n\t\t});\r\n\t\treturn res;\r\n\t} else {\r\n\t\treturn [];\r\n\t}\r\n};\r\n\nyy.ShowIndex = function (params) { return yy.extend(this, params); }\r\nyy.ShowIndex.prototype.toString = function() {\r\n\tvar s = 'SHOW INDEX';\r\n\tif(this.table.tableid) s += ' FROM '+this.table.tableid;\r\n\tif(this.databaseid) s += ' FROM '+this.databaseid;\r\n\treturn s;\r\n}\r\nyy.ShowIndex.prototype.execute = function (databaseid) {\r\n\tvar db = alasql.databases[this.databaseid || databaseid];\r\n\tvar table = db.tables[this.table.tableid];\r\n\tvar self = this;\r\n\tvar res = [];\r\n\tif(table && table.indices) {\r\n\t\tfor(var ind in table.indices) {\r\n\t\t\tres.push({hh:ind, len:Object.keys(table.indices[ind]).length});\r\n\t\t}\r\n\t}\r\n\treturn res;\r\n};\r\n\nyy.ShowCreateTable = function (params) { return yy.extend(this, params); }\r\nyy.ShowCreateTable.prototype.toString = function() {\r\n\tvar s = 'SHOW CREATE TABLE '+this.table.tableid;\r\n\tif(this.databaseid) s += ' FROM '+this.databaseid;\r\n\treturn s;\r\n}\r\nyy.ShowCreateTable.prototype.execute = function (databaseid) {\r\n\tvar db = alasql.databases[this.databaseid || databaseid];\r\n\tvar table = db.tables[this.table.tableid];\r\n\tvar self = this;\r\n\tif(table) {\r\n\t\tvar s = 'CREATE TABLE '+this.table.tableid+' (';\r\n\t\tvar ss = [];\r\n\t\tif(table.columns) {\r\n\t\t\ttable.columns.forEach(function(col){\r\n\t\t\t\tvar a = col.columnid+' '+col.dbtypeid;\r\n\t\t\t\tif(col.dbsize) a += '('+col.dbsize+')';\r\n\t\t\t\tif(col.primarykey) a += ' PRIMARY KEY';\r\n\t\t\t\t// TODO extend\r\n\t\t\t\tss.push(a); \r\n\t\t\t});\r\n\t\t\ts += ss.join(', ');\r\n\t\t};\r\n\t\ts += ')';\r\n\t\treturn s;\r\n\t} else {\r\n\t\tthrow new Error('There is no such table \"'+this.table.tableid+'\"');\r\n\t}\r\n};\r\n\n/*\r\n//\r\n// SET for Alasql.js\r\n// Date: 01.12.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.SetVariable = function (params) { return yy.extend(this, params); }\r\nyy.SetVariable.prototype.toString = function() {\r\n\tvar s = 'SET ';\r\n\tif(typeof this.value != 'undefined') s += this.variable.toUpperCase()+' '+(this.value?'ON':'OFF');\r\n\tif(this.expression) s += this.method + this.variable+' = '+this.expression.toString();\r\n\treturn s;\r\n}\r\n\nyy.SetVariable.prototype.execute = function (databaseid,params,cb) {\r\n\n\tif(typeof this.value != 'undefined') {\r\n\t\tvar val = this.value;\r\n\t\tif(val == 'ON') val = true;\r\n\t\telse if(val == 'OFF') val = false;\r\n\n\t\t\talasql.options[this.variable] = val;\r\n\n\t} else if(this.expression) {\r\n\n\t\tif(this.exists) {\r\n\t\t\tthis.existsfn = this.exists.map(function(ex) {\r\n\t\t\t\tvar nq = ex.compile(databaseid);\r\n\t\t\t\tif(nq.query && !nq.query.modifier) nq.query.modifier='RECORDSET';\r\n\t\t\t\treturn nq;\r\n\n\t\t\t\t// TODO Include modifier\r\n\t\t\t});\r\n\t\t}\r\n\t\tif(this.queries) {\r\n\t\t\tthis.queriesfn = this.queries.map(function(q) {\r\n\t\t\t\tvar nq = q.compile(databaseid);\r\n\t\t\t\tif(nq.query && !nq.query.modifier) nq.query.modifier='RECORDSET';\r\n\t\t\t\treturn nq;\r\n\t\t\t\t// TODO Include modifier\r\n\t\t\t});\t\t\r\n\t\t}\r\n\n\t\tvar res = new Function(\"params,alasql\",\"return \"\r\n\t\t\t+this.expression.toJS('({})','', null)).bind(this)(params,alasql);\r\n\t\tif(alasql.declares[this.variable]) {\r\n\t\t\tres = alasql.stdfn.CONVERT(res,alasql.declares[this.variable]);\r\n\t\t}\r\n\t\tif(this.props && this.props.length > 0) {\r\n\t\t\tif(this.method == '@') {\r\n\t\t\t\tvar fs = 'alasql.vars[\\''+this.variable+'\\']';\r\n\t\t\t} else {\r\n\t\t\t\tvar fs = 'params[\\''+this.variable+'\\']';\r\n\t\t\t}\r\n\t\t\tfs += this.props.map(function(prop){\r\n\t\t\t\tif(typeof prop == 'string') {\r\n\t\t\t\t\treturn '[\\''+prop+'\\']';\r\n\t\t\t\t} else if(typeof prop == 'number') {\r\n\t\t\t\t\treturn '['+prop+']';\r\n\t\t\t\t} else {\r\n\n\t\t\t\t\treturn '['+prop.toJS()+']';\r\n\n\t\t\t\t}\r\n\t\t\t}).join();\r\n\n\t\t\tnew Function(\"value,params,alasql\",'var y;'+fs +'=value')(res,params,alasql);\r\n\t\t} else {\r\n\t\t\tif(this.method == '@') {\r\n\t\t\t\talasql.vars[this.variable] = res;\r\n\t\t\t} else {\r\n\t\t\t\tparams[this.variable] = res;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvar res = 1;\r\n\tif(cb) res=cb(res);\r\n\treturn res;\r\n};\r\n\n// Console functions\r\n\nalasql.test = function(name, times, fn) {\r\n\tif(arguments.length === 0) {\r\n\t\talasql.log(alasql.con.results);\r\n\t\treturn;\r\n\t} else if(arguments.length === 1) {\r\n\t\tvar tm = Date.now();\r\n\t\tfn();\r\n\t\talasql.con.log(Date.now()-tm);\r\n\t\treturn;\r\n\t} \r\n\n\tif(arguments.length === 2) {\r\n\t\tfn = times;\r\n\t\ttimes = 1;\r\n\t}\r\n\n\tvar tm = Date.now();\r\n\tfor(var i=0;i<times;i++){\r\n\t\tfn();\r\n\t}\r\n\talasql.con.results[name] = Date.now()-tm;\r\n};\r\n\n// Console\r\n// alasql.log = function(sql, params) {\r\n\n// };\r\n\n// Console\r\nalasql.log = function(sql, params) {\r\n\tvar olduseid = alasql.useid;\r\n\tvar target = alasql.options.logtarget;\r\n\t// For node other\r\n\tif(utils.isNode) {\r\n\t\ttarget = 'console';\r\n\t}\r\n\n\tvar res;\r\n\tif(typeof sql === \"string\") {\r\n\t\tres = alasql(sql, params);\r\n\t} else {\r\n\t\tres = sql;\r\n\t}\r\n\n\t// For Node and console.output\r\n\tif(target === 'console' || utils.isNode) {\r\n\t\tif(typeof sql === 'string' && alasql.options.logprompt){\r\n\t\t\tconsole.log(olduseid+'>',sql);\r\n\t\t}\r\n\n\t\tif(Array.isArray(res)) {\r\n\t\t\tif(console.table) {\r\n\t\t\t\t// For Chrome and other consoles\r\n\t\t\t\tconsole.table(res);\t\t\r\n\t\t\t} else {\r\n\t\t\t\t// Add print procedure\r\n\t\t\t\tconsole.log(JSONtoString(res));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.log(JSONtoString(res));\t\t\t\t\r\n\t\t}\r\n\n\t} else {\r\n\t\tvar el;\r\n\t\tif(target === 'output') {\r\n\t\t\tel = document.getElementsByTagName('output')[0];\r\n\t\t} else {\r\n\t\t\tif(typeof target === 'string') {\r\n\t\t\t\tel = document.getElementById(target);\r\n\t\t\t} else {\r\n\t\t\t\t// in case of DOM\r\n\t\t\t\tel = target;\r\n\t\t\t}\r\n\n\t\t}\r\n\n\t\tvar s = '';\r\n\n\t\tif(typeof sql === 'string' && alasql.options.logprompt) {\r\n\n\t\t\ts += '<pre><code>'+alasql.pretty(sql)+'</code></pre>';\r\n\t\t}\r\n\n\t\tif(Array.isArray(res)) {\r\n\t\t\tif(res.length === 0) {\r\n\t\t\t\ts += '<p>[ ]</p>'\r\n\t\t\t} else if(typeof res[0] !== 'object' || Array.isArray(res[0])) {\r\n\t\t\t\tfor(var i=0,ilen=res.length;i<ilen;i++) {\r\n\t\t\t\t\ts += '<p>'+loghtml(res[i])+'</p>';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\ts += loghtml(res);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ts += loghtml(res);\r\n\t\t}\r\n\t\tel.innerHTML += s;\r\n\t}\r\n};\r\n\nalasql.clear = function() {\r\n\tvar target = alasql.options.logtarget;\r\n\t// For node other\r\n\n\tif(utils.isNode || utils.isMeteorServer) {\r\n\t\tif(console.clear) {\r\n\t\t\tconsole.clear();\r\n\t\t} \r\n\t} else {\r\n\t\tvar el;\r\n\t\tif(target === 'output') {\r\n\t\t\tel = document.getElementsByTagName('output')[0];\r\n\t\t} else {\r\n\t\t\tif(typeof target === 'string') {\r\n\t\t\t\tel = document.getElementById(target);\r\n\t\t\t} else {\r\n\t\t\t\t// in case of DOM\r\n\t\t\t\tel = target;\r\n\t\t\t}\r\n\t\t}\r\n\t\tel.innerHTML = '';\t\t\r\n\t}\r\n}\r\n\nalasql.write = function(s) {\r\n\n\tvar target = alasql.options.logtarget;\r\n\t// For node other\r\n\tif(utils.isNode || utils.isMeteorServer) {\r\n\t\tif(console.log) {\r\n\t\t\tconsole.log(s);\r\n\t\t} \r\n\t} else {\r\n\t\tvar el;\r\n\t\tif(target === 'output') {\r\n\t\t\tel = document.getElementsByTagName('output')[0];\r\n\t\t} else {\r\n\t\t\tif(typeof target === 'string') {\r\n\t\t\t\tel = document.getElementById(target);\r\n\t\t\t} else {\r\n\t\t\t\t// in case of DOM\r\n\t\t\t\tel = target;\r\n\t\t\t}\r\n\t\t}\r\n\t\tel.innerHTML += s;\t\t\r\n\t}\r\n}\r\n\nfunction loghtml(res) {\r\n\n\tvar s  = '';\r\n\tif(res === undefined) {\r\n\t\ts += 'undefined';\r\n\t} else if(Array.isArray(res)) {\r\n\t\ts += '<style>';\r\n\t\ts += 'table {border:1px black solid; border-collapse: collapse; border-spacing: 0px;}';\r\n\t\ts += 'td,th {border:1px black solid; padding-left:5px; padding-right:5px}';\r\n\t\ts += 'th {background-color: #EEE}';\r\n\t\ts += '</style>';\r\n\t\ts += '<table>';\r\n\t\tvar cols = [];\t\t\t\r\n\t\tfor(var colid in res[0]) {\r\n\t\t\tcols.push(colid);\r\n\t\t}\r\n\t\ts += '<tr><th>#';\r\n\t\tcols.forEach(function(colid){\r\n\t\t\ts += '<th>'+colid;\r\n\t\t});\r\n\t\tfor(var i=0,ilen=res.length;i<ilen;i++) {\r\n\t\t\ts += '<tr><th>'+(i+1);\r\n\t\t\tcols.forEach(function(colid){\r\n\t\t\t\ts += '<td> ';\r\n\t\t\t\tif(res[i][colid] == +res[i][colid]) {       // jshint ignore:line\r\n\t\t\t\t\ts += '<div style=\"text-align:right\">';\r\n\t\t\t\t\tif(typeof res[i][colid] === 'undefined'){\r\n\t\t\t\t\t\ts += 'NULL';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ts += res[i][colid];\r\n\t\t\t\t\t}\r\n\t\t\t\t\ts += '</div>';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(typeof res[i][colid] === 'undefined') {\r\n\t\t\t\t\t\ts += 'NULL';\r\n\t\t\t\t\t} else if(typeof res[i][colid] === 'string') {\r\n\t\t\t\t\t\ts += res[i][colid];\r\n\t\t\t\t\t} else { \r\n\t\t\t\t\t\ts += JSONtoString(res[i][colid]);\r\n\t\t\t\t\t}\r\n\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\n\t\ts += '</table>';\r\n\t} else {\r\n\t\ts += '<p>'+JSONtoString(res)+'</p>';\r\n\t}\r\n\t\t// if() {}\r\n\n\t\t// \t\tif(typeof res == 'object') {\r\n\t\t// \t\t\ts += '<p>'+JSON.stringify(res)+'</p>';\r\n\t\t// \t\t} else {\r\n\t\t// \t\t}\r\n\treturn s;\r\n}\r\n\nfunction scrollTo(element, to, duration) {\r\n    if(duration <= 0){\r\n    \treturn;\r\n    }\r\n    var difference = to - element.scrollTop;\r\n    var perTick = difference / duration * 10;\r\n\n    setTimeout(function() {\r\n        if(element.scrollTop===to){\r\n        \treturn;\r\n        }\r\n        element.scrollTop = element.scrollTop + perTick;\r\n        scrollTo(element, to, duration - 10);\r\n    }, 10);\r\n}\r\n\nalasql.prompt = function(el, useidel, firstsql) {\r\n\tif(utils.isNode) {\r\n\t\tthrow new Error('The prompt not realized for Node.js');\r\n\t}\r\n\n\tvar prompti = 0;\r\n\n\tif(typeof el === 'string'){\r\n\t\tel = document.getElementById(el);\r\n\t}\r\n\n\tif(typeof useidel === 'string'){\r\n\t\tuseidel = document.getElementById(useidel);\r\n\t}\r\n\n\tuseidel.textContent = alasql.useid;\r\n\n\tif(firstsql) {\r\n\t\talasql.prompthistory.push(firstsql);\r\n\t\tprompti = alasql.prompthistory.length;\r\n\t\ttry {\r\n\t\t\tvar tm = Date.now();\r\n\t\t\talasql.log(firstsql);\r\n\t\t\talasql.write('<p style=\"color:blue\">'+(Date.now()-tm)+' ms</p>');\r\n\t\t} catch (err) {\r\n\t\t\talasql.write('<p>'+olduseid+'&gt;&nbsp;<b>'+sql+'</b></p>');\r\n\t\t\talasql.write('<p style=\"color:red\">'+err+'<p>');\r\n\t\t}\r\n\t}\r\n\n\tvar y = el.getBoundingClientRect().top + document.getElementsByTagName('body')[0].scrollTop;\r\n\tscrollTo(document.getElementsByTagName('body')[0],y,500);\r\n\n\tel.onkeydown = function(event) {\r\n\t\tif(event.which === 13) {\r\n\t\t\tvar sql = el.value;\r\n\t\t\tvar olduseid = alasql.useid;\r\n\t\t\tel.value = '';\r\n\t\t\talasql.prompthistory.push(sql);\r\n\t\t\tprompti = alasql.prompthistory.length;\r\n\t\t\ttry {\r\n\t\t\t\tvar tm = Date.now();\r\n\t\t\t\talasql.log(sql);\r\n\t\t\t\talasql.write('<p style=\"color:blue\">'+(Date.now()-tm)+' ms</p>');\r\n\t\t\t} catch (err) {\r\n\t\t\t\talasql.write('<p>'+olduseid+'&gt;&nbsp;'+alasql.pretty(sql, false)+'</p>');\r\n\t\t\t\talasql.write('<p style=\"color:red\">'+err+'<p>');\r\n\t\t\t}\r\n\t\t\tel.focus();\r\n\n\t\t\tuseidel.textContent = alasql.useid;\r\n\t\t\tvar y = el.getBoundingClientRect().top + document.getElementsByTagName('body')[0].scrollTop;\r\n\t\t\tscrollTo(document.getElementsByTagName('body')[0],y,500);\r\n\t\t} else if(event.which === 38) {\r\n\t\t\tprompti--; if(prompti<0){\r\n\t\t\t\tprompti = 0;\r\n\t\t\t}\r\n\t\t\tif(alasql.prompthistory[prompti]) {\r\n\t\t\t\tel.value = alasql.prompthistory[prompti];\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t}\r\n\n\t\t} else if(event.which === 40) {\r\n\t\t\tprompti++; \r\n\t\t\tif(prompti>=alasql.prompthistory.length) {\r\n\t\t\t\tprompti = alasql.prompthistory.length;\r\n\t\t\t\tel.value = '';\r\n\t\t\t} else if(alasql.prompthistory[prompti]) {\r\n\t\t\t\tel.value = alasql.prompthistory[prompti];\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t}\r\n\t\t}\r\n\n\t}\r\n}\r\n\n/*\r\n//\r\n// Commit for Alasql.js\r\n// Date: 01.12.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\nyy.BeginTransaction = function (params) { return yy.extend(this, params); }\r\nyy.BeginTransaction.prototype.toString = function() {\r\n\treturn 'BEGIN TRANSACTION';\r\n}\r\n\nyy.BeginTransaction.prototype.execute = function (databaseid,params, cb) {\r\n\tvar res = 1;\r\n\tif(alasql.databases[databaseid].engineid) {\r\n\t\treturn alasql.engines[alasql.databases[alasql.useid].engineid].begin(databaseid, cb);\r\n\t} else {\r\n\t\t// alasql commit!!!\r\n\t}\r\n\tif(cb) cb(res);\r\n\treturn res;\r\n};\r\n\nyy.CommitTransaction = function (params) { return yy.extend(this, params); }\r\nyy.CommitTransaction.prototype.toString = function() {\r\n\treturn 'COMMIT TRANSACTION';\r\n}\r\n\nyy.CommitTransaction.prototype.execute = function (databaseid,params, cb) {\r\n\tvar res = 1;\r\n\tif(alasql.databases[databaseid].engineid) {\r\n\t\treturn alasql.engines[alasql.databases[alasql.useid].engineid].commit(databaseid, cb);\r\n\t} else {\r\n\t\t// alasql commit!!!\r\n\t}\r\n\tif(cb) cb(res);\r\n\treturn res;\r\n};\r\n\nyy.RollbackTransaction = function (params) { return yy.extend(this, params); }\r\nyy.RollbackTransaction.prototype.toString = function() {\r\n\treturn 'ROLLBACK TRANSACTION';\r\n}\r\n\nyy.RollbackTransaction.prototype.execute = function (databaseid,params,cb) {\r\n\tvar res = 1;\r\n\tif(alasql.databases[databaseid].engineid) {\r\n\t\treturn alasql.engines[alasql.databases[databaseid].engineid].rollback(databaseid, cb);\r\n\t} else {\r\n\t\t// alasql commit!!!\r\n\t}\r\n\tif(cb) cb(res);\r\n\treturn res;\r\n};\r\n\nif(alasql.options.tsql) {\n\n//\n// Check tables and views\n// IF OBJECT_ID('dbo.Employees') IS NOT NULL\n\n  // IF OBJECT_ID('dbo.VSortedOrders', 'V') IS NOT NULL\n\nalasql.stdfn.OBJECT_ID = function(name,type) {\n\tif(typeof type == 'undefined') type = 'T';\n\ttype = type.toUpperCase();\n\n\tvar sname = name.split('.');\n\tvar dbid = alasql.useid;\n\tvar objname = sname[0];\n\tif(sname.length == 2) {\n\t\tdbid = sname[0];\n\t\tobjname = sname[1];\n\t}\n\n\tvar tables = alasql.databases[dbid].tables;\n\tdbid = \talasql.databases[dbid].databaseid;\n\tfor(var tableid in tables) {\n\t\tif(tableid == objname) {\n\t\t\t// TODO: What OBJECT_ID actually returns\n\n\t\t\tif(tables[tableid].view && type == 'V') return dbid+'.'+tableid;\n\t\t\tif(!tables[tableid].view && type == 'T') return dbid+'.'+tableid;\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\treturn undefined;\n};\n\n}\n\nif(alasql.options.mysql) {\n\n}\n\nif(alasql.options.mysql || alasql.options.sqlite) {\n\n// Pseudo INFORMATION_SCHEMA function\nalasql.from.INFORMATION_SCHEMA = function(filename, opts, cb, idx, query) {\n\tif(filename == 'VIEWS' || filename == 'TABLES' ) {\n\t\tvar res = [];\n\t\tfor(var databaseid in alasql.databases) {\t\t\t\n\t\t\tvar tables = alasql.databases[databaseid].tables;\n\t\t\tfor(var tableid in tables) {\n\t\t\t\tif((tables[tableid].view && filename == 'VIEWS') ||\n\t\t\t\t\t(!tables[tableid].view && filename == 'TABLES')) {\n\t\t\t\t\tres.push({TABLE_CATALOG:databaseid,TABLE_NAME:tableid});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(cb) res = cb(res, idx, query);\n\t\treturn res;\t\t\n\t}\n\tthrow new Error('Unknown INFORMATION_SCHEMA table');\n}\n\n}\nif(alasql.options.postgres) {\n}\nif(alasql.options.oracle) {\n}\nif(alasql.options.sqlite) {\n}\n//\n// into functions\n//\n// (c) 2014 Andrey Gershun\n//\n\nalasql.into.SQL = function(filename, opts, data, columns, cb) {\n\tvar res;\n\tif(typeof filename === 'object') {\n\t\topts = filename;\n\t\tfilename = undefined;\n\t}\n\tvar opt = {};\n\talasql.utils.extend(opt, opts); \n\tif(typeof opt.tableid === 'undefined') {\n\t\tthrow new Error('Table for INSERT TO is not defined.');\n\t}\n\n\tvar s = '';\n\tif(columns.length === 0) {\n\t\tif(typeof data[0] === \"object\") {\n\t\t\tcolumns = Object.keys(data[0]).map(function(columnid){return {columnid:columnid}});\n\t\t} else {\n\t\t\t// What should I do?\n\t\t\t// columns = [{columnid:\"_\"}];\n\t\t}\n\t}\n\n\tfor(var i=0,ilen=data.length;i<ilen;i++) {\n\t\ts += 'INSERT INTO '+opts.tableid +'(';\n\t\ts += columns.map(function(col){return col.columnid}).join(\",\");\n\t\ts += ') VALUES (';\n\t\ts += columns.map(function(col){\n\t\t\tvar val = data[i][col.columnid];\n\t\t\tif(col.typeid) {\n\t\t\t\tif(col.typeid === 'STRING' || col.typeid === 'VARCHAR' ||  \n\t\t\t\t\tcol.typeid === 'NVARCHAR' || col.typeid === 'CHAR' || col.typeid === 'NCHAR') {\n\t\t\t\t\tval = \"'\"+escapeqq(val)+\"'\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(typeof val == 'string') {\n\t\t\t\t\tval = \"'\"+escapeqq(val)+\"'\";\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn val;\n\t\t});\t\t\n\t\ts += ');\\n';\n\t}\n//\tif(filename === '') {\n\n//\t} else {\n\n\tfilename = alasql.utils.autoExtFilename(filename,'sql',opts);\n\tres = alasql.utils.saveFile(filename,s);\n\tif(cb){\n\t\tres = cb(res);\n\t}\n\treturn res;\n};\n\nalasql.into.HTML = function(selector, opts, data, columns, cb) {\n\tvar res = 1;\n\tif(typeof exports !== 'object') {\n\t\tvar opt = {headers:true};\n\t\talasql.utils.extend(opt, opts);\n\n\t\tvar sel = document.querySelector(selector);\n\t\tif(!sel) {\n\t\t\tthrow new Error('Selected HTML element is not found');\n\t\t};\t\n\n\t\tif(columns.length === 0) {\n\t\t\tif(typeof data[0] === \"object\") {\n\t\t\t\tcolumns = Object.keys(data[0]).map(function(columnid){return {columnid:columnid}});\n\t\t\t} else {\n\t\t\t\t// What should I do?\n\t\t\t\t// columns = [{columnid:\"_\"}];\n\t\t\t}\n\t\t}\n\n\t\tvar tbe = document.createElement('table');\n\t\tvar thead = document.createElement('thead');\n\t\ttbe.appendChild(thead);\n\t\tif(opt.headers) {\n\t\t\tvar tre = document.createElement('tr');\n\t\t\tfor(var i=0;i<columns.length;i++){\n\t\t\t\tvar the = document.createElement('th');\n\t\t\t\tthe.textContent = columns[i].columnid;\n\t\t\t\ttre.appendChild(the);\n\t\t\t}\n\t\t\tthead.appendChild(tre);\n\t\t}\n\n\t\tvar tbody = document.createElement('tbody');\n\t\ttbe.appendChild(tbody);\n\t\tfor(var j=0;j<data.length;j++){\n\t\t\tvar tre = document.createElement('tr');\n\t\t\tfor(var i=0;i<columns.length;i++){\n\t\t\t\tvar the = document.createElement('td');\n\t\t\t\tthe.textContent = data[j][columns[i].columnid];\n\t\t\t\ttre.appendChild(the);\n\t\t\t}\n\t\t\ttbody.appendChild(tre);\n\t\t}\n\t\talasql.utils.domEmptyChildren(sel);\n\n\t\tsel.appendChild(tbe);\n\t}\n\tif(cb){\n\t\tres = cb(res);\n\t}\n\treturn res;\n};\n\nalasql.into.JSON = function(filename, opts, data, columns, cb) {\n\tvar res = 1;\n\tif(typeof filename === 'object') {\n\t\topts = filename;\n\t\tfilename = undefined;\n\t}\n\tvar s = JSON.stringify(data);\n\n\tfilename = alasql.utils.autoExtFilename(filename,'json',opts);\n\tres = alasql.utils.saveFile(filename,s);\n\tif(cb){\n\t\tres = cb(res);\n\t}\n\treturn res;\n};\n\nalasql.into.TXT = function(filename, opts, data, columns, cb) {\n\t// If columns is empty\n\tif(columns.length === 0 && data.length > 0) {\n\t\tcolumns = Object.keys(data[0]).map(function(columnid){return {columnid:columnid}});\n\t}\n\t// If one parameter\n\tif(typeof filename === 'object') {\n\t\topts = filename;\n\t\tfilename = undefined;\n\t}\n\n\tvar res = data.length;\n\tvar s = '';\n\tif(data.length > 0) {\n\t\tvar key = columns[0].columnid;\n\t\ts += data.map(function(d){\n\t\t\treturn d[key];\n\t\t}).join('\\n');\n\t}\n\n\tfilename = alasql.utils.autoExtFilename(filename,'txt',opts);\n\tres = alasql.utils.saveFile(filename,s);\n\tif(cb){\n\t\tres = cb(res);\n\t}\n\treturn res;\n};\n\nalasql.into.TAB = alasql.into.TSV = function(filename, opts, data, columns, cb) {\n\tvar opt = {};\n\talasql.utils.extend(opt, opts);\n\topt.separator = '\\t';\n\tfilename = alasql.utils.autoExtFilename(filename,'tab',opts);\n\topt.autoExt = false;\n\treturn alasql.into.CSV(filename, opt, data, columns, cb);\n}\n\nalasql.into.CSV = function(filename, opts, data, columns, cb) {\n\tif(columns.length === 0 && data.length > 0) {\n\t\tcolumns = Object.keys(data[0]).map(function(columnid){return {columnid:columnid}});\n\t}\n\tif(typeof filename === 'object') {\n\t\topts = filename;\n\t\tfilename = undefined;\n\t}\n\n\tvar opt = {headers:true};\n\t//opt.separator = ','; \n\topt.separator = ';';\n\topt.quote = '\"';\n\n\topt.utf8Bom = true;\n\tif(opts && !opts.headers && typeof opts.headers !== 'undefined'){\n\t\topt.utf8Bom = false;\t\n\t}\n\n\talasql.utils.extend(opt, opts);\n\tvar res = data.length;\n\tvar s = opt.utf8Bom ? \"\\ufeff\" : '';\n\tif(opt.headers) {\n\t\ts += opt.quote+columns.map(function(col){\n\t\t\treturn col.columnid.trim();\n\t\t}).join(opt.quote+opt.separator+opt.quote)+opt.quote+'\\r\\n';\n\t}\n\n\tdata.forEach(function(d){\n\t\ts += columns.map(function(col){\n\t\t\tvar s = d[col.columnid];\n\t\t\t// escape the character wherever it appears in the field\n\t\t\tif (opt.quote !== '') {\n\t\t\t\ts = (s+\"\").replace(new RegExp('\\\\'+opt.quote,\"g\"), opt.quote + opt.quote);\n\t\t\t}\n\n      //Excel 2013 needs quotes around strings - thanks for _not_ complying with RFC for CSV \n      if(+s!=s){  // jshint ignore:line\n          s = opt.quote + s + opt.quote; \n      }\n\n      return s;\n\t\t}).join(opt.separator)+'\\r\\n';\t\n\t});\n\n\tfilename = alasql.utils.autoExtFilename(filename,'csv',opts);\n\tres = alasql.utils.saveFile(filename,s, null, {disableAutoBom: true});\n\tif(cb){\n\t\tres = cb(res);\n\t}\n\treturn res;\n};\n\n//\n// 831xl.js - Coloring Excel\n// 18.04.2015\n// Generate XLS file with colors and styles\n// with Excel\n\nalasql.into.XLS = function(filename, opts, data, columns, cb) {\n\t// If filename is not defined then output to the result\n\tif(typeof filename == 'object') {\n\t\topts = filename;\n\t\tfilename = undefined;\n\t}\n\n\t// Set sheets\n\tvar sheets = {};\n\tif(opts && opts.sheets) {\n\t\tsheets = opts.sheets;\n\t};\n\n\t// Default sheet\n\tvar sheet = {headers:true};\n\tif(typeof sheets['Sheet1'] != 'undefined') {\n\t\tsheet = sheets[0];\n\t} else {\n\t\tif(typeof opts != 'undefined') {\n\t\t\tsheet = opts;\n\t\t}\n\t};\n\n\t// Set sheet name and default is 'Sheet1'\n\tif(typeof sheet.sheetid == 'undefined') {\n\t\tsheet.sheetid = 'Sheet1';\n\t};\n\n\tvar s = toHTML();\n\n\t// File is ready to save\n\tfilename = alasql.utils.autoExtFilename(filename,'xls',opts);\n\tvar res = alasql.utils.saveFile(filename,s);\n\tif(cb) res = cb(res);\n\treturn res;\n\n\tfunction toHTML() {\n\t// Generate prologue\n\t\tvar s = '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" \\\n\t\txmlns=\"http://www.w3.org/TR/REC-html40\"><head> \\\n\t\t<meta charset=\"utf-8\" /> \\\n\t\t<!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets> ';\n\n\t\t// Worksheets\n\t\ts+=' <x:ExcelWorksheet><x:Name>' + sheet.sheetid + '</x:Name><x:WorksheetOptions><x:DisplayGridlines/>     </x:WorksheetOptions> \\\n\t\t</x:ExcelWorksheet>';\n\n\t\ts += '</x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head>';\n\n\t\t// Generate body\n\t\ts += '<body';\n\t\tif(typeof sheet.style != 'undefined') {\n\t\t\ts += ' style=\"';\n\t\t\tif(typeof sheet.style == 'function') {\n\t\t\t\ts += sheet.style(sheet);\n\t\t\t} else {\n\t\t\t\ts += sheet.style;\n\t\t\t}\n\t\t\ts += '\"';\n\t\t}\n\t\ts +='>';\n\t\ts += '<table>';\n\t\tif(typeof sheet.caption != 'undefined') {\n\t\t\tvar caption = sheet.caption;\n\t\t\tif(typeof caption == 'string') {\n\t\t\t\tcaption = {title:caption};\n\t\t\t}\n\t\t\ts += '<caption';\n\t\t\tif(typeof caption.style != 'undefined') {\n\t\t\t\ts += ' style=\"';\n\t\t\t\tif(typeof caption.style == 'function') {\n\t\t\t\t\ts += caption.style(sheet,caption);\n\t\t\t\t} else {\n\t\t\t\t\ts += caption.style;\n\t\t\t\t}\n\t\t\t\ts += '\" '\n\t\t\t}\n\t\t\ts += '>';\n\t\t\ts += caption.title;\n\t\t\ts += '</caption>';\n\t\t}\n\n\t\t// Columns\n\n\t\t// If columns defined in sheet, then take them\n\t\tif(typeof sheet.columns != 'undefined') {\n\t\t\tcolumns = sheet.columns;\n\t\t} else {\n\t\t\t// Autogenerate columns if they are passed as parameters\n\t\t\tif(columns.length == 0 && data.length > 0) {\n\t\t\t\tif(typeof data[0] == 'object') {\n\t\t\t\t\tif(Array.isArray(data[0])) {\n\t\t\t\t\t\tcolumns = data[0].map(function(d,columnidx){\n\t\t\t\t\t\t\treturn {columnid:columnidx};\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcolumns = Object.keys(data[0]).map(function(columnid){\n\t\t\t\t\t\t\treturn {columnid:columnid};\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Prepare columns\n\t\tcolumns.forEach(function(column,columnidx){\n\t\t\tif(typeof sheet.column != 'undefined') {\n\t\t\t\textend(column,sheet.column);\n\t\t\t}\n\n\t\t\tif(typeof column.width == 'undefined') {\n\t\t\t\tif(sheet.column && sheet.column.width !='undefined') {\n\t\t\t\t\tcolumn.width = sheet.column.width;\n\n\t\t\t\t} else {\n\t\t\t\t\tcolumn.width = \"120px\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(typeof column.width == 'number') column.width = column.width + \"px\";\n\t\t\tif(typeof column.columnid == 'undefined') column.columnid = columnidx;\n\t\t\tif(typeof column.title == 'undefined') column.title = \"\"+column.columnid.trim();\n\t\t\tif(sheet.headers && Array.isArray(sheet.headers)) column.title = sheet.headers[columnidx];\n\t\t});\n\n\t\t// Set columns widths\n\t\ts += '<colgroups>';\n\t\tcolumns.forEach(function (column) {\n\t\t\ts += '<col style=\"width: '+column.width+'\"></col>';\n\t\t});\n\t\ts += '</colgroups>';\n\n\t\t// Headers\n\t\tif(sheet.headers) {\n\t\t \ts += '<thead>';\n\t\t \ts += '<tr>';\n\n\t\t\t// TODO: Skip columns to body\n\n\t\t\t// Headers\n\t\t\tcolumns.forEach(function (column,columnidx) {\n\n\t\t\t\ts += '<th ';\n\t\t\t\t// Column style\n\t\t\t\tif(typeof column.style != 'undefined') {\n\t\t\t\t\ts += ' style=\"';\n\t\t\t\t\tif(typeof column.style == 'function') {\n\t\t\t\t\t\ts += column.style(sheet,column,columnidx);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts += column.style;\n\t\t\t\t\t}\n\t\t\t\t\ts += '\" '\n\t\t\t\t}\n\t\t\t\ts += '>';\n\n\t\t\t\t// Column title\n\t\t\t\tif(typeof column.title != 'undefined') {\n\t\t\t\t\tif(typeof column.title == 'function') {\n\t\t\t\t\t\ts += column.title(sheet,column,columnidx);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts += column.title;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ts += '</th>';\n\t\t\t});\t\n\n\t\t\ts += '</tr>';\t\n\t\t\ts += '</thead>';\n\t\t}\n\n\t\ts += '<tbody>';\n\n\t\t// TODO: Skip lines between header and body\n\n\t\tif(data && data.length > 0) {\n\n\t\t\t// TODO: Skip columns to body\n\n\t\t\t// Loop over data rows\n\t\t\tdata.forEach(function(row,rowidx){\n\t\t\t\t// Limit number of rows on the sheet\n\t\t\t\tif(rowidx>sheet.limit) return;\n\t\t\t\t// Create row\n\t\t\t\ts += '<tr';\n\n\t\t\t\tvar srow = {};\n\t\t\t\textend(srow,sheet.row);\n\t\t\t\tif(sheet.rows && sheet.rows[rowidx]) {\n\t\t\t\t\textend(srow,sheet.rows[rowidx]);\n\t\t\t\t}\n\t\t\t\t// Row style fromdefault sheet\n\t\t\t\tif(typeof srow != 'undefined') {\n\t\t\t\t\tif(typeof srow.style != 'undefined') {\n\t\t\t\t\t\ts += ' style=\"';\n\t\t\t\t\t\tif(typeof srow.style == 'function') {\n\t\t\t\t\t\t\ts += srow.style(sheet,row,rowidx);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts += srow.style;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts += '\" '\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\ts += '>';\n\t\t\t\t// Loop over columns\n\t\t\t\tcolumns.forEach(function (column,columnidx) {\n\t\t\t\t\t// Parameters\n\t\t\t\t\tvar cell = {};\n\t\t\t\t\textend(cell,sheet.cell);\n\t\t\t\t\textend(cell,srow.cell);\n\t\t\t\t\tif(typeof sheet.column != 'undefined') {\n\t\t\t\t\t\textend(cell,sheet.column.cell);\n\t\t\t\t\t}\n\t\t\t\t\textend(cell,column.cell);\n\t\t\t\t\tif(sheet.cells && sheet.cells[rowidx] && sheet.cells[rowidx][columnidx]) {\n\t\t\t\t\t\textend(cell,sheet.cells[rowidx][columnidx]);\n\t\t\t\t\t};\n\n\t\t\t\t\t// Create value\n\t\t\t\t\tvar value = row[column.columnid];\n\t\t\t\t\tif(typeof cell.value == 'function') {\n\t\t\t\t\t\tvalue = cell.value(value,sheet,row,column,cell,rowidx,columnidx);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Define cell type\n\t\t\t\t\tvar typeid = cell.typeid;\n\t\t\t\t\tif(typeof typeid == 'function') {\n\t\t\t\t\t\ttypeid = typeid(value,sheet,row,column,cell,rowidx,columnidx);\n\t\t\t\t\t}\n\n\t\t\t\t\tif(typeof typeid == 'undefined') {\n\t\t\t\t\t\tif(typeof value == 'number') typeid = 'number';\n\t\t\t\t\t\telse if(typeof value == 'string') typeid = 'string';\n\t\t\t\t\t\telse if(typeof value == 'boolean') typeid = 'boolean';\n\t\t\t\t\t\telse if(typeof value == 'object') {\n\t\t\t\t\t\t\tif(value instanceof Date) typeid = 'date';\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tvar typestyle = '';\n\n\t\t\t\t\tif(typeid == 'money') {\n\t\t\t\t\t\ttypestyle = 'mso-number-format:\\\"\\\\#\\\\,\\\\#\\\\#0\\\\\\\\ _р_\\\\.\\\";white-space:normal;';\n\t\t\t\t\t} else if(typeid == 'number') {\n\t\t\t\t\t\ttypestyle = ' ';\n\t\t\t\t\t} else if (typeid == 'date') {\n\t\t\t\t\t\ttypestyle = 'mso-number-format:\\\"Short Date\\\";'; \n\t\t\t\t\t} else {\n\t\t\t\t\t\t// FOr other types is saved\n\t\t\t\t\t\tif( opts.types && opts.types[typeid] && opts.types[typeid].typestyle) {\n\t\t\t\t\t\t\ttypestyle = opts.types[typeid].typestyle;\n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\n\t\t\t\t\t// TODO Replace with extend...\n\t\t\t\t\ttypestyle = typestyle || 'mso-number-format:\\\"\\\\@\\\";'; // Default type style\n\n\t\t\t\t\ts += \"<td style='\" + typestyle+\"' \" ;\n\t\t\t\t\tif(typeof cell.style != 'undefined') {\n\t\t\t\t\t\ts += ' style=\"';\n\t\t\t\t\t\tif(typeof cell.style == 'function') {\n\t\t\t\t\t\t\ts += cell.style(value,sheet,row,column,rowidx,columnidx);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts += cell.style;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts += '\" '\n\t\t\t\t\t}\n\t\t\t\t\ts += '>';\n\n\t\t\t\t\t// TODO Replace with extend...\n\t\t\t\t\tvar format = cell.format;\n\t\t\t\t\tif(typeof value == 'undefined') {\n\t\t\t\t\t\ts += '';\n\t\t\t\t\t} else if(typeof format != 'undefined') {\n\t\t\t\t\t\tif(typeof format == 'function') {\n\t\t\t\t\t\t\ts += format(value);\n\t\t\t\t\t\t} else if(typeof format == 'string') {\n\t\t\t\t\t\t\ts += value; // TODO - add string format\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error('Unknown format type. Should be function or string');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(typeid == 'number' || typeid == 'date') {\n\t\t\t\t\t\t\ts += value.toString();\n\t\t\t\t\t\t} else if(typeid == 'money') {\n\t\t\t\t\t\t\ts += (+value).toFixed(2);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts += value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ts += '</td>';\n\t\t\t\t});\n\n\t\t\t\ts += '</tr>';\n\t\t\t});\n\t\t}\n\n\t\ts += '</tbody>';\n\n\t\t// Generate epilogue\n\t\ts += '</table>';\n\t\ts += '</body>';\n\t\ts += '</html>';\n\n\t\treturn s;\n\n\t}\n\n\t// Style function\n\tfunction style(a) {\n\t\tvar s = ' style=\"';\n\t\tif(a && typeof a.style != 'undefined') {\n\t\t\ts += a.style + ';';\n\t\t}\n\t\ts += '\" ';\n\t\treturn s;\n\t}\n};\n\nalasql.into.XLSXML = function(filename, opts, data, columns, cb) {\n\topts = opts || {};\n\n\t// If filename is not defined then output to the result\n\tif(typeof filename == 'object') {\n\t\topts = filename;\n\t\tfilename = undefined;\n\t}\n\n\t// Set sheets\n\tvar sheets = {};\n\tif(opts && opts.sheets) {\n\t\tsheets = opts.sheets;\n\t} else {\n\t\tsheets.Sheet1 = opts;\n\t};\n\n\t// File is ready to save\n\tfilename = alasql.utils.autoExtFilename(filename,'xls',opts);\n\tvar res = alasql.utils.saveFile(filename,toXML());\n\tif(cb) res = cb(res);\n\treturn res;\n\n\tfunction toXML() {\n\t\tvar s1 = '<?xml version=\"1.0\"?> \\\n\t\t<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" \\\n\t\t xmlns:o=\"urn:schemas-microsoft-com:office:office\" \\\n\t\t xmlns:x=\"urn:schemas-microsoft-com:office:excel\" \\\n\t\t xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\" \\\n\t\t xmlns:html=\"http://www.w3.org/TR/REC-html40\"> \\\n\t\t <DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\"> \\\n\t\t </DocumentProperties> \\\n\t\t <OfficeDocumentSettings xmlns=\"urn:schemas-microsoft-com:office:office\"> \\\n\t\t  <AllowPNG/> \\\n\t\t </OfficeDocumentSettings> \\\n\t\t <ExcelWorkbook xmlns=\"urn:schemas-microsoft-com:office:excel\"> \\\n\t\t  <ActiveSheet>0</ActiveSheet> \\\n\t\t </ExcelWorkbook> \\\n\t\t <Styles> \\\n\t\t  <Style ss:ID=\"Default\" ss:Name=\"Normal\"> \\\n\t\t   <Alignment ss:Vertical=\"Bottom\"/> \\\n\t\t   <Borders/> \\\n\t\t   <Font ss:FontName=\"Calibri\" x:Family=\"Swiss\" ss:Size=\"12\" ss:Color=\"#000000\"/> \\\n\t\t   <Interior/> \\\n\t\t   <NumberFormat/> \\\n\t\t   <Protection/> \\\n\t\t  </Style>';\n\n\t \tvar s2 = ''; // for styles\n\n\t\tvar s3 = ' </Styles>';\n\n\t\tvar styles = {}; // hash based storage for styles\n\t\tvar stylesn = 62; // First style\n\n\t\t// Generate style\n\t\tfunction hstyle(st) {\n\t\t\t// Prepare string\n\t\t\tvar s = '';\n\t\t\tfor(var key in st) {\n\t\t\t\ts += '<'+key;\n\t\t\t\tfor(var attr in st[key]) {\n\t\t\t\t\ts += ' ';\n\t\t\t\t\tif(attr.substr(0,2) == 'x:') {\n\t\t\t\t\t\ts += attr;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts += 'ss:';\n\t\t\t\t\t}\n\t\t\t\t\ts += attr+'=\"'+st[key][attr]+'\"';\n\t\t\t\t}\n\t\t\t\ts += '/>';\n\t\t\t}\n\n\t\t\tvar hh = hash(s);\n\t\t\t// Store in hash\n\t\t\tif(styles[hh]) {\n\t\t\t} else {\n\t\t\t\tstyles[hh] = {styleid:stylesn};\n\t\t\t\ts2 += '<Style ss:ID=\"s'+stylesn+'\">';\n\t\t\t\ts2 += s;\n\t\t\t\ts2 += '</Style>';\n\t\t\t\tstylesn++;\n\t\t\t}\n\t\t\treturn 's'+styles[hh].styleid;\n\t\t}\n\n\t\tfor (var sheetid in sheets) {\n\t\t\tvar sheet = sheets[sheetid];\n\n\t\t\t// If columns defined in sheet, then take them\n\t\t\tif(typeof sheet.columns != 'undefined') {\n\t\t\t\tcolumns = sheet.columns;\n\t\t\t} else {\n\t\t\t\t// Autogenerate columns if they are passed as parameters\n\t\t\t\tif(columns.length == 0 && data.length > 0) {\n\t\t\t\t\tif(typeof data[0] == 'object') {\n\t\t\t\t\t\tif(Array.isArray(data[0])) {\n\t\t\t\t\t\t\tcolumns = data[0].map(function(d,columnidx){\n\t\t\t\t\t\t\t\treturn {columnid:columnidx};\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcolumns = Object.keys(data[0]).map(function(columnid){\n\t\t\t\t\t\t\t\treturn {columnid:columnid};\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Prepare columns\n\t\t\tcolumns.forEach(function(column,columnidx){\n\t\t\t\tif(typeof sheet.column != 'undefined') {\n\t\t\t\t\textend(column,sheet.column);\n\t\t\t\t}\n\n\t\t\t\tif(typeof column.width == 'undefined') {\n\t\t\t\t\tif(sheet.column && (typeof sheet.column.width !='undefined')) {\n\t\t\t\t\t\tcolumn.width = sheet.column.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcolumn.width = 120;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(typeof column.width == 'number') column.width = column.width;\n\t\t\t\tif(typeof column.columnid == 'undefined') column.columnid = columnidx;\n\t\t\t\tif(typeof column.title == 'undefined') column.title = \"\"+column.columnid.trim();\n\t\t\t\tif(sheet.headers && Array.isArray(sheet.headers)) column.title = sheet.headers[idx];\n\t\t\t});\n\n\t\t\t// Header\n\t \t\ts3 +='<Worksheet ss:Name=\"'+sheetid+'\"> \\\n\t  \t\t\t<Table ss:ExpandedColumnCount=\"'+columns.length\n\t  \t\t\t+'\" ss:ExpandedRowCount=\"'+((sheet.headers?1:0)+Math.min(data.length,sheet.limit||data.length))\n\t  \t\t\t\t+'\" x:FullColumns=\"1\" \\\n\t   \t\t\tx:FullRows=\"1\" ss:DefaultColumnWidth=\"65\" ss:DefaultRowHeight=\"15\">';\n\n\t\t\tcolumns.forEach(function (column,columnidx) {\n\n\t   \t\t\ts3 += '<Column ss:Index=\"'+(columnidx+1)\n\t   \t\t\t       +'\" ss:AutoFitWidth=\"0\" ss:Width=\"'+column.width+'\"/>'\n\t   \t\t});\n\n\t   \t\t// Headers\n\t\t\tif(sheet.headers) {\n\t   \t\t\ts3 += '<Row ss:AutoFitHeight=\"0\">';\n\n\t\t\t\t// TODO: Skip columns to body\n\n\t\t\t\t// Headers\n\t\t\t\tcolumns.forEach(function (column,columnidx) {\n\n\t\t    \t\ts3 += '<Cell ';\n\n\t\t\t\t\tif(typeof column.style != 'undefined') {\n\t\t\t\t\t\tvar st = {};\n\t\t\t\t\t\tif(typeof column.style == 'function') {\n\t\t\t\t\t\t\textend(st,column.style(sheet,column,columnidx));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\textend(st,column.style);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts3 += 'ss:StyleID=\"'+hstyle(st)+'\"';\n\t\t\t\t\t}\n\n\t\t    \t\ts3 += '><Data ss:Type=\"String\">';\n\n\t\t\t\t\t// Column title\n\t\t\t\t\tif(typeof column.title != 'undefined') {\n\t\t\t\t\t\tif(typeof column.title == 'function') {\n\t\t\t\t\t\t\ts3 += column.title(sheet,column,columnidx);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 += column.title;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ts3 += '</Data></Cell>';\n\t\t\t\t});\t\n\n\t\t\t\ts3 += '</Row>';\n\t\t\t};\n\n\t   \t\t// Data\n\t\t\tif(data && data.length > 0) {\n\t\t\t\t// Loop over data rows\n\t\t\t\tdata.forEach(function(row,rowidx){\n\t\t\t\t\t// Limit number of rows on the sheet\n\t\t\t\t\tif(rowidx>sheet.limit) return;\n\n\t\t\t\t\t// Extend row properties\n\t\t\t\t\tvar srow = {};\n\t\t\t\t\textend(srow,sheet.row);\n\t\t\t\t\tif(sheet.rows && sheet.rows[rowidx]) {\n\t\t\t\t\t\textend(srow,sheet.rows[rowidx]);\n\t\t\t\t\t}\n\n\t\t   \t\t\ts3 += '<Row ';\n\n\t\t\t\t\t// Row style fromdefault sheet\n\t\t\t\t\tif(typeof srow != 'undefined') {\n\t\t\t\t\t\tvar st = {};\n\t\t\t\t\t\tif(typeof srow.style != 'undefined') {\n\t\t\t\t\t\t\tif(typeof srow.style == 'function') {\n\t\t\t\t\t\t\t\textend(st,srow.style(sheet,row,rowidx));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\textend(st,srow.style);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ts3 += 'ss:StyleID=\"'+hstyle(st)+'\"';\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\ts3 += '>';//'ss:AutoFitHeight=\"0\">'\n\n\t\t\t\t\t// Data\n\t\t\t\t\tcolumns.forEach(function (column,columnidx) {\n\n\t\t\t\t\t\t// Parameters\n\t\t\t\t\t\tvar cell = {};\n\t\t\t\t\t\textend(cell,sheet.cell);\n\t\t\t\t\t\textend(cell,srow.cell);\n\t\t\t\t\t\tif(typeof sheet.column != 'undefined') {\n\t\t\t\t\t\t\textend(cell,sheet.column.cell);\n\t\t\t\t\t\t}\n\t\t\t\t\t\textend(cell,column.cell);\n\t\t\t\t\t\tif(sheet.cells && sheet.cells[rowidx] && sheet.cells[rowidx][columnidx]) {\n\t\t\t\t\t\t\textend(cell,sheet.cells[rowidx][columnidx]);\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Create value\n\t\t\t\t\t\tvar value = row[column.columnid];\n\t\t\t\t\t\tif(typeof cell.value == 'function') {\n\t\t\t\t\t\t\tvalue = cell.value(value,sheet,row,column,cell,rowidx,columnidx);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Define cell type\n\t\t\t\t\t\tvar typeid = cell.typeid;\n\t\t\t\t\t\tif(typeof typeid == 'function') {\n\t\t\t\t\t\t\ttypeid = typeid(value,sheet,row,column,cell,rowidx,columnidx);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(typeof typeid == 'undefined') {\n\t\t\t\t\t\t\tif(typeof value == 'number') typeid = 'number';\n\t\t\t\t\t\t\telse if(typeof value == 'string') typeid = 'string';\n\t\t\t\t\t\t\telse if(typeof value == 'boolean') typeid = 'boolean';\n\t\t\t\t\t\t\telse if(typeof value == 'object') {\n\t\t\t\t\t\t\t\tif(value instanceof Date) typeid = 'date';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tvar Type = 'String';\n\t\t\t\t\t\tif(typeid == 'number') Type = 'Number';\n\t\t\t\t\t\telse if(typeid == 'date') Type = 'Date';\n\t\t\t\t\t\t// TODO: What else?\n\n\t\t\t\t\t\t// Prepare Data types styles\n\t\t\t\t\t\tvar typestyle = '';\n\n\t\t\t\t\t\tif(typeid == 'money') {\n\t\t\t\t\t\t\ttypestyle = 'mso-number-format:\\\"\\\\#\\\\,\\\\#\\\\#0\\\\\\\\ _р_\\\\.\\\";white-space:normal;';\n\t\t\t\t\t\t} else if(typeid == 'number') {\n\t\t\t\t\t\t\ttypestyle = ' ';\n\t\t\t\t\t\t} else if (typeid == 'date') {\n\t\t\t\t\t\t\ttypestyle = 'mso-number-format:\\\"Short Date\\\";'; \n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// For other types is saved\n\t\t\t\t\t\t\tif( opts.types && opts.types[typeid] && opts.types[typeid].typestyle) {\n\t\t\t\t\t\t\t\ttypestyle = opts.types[typeid].typestyle;\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// TODO Replace with extend...\n\t\t\t\t\t\ttypestyle = typestyle || 'mso-number-format:\\\"\\\\@\\\";'; // Default type style\n\n\t\t\t    \t\ts3 += '<Cell ';\n\n\t\t\t\t\t\t// Row style fromdefault sheet\n\t\t\t\t\t\tvar st = {};\n\t\t\t\t\t\tif(typeof cell.style != 'undefined') {\n\t\t\t\t\t\t\tif(typeof cell.style == 'function') {\n\t\t\t\t\t\t\t\textend(st,cell.style(value,sheet,row,column,rowidx,columnidx));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\textend(st,cell.style);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ts3 += 'ss:StyleID=\"'+hstyle(st)+'\"';\n\t\t\t\t\t\t}\n\n\t\t\t    \t\ts3 += '>';\n\n\t\t\t    \t\ts3+='<Data ss:Type=\"'+Type+'\">';\n\n\t\t\t\t\t\t// TODO Replace with extend...\n\t\t\t\t\t\tvar format = cell.format;\n\t\t\t\t\t\tif(typeof value == 'undefined') {\n\t\t\t\t\t\t\ts3 += '';\n\t\t\t\t\t\t} else if(typeof format != 'undefined') {\n\t\t\t\t\t\t\tif(typeof format == 'function') {\n\t\t\t\t\t\t\t\ts3 += format(value);\n\t\t\t\t\t\t\t} else if(typeof format == 'string') {\n\t\t\t\t\t\t\t\ts3 += value; // TODO - add string format\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow new Error('Unknown format type. Should be function or string');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif(typeid == 'number' || typeid == 'date') {\n\t\t\t\t\t\t\t\ts3 += value.toString();\n\t\t\t\t\t\t\t} else if(typeid == 'money') {\n\t\t\t\t\t\t\t\ts3 += (+value).toFixed(2);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 += value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t    \t\ts3 += '</Data></Cell>';\n\t\t\t    \t});\n\n\t\t   \t\t\ts3 += '</Row>';\n\t\t   \t\t});\n\n\t\t   \t}\n\t   \t\t// Finish\n\t\t\ts3 += '</Table></Worksheet>';\n\t\t};\n\n\t\ts3 +='</Workbook>';\n\n\t\treturn s1+s2+s3;\n\t};\n\n};\n\n/**\n\tExport to XLSX function\n\t@function\n\t@param {string|object} filename Filename or options\n\t@param {object|undefined} opts Options or undefined\n\t@param {array} data Data\n\t@param {array} columns Columns\n\t@parab {callback} cb Callback function\n\t@return {number} Number of files processed\n*/\n\nalasql.into.XLSX = function(filename, opts, data, columns, cb) {\n\n\t/** @type {number} result */\n\tvar res = 1;\n\n\tif(deepEqual(columns,[{columnid:'_'}])) {\n\t\tdata = data.map(function(dat){return dat._;});\n\t\tcolumns = undefined;\n\n\t} else {\n\n\t}\n\n\tfilename = alasql.utils.autoExtFilename(filename,'xlsx',opts);\t\n\n\tvar XLSX = getXLSX();\n\n\t/* If called without filename, use opts */\n\tif(typeof filename == 'object') {\n\t\topts = filename;\n\t\tfilename = undefined;\n\t};\n\n\t/** @type {object} Workbook */\n\tvar wb = {SheetNames:[], Sheets:{}};\n\n\t// ToDo: check if cb must be treated differently here\n\tif(opts.sourcefilename) {\n\t\talasql.utils.loadBinaryFile(opts.sourcefilename,!!cb,function(data){\n\t\t\twb = XLSX.read(data,{type:'binary'});\n\t\t\tdoExport();\n        \t});\n\t} else {\n\t\tdoExport();\n\t};\n\n\t/* Return result */\n\tif(cb) res = cb(res);\n\treturn res;\n\n\t/**\n\t\tExport workbook\n\t\t@function\n\t*/\n\tfunction doExport() {\n\n\t\t/*\n\t\t\tIf opts is array of arrays then this is a\n\t\t\tmultisheet workboook, else it is a singlesheet\n\t\t*/\n\t\tif(typeof opts == 'object' && Array.isArray(opts)) {\n\t\t\tif(data && data.length > 0) {\n\t\t\t\tdata.forEach(function(dat,idx){\n\t\t\t\t\tprepareSheet(opts[idx],dat,undefined,idx+1)\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tprepareSheet(opts,data,columns,1);\n\t\t}\n\n\t\tsaveWorkbook(cb);\n\n\t}\n\n\t/**\n\t\tPrepare sheet\n\t\t@params {object} opts\n\t\t@params {array|object} data\n\t\t@params {array} columns Columns\n\t*/\n\tfunction prepareSheet(opts, data, columns, idx) {\n\n\t\t/** Default options for sheet */\n\t\tvar opt = {sheetid:'Sheet '+idx,headers:true};\n\t\talasql.utils.extend(opt, opts);\n\n\t\tvar dataLength = Object.keys(data).length;\n\n\t\t// Generate columns if they are not defined\n\t\tif((!columns || columns.length == 0) && dataLength > 0) {\n\t\t\tcolumns = Object.keys(data[0]).map(function(columnid){return {columnid:columnid}});\n\t\t}\n\n\t\tvar cells = {};\n\n\t\tif(wb.SheetNames.indexOf(opt.sheetid) > -1) {\n\t\t\tcells = wb.Sheets[opt.sheetid];\n\t\t} else {\n\t\t\twb.SheetNames.push(opt.sheetid);\n\t\t\twb.Sheets[opt.sheetid] = {};\n\t\t\tcells = wb.Sheets[opt.sheetid];\n\t\t}\n\n\t\tvar range = \"A1\";\n\t\tif(opt.range) range = opt.range;\n\n\t\tvar col0 = alasql.utils.xlscn(range.match(/[A-Z]+/)[0]);\n\t\tvar row0 = +range.match(/[0-9]+/)[0]-1;\n\n\t\tif(wb.Sheets[opt.sheetid]['!ref']) {\n\t\t\tvar rangem = wb.Sheets[opt.sheetid]['!ref'];\n\t\t\tvar colm = alasql.utils.xlscn(rangem.match(/[A-Z]+/)[0]);\n\t\t\tvar rowm = +rangem.match(/[0-9]+/)[0]-1;\n\t\t} else {\n\t\t\tvar colm = 1, rowm = 1;\n\t\t}\n\t\tvar colmax = Math.max(col0+columns.length,colm);\n\t\tvar rowmax = Math.max(row0+dataLength+2,rowm);\n\n\t\tvar i = row0+1;\n\n\t\twb.Sheets[opt.sheetid]['!ref'] = 'A1:'+alasql.utils.xlsnc(colmax)+(rowmax);\n\n\t\tif(opt.headers) {\n\t\t\tcolumns.forEach(function(col, idx){\n\t\t\t\tcells[alasql.utils.xlsnc(col0+idx)+\"\"+i] = {v:col.columnid.trim()};\n\t\t\t});\n\t\t\ti++;\n\t\t}\n\n\t\tfor(var j=0;j<dataLength;j++) {\n\t\t\tcolumns.forEach(function(col, idx){\n\t\t\t\tvar cell = {v:data[j][col.columnid]};\n\t\t\t\tif(typeof data[j][col.columnid] == 'number') {\n\t\t\t\t\tcell.t = 'n';\n\t\t\t\t} else if(typeof data[j][col.columnid] == 'string') {\n\t\t\t\t\tcell.t = 's';\n\t\t\t\t} else if(typeof data[j][col.columnid] == 'boolean') {\n\t\t\t\t\tcell.t = 'b';\n\t\t\t\t} else if(typeof data[j][col.columnid] == 'object') {\n\t\t\t\t\tif(data[j][col.columnid] instanceof Date) {\n\t\t\t\t\t\tcell.t = 'd';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcells[alasql.utils.xlsnc(col0+idx)+\"\"+i] = cell;\n\t\t\t});\n\t\t\ti++;\n\t\t}\n\n\t}\n\n\t/**\n\t\tSave Workbook\n\t\t@params {array} wb Workbook\n\t\t@params {callback} cb Callback\n\t*/\n\tfunction saveWorkbook(cb) {\n\n\t\tvar XLSX;\n\n\t\tif(typeof filename == 'undefined') {\n\t\t\tres = wb;\n\t\t} else {\n\t\t\tXLSX = getXLSX();\n\n\t\t\tif(utils.isNode || utils.isMeteorServer) {\n\t\t\t\tXLSX.writeFile(wb, filename);\n\t\t\t} else {\n\n\t\t\t\tvar wopts = { bookType:'xlsx', bookSST:false, type:'binary' };\n\t\t\t\tvar wbout = XLSX.write(wb,wopts);\n\n\t\t\t\tfunction s2ab(s) {\n\t\t\t\t  var buf = new ArrayBuffer(s.length);\n\t\t\t\t  var view = new Uint8Array(buf);\n\t\t\t\t  for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n\t\t\t\t  return buf;\n\t\t\t\t}\n\n\t\t\t\t/* the saveAs call downloads a file on the local machine */\n\n\t\t\t\tif(isIE() == 9) {\n\t\t\t\t\tthrow new Error('Cannot save XLSX files in IE9. Please use XLS() export function');\n\n\t\t/** @todo Check if this code is required */\n\n\t\t\t\t} else {\n\t\t\t\t\tsaveAs(new Blob([s2ab(wbout)],{type:\"application/octet-stream\"}), filename);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t};\n};\n\n/*\n//\n// FROM functions Alasql.js\n// Date: 11.12.2014\n// (c) 2014, Andrey Gershun\n//\n*/\n\n/**\n   Meteor\n*/\n\nalasql.from.METEOR = function(filename, opts, cb, idx, query) {\n\tvar res = filename.find(opts).fetch();\n\tif(cb){\n\t\tres = cb(res, idx, query);\n\t}\n\treturn res;\n };\n\n/**\n\tGoogle Spreadsheet reader\n */\nalasql.from.TABLETOP = function(key, opts, cb, idx, query) {\n\tvar res = [];\n\n\tvar opt = {headers:true, simpleSheet:true, key:key};\n\talasql.utils.extend(opt, opts);\n\topt.callback = function(data){\n\t\tfor(var i=0; i<data.length; i++) {\n\t\t\tfor (var prop in data[i]) {\n\t        \tif(data[i][prop] == +data[i][prop] && data[i].hasOwnProperty(prop)){ // jshint ignore:line\n\t\t\t\t\tdata[i][prop] = +data[i][prop];\n\t\t\t\t}\n\t\t\t}\n\t    }\n\t\tres = data;\n\t\tif(cb){\n\t\t\tres = cb(res, idx, query);\n\t\t}\n\t};\n\n\tTabletop.init(opt);\n\treturn null;\n};\n\nalasql.from.HTML = function(selector, opts, cb, idx, query) {\n\tvar opt = {};\n\talasql.utils.extend(opt, opts);\n\n\tvar sel = document.querySelector(selector);\n\tif(!sel && sel.tagName !== \"TABLE\") {\n\t\tthrow new Error('Selected HTML element is not a TABLE');\n\t}\n\n\tvar res = [];\n\tvar headers = opt.headers;\n\n\tif(headers && !(Array.isArray(headers))) {\n\t\theaders = [];\n\t\tvar ths = sel.querySelector(\"thead tr\").children;\n\t\tfor(var i=0;i<ths.length;i++){\n\t\t\tif(!(ths.item(i).style && ths.item(i).style.display === \"none\" && opt.skipdisplaynone)) {\n\t\t\t\theaders.push(ths.item(i).textContent);\n\t\t\t} else {\n\t\t\t\theaders.push(undefined);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar trs = sel.querySelectorAll(\"tbody tr\");\n\n\tfor(var j=0;j<trs.length;j++) {\n\t\tvar tds = trs.item(j).children;\n\t\tvar r = {};\n\t\tfor(var i=0;i<tds.length;i++){\n\t\t\tif(!(tds.item(i).style && tds.item(i).style.display === \"none\" && opt.skipdisplaynone)) {\n\t\t\t\tif(headers) {\n\t\t\t\t\tr[headers[i]] = tds.item(i).textContent;\n\t\t\t\t} else {\n\t\t\t\t\tr[i] = tds.item(i).textContent;\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tres.push(r);\n\t}\n\n\tif(cb){\n\t\tres = cb(res, idx, query);\n\t}\n\treturn res;\n}\n\nalasql.from.RANGE = function(start, finish, cb, idx, query) {\n\tvar res = [];\n\tfor(var i=start;i<=finish;i++){\n\t\tres.push(i);\n\t}\n//\tres = new alasql.Recordset({data:res,columns:{columnid:'_'}});\n\tif(cb){\n\t\tres = cb(res, idx, query);\n\t}\n\treturn res;\n}\n\n// Read data from any file\nalasql.from.FILE = function(filename, opts, cb, idx, query) {\n\tvar fname;\n\tif(typeof filename === 'string') {\n\t\tfname = filename;\n\n\t} else if(filename instanceof Event) {\n\t\tfname = filename.target.files[0].name;\n\n\t} else {\n\t\tthrow new Error(\"Wrong usage of FILE() function\");\n\t}\n\n\tvar parts = fname.split('.');\n\n\tvar ext = parts[parts.length-1].toUpperCase();\n\n\tif(alasql.from[ext]) {\n\n\t\treturn alasql.from[ext](filename, opts, cb, idx, query);\n\t} else {\n\t\tthrow new Error('Cannot recognize file type for loading');\n\t}\n};\n\n// Read JSON file\n\nalasql.from.JSON = function(filename, opts, cb, idx, query) {\n\tvar res;\n\n\tfilename = alasql.utils.autoExtFilename(filename,'json',opts);\n\talasql.utils.loadFile(filename,!!cb,function(data){\n\n\t\tres = JSON.parse(data);\n\t\tif(cb){\n\t\t\tres = cb(res, idx, query);\n\t\t}\n\t});\n\treturn res;\n};\n\nalasql.from.TXT = function(filename, opts, cb, idx, query) {\n\tvar res;\n\tfilename = alasql.utils.autoExtFilename(filename,'txt',opts);\n\talasql.utils.loadFile(filename,!!cb,function(data){\n\t\tres = data.split(/\\r?\\n/);\n\n\t\t// Remove last line if empty\n\t\tif(res[res.length-1] === ''){ \n\t\t\tres.pop(); \n\t\t}\n\t\tfor(var i=0, ilen=res.length; i<ilen;i++) {\n\t\t\t// Please avoid '===' here\n\t\t\tif(res[i] == +res[i]){\t// jshint ignore:line\n\t\t\t\tres[i] = +res[i];\n\t\t\t}\n\t\t\tres[i] = [res[i]];\n\t\t}\n\t\tif(cb){\n\t\t\tres = cb(res, idx, query);\n\t\t}\n\t});\n\treturn res;\n};\n\nalasql.from.TAB = alasql.from.TSV = function(filename, opts, cb, idx, query) {\n\topts = opts || {};\n\topts.separator = '\\t';\n\tfilename = alasql.utils.autoExtFilename(filename,'tab',opts);\n\topts.autoext = false;\n\treturn alasql.from.CSV(filename, opts, cb, idx, query);\n};\n\nalasql.from.CSV = function(contents, opts, cb, idx, query) {\n\tvar opt = {\n\t\tseparator: ',',\n\t\tquote: '\"',\n\t\theaders:true\n\t};\n\talasql.utils.extend(opt, opts);\n\tvar res;\n\tvar hs = [];\n\tfunction parseText(text) {\n\n\t\tvar delimiterCode = opt.separator.charCodeAt(0);\n\t\tvar quoteCode = opt.quote.charCodeAt(0);\n\n      \tvar EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n\t\t\tfunction token() {\n\t\t\tif (I >= N){\n\t\t\t\treturn EOF;\n\t\t\t}\n\t\t\tif (eol){\n\t\t\t\treturn eol = false, EOL;\n\t\t\t}\n\t\t\tvar j = I;\n\t\t\tif (text.charCodeAt(j) === quoteCode) {\n\t\t\t\tvar i = j;\n\t\t\t\twhile (i++ < N) {\n\t\t\t\t\tif (text.charCodeAt(i) === quoteCode) {\n\t\t\t\t\t\tif (text.charCodeAt(i + 1) !== quoteCode){\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t++i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tI = i + 2;\n\t\t\t\tvar c = text.charCodeAt(i + 1);\n\t\t\t\tif (c === 13) {\n\t\t\t\t\teol = true;\n\t\t\t\t\tif (text.charCodeAt(i + 2) === 10){\n\t\t\t\t\t\t++I;\n\t\t\t\t\t}\n\t\t\t\t} else if (c === 10) {\n\t\t\t\t\teol = true;\n\t\t\t\t}\n\t\t\t\treturn text.substring(j + 1, i).replace(/\"\"/g, '\"');\n\t\t\t}\n\t\t\twhile (I < N) {\n\t\t\t\tvar c = text.charCodeAt(I++), k = 1;\n\t\t\t\tif(c === 10){\n\t\t\t\t\teol = true;\n\t\t\t\t} else if (c === 13) {\n\t\t\t\t\teol = true;\n\t\t\t\t\tif (text.charCodeAt(I) === 10){\n\t\t\t\t\t\t++I;\n\t\t\t\t\t\t++k;\n\t\t\t\t\t}\n\t\t\t\t} else if(c !== delimiterCode){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn text.substring(j, I - k);\n\t\t\t}\n\t\t\treturn text.substring(j);\n\t\t}\n\n\t\twhile ((t = token()) !== EOF) {\n\t\t\tvar a = [];\n\t\t\twhile (t !== EOL && t !== EOF) {\n\t\t\t\ta.push(t.trim());\n\t\t\t\tt = token();\n\t\t\t}\n\n\t        if(opt.headers) {\n\t        \tif(n === 0) {\n\t\t\t\t\tif(typeof opt.headers === 'boolean') {\n\t\t        \t\ths = a;\n\t\t\t\t\t} else if(Array.isArray(opt.headers)) {\n\t\t\t\t\t\ths = opt.headers;\n\t\t        \t\tvar r = {};\n\t\t        \t\ths.forEach(function(h,idx){\n\t\t        \t\t\tr[h] = a[idx];\n\t\t        \t\t\t// Please avoid === here\n\t\t\t\t\t\t\tif((typeof r[h] !== 'undefined') && r[h].length !== 0 && (r[h]).trim() == +r[h]){ // jshint ignore:line\n\t\t\t\t\t\t\t\tr[h] = +r[h];\n\t\t\t\t\t\t\t}\n\t\t        \t\t});\n\t\t\t\t\t\trows.push(r);\n\t\t\t\t\t}\n\n\t        \t} else {\n\t        \t\tvar r = {};\n\t        \t\ths.forEach(function(h,idx){\n\t        \t\t\tr[h] = a[idx];\n\t\t\t\t\t\tif((typeof r[h] !== 'undefined') && r[h].length !== 0 && r[h].trim() == +r[h]){ // jshint ignore:line\n\t\t\t\t\t\t\tr[h] = +r[h];\n\t\t\t\t\t\t}\n\t        \t\t});\n\t        \t\trows.push(r);\n\t        \t}\n\t        \tn++;\n\t        } else {\n\t    \t    rows.push(a);\n\t    \t}\n      }\n\n      res = rows;\n\n\tif(opt.headers) {\n\t\tif(query && query.sources && query.sources[idx]) {\n\t\t\tvar columns = query.sources[idx].columns = [];\n\t\t\ths.forEach(function(h){\n\t\t\t\tcolumns.push({columnid:h});\n\t\t\t});\n\t\t}\n\t}\n\n\t\tif(cb){\n\t\t\tres = cb(res, idx, query);\n\t\t}\n\t}\n\tif( (new RegExp(\"\\n\")).test(contents) ) {\n\t\tparseText(contents)\n\t} else {\n\t\tcontents = alasql.utils.autoExtFilename(contents,'csv',opts);\n\t\talasql.utils.loadFile(contents,!!cb,parseText);\n\t}\n\treturn res;\n};\n\nfunction XLSXLSX(X,filename, opts, cb, idx, query) {\n\tvar opt = {};\n\topts = opts || {};\n\talasql.utils.extend(opt, opts);\n\tif(typeof opt.headers === 'undefined'){\n\t\topt.headers = true;\n\t}\n\tvar res;\n\n\t/**\n\t * see https://github.com/SheetJS/js-xlsx/blob/5ae6b1965bfe3764656a96f536b356cd1586fec7/README.md\n\t * for example of using readAsArrayBuffer under `Parsing Workbooks`\n\t */\n\tfunction fixdata(data) {\n\t\tvar o = \"\", l = 0, w = 10240;\n\t\tfor(; l<data.byteLength/w; ++l) o+=String.fromCharCode.apply(null,new Uint8Array(data.slice(l*w,l*w+w)));\n\t\to+=String.fromCharCode.apply(null, new Uint8Array(data.slice(l*w)));\n\t\treturn o;\n\t}\n\tfilename = alasql.utils.autoExtFilename(filename,'xls',opts);\n\talasql.utils.loadBinaryFile(filename,!!cb,function(data){\n\n//\tfunction processData(data) {\n\t\tif (data instanceof ArrayBuffer) {\n\t\t\tvar arr = fixdata(data);\n\t\t\tvar workbook = X.read(btoa(arr),{type:'base64'});\n\t\t} else {\n\t\t\tvar workbook = X.read(data,{type:'binary'});\n\t\t}\n\n\t\tvar sheetid;\n\t\tif(typeof opt.sheetid === 'undefined') {\n\t\t\tsheetid = workbook.SheetNames[0];\n\t\t} else {\n\t\t\tsheetid = opt.sheetid;\n\t\t}\n\t\tvar range;\n\t\tif(typeof opt.range === 'undefined') {\n\t\t\trange = workbook.Sheets[sheetid]['!ref'];\n\t\t} else {\n\t\t\trange = opt.range;\n\t\t\tif(workbook.Sheets[sheetid][range]){\n\t\t\t\trange = workbook.Sheets[sheetid][range];\n\t\t\t}\n\t\t}\n\t\tvar rg = range.split(':');\n\t\tvar col0 = rg[0].match(/[A-Z]+/)[0];\n\t\tvar row0 = +rg[0].match(/[0-9]+/)[0];\n\t\tvar col1 = rg[1].match(/[A-Z]+/)[0];\n\t\tvar row1 = +rg[1].match(/[0-9]+/)[0];\n\n\t\tvar hh = {};\n\t\tvar xlscnCol0 = alasql.utils.xlscn(col0);\n\t\tvar xlscnCol1 = alasql.utils.xlscn(col1);\n\t\tfor(var j=xlscnCol0;j<=xlscnCol1;j++){\n\t\t\tvar col = alasql.utils.xlsnc(j);\n\t\t\tif(opt.headers) {\n\t\t\t\tif(workbook.Sheets[sheetid][col+\"\"+row0]) {\n\t\t\t\t\thh[col] = workbook.Sheets[sheetid][col+\"\"+row0].v;\n\t\t\t\t} else {\n\t\t\t\t\thh[col] = col;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thh[col] = col;\n\t\t\t}\n\t\t}\n\t\tvar res = [];\n\t\tif(opt.headers){\n\t\t\trow0++;\n\t\t}\n\t\tfor(var i=row0;i<=row1;i++) {\n\t\t\tvar row = {};\n\t\t\tfor(var j=xlscnCol0;j<=xlscnCol1;j++){\n\t\t\t\tvar col = alasql.utils.xlsnc(j);\n\t\t\t\tif(workbook.Sheets[sheetid][col+\"\"+i]) {\n\t\t\t\t\trow[hh[col]] = workbook.Sheets[sheetid][col+\"\"+i].v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tres.push(row);\n\t\t}\n\n\t\t// Remove last empty line (issue #548)\n\t\tif(res.length > 0 && res[res.length-1] && Object.keys(res[res.length-1]).length == 0) {\n\t\t\tres.pop();\n\t\t}\n\n\t\tif(cb){\n\t\t\tres = cb(res, idx, query);\n\t\t}\n\t}, function(err){\n\t\tthrow err;\n\t});\n\n\treturn res;\n}\n\nalasql.from.XLS = function(filename, opts, cb, idx, query) {\n\topts=opts||{};\n\tfilename = alasql.utils.autoExtFilename(filename,'xls',opts);\n\topts.autoExt = false;\n\treturn XLSXLSX(getXLS(),filename, opts, cb, idx, query);\n}\n\nalasql.from.XLSX = function(filename, opts, cb, idx, query) {\n\topts=opts||{};\n\tfilename = alasql.utils.autoExtFilename(filename,'xlsx',opts);\n\topts.autoExt = false;\n\treturn XLSXLSX(getXLSX(),filename, opts, cb, idx, query);\n};\n\nalasql.from.XML = function(filename, opts, cb, idx, query) {\n  var res;\n\n  alasql.utils.loadFile(filename,!!cb,function(data){\n\n    res = xmlparse(data).root; \n\n    if(cb) res = cb(res, idx, query);\n  });\n  return res;\n};\n\n/**\n * Parse the given string of `xml`.\n *\n * @param {String} xml\n * @return {Object}\n * @api public\n */\n\nfunction xmlparse(xml) {\n  xml = xml.trim();\n\n  // strip comments\n  xml = xml.replace(/<!--[\\s\\S]*?-->/g, '');\n\n  return document();\n\n  /**\n   * XML document.\n   */\n\n  function document() {\n    return {\n      declaration: declaration(),\n      root: tag()\n    }\n  }\n\n  /**\n   * Declaration.\n   */\n\n  function declaration() {\n    var m = match(/^<\\?xml\\s*/);\n    if (!m) return;\n\n    // tag\n    var node = {\n      attributes: {}\n    };\n\n    // attributes\n    while (!(eos() || is('?>'))) {\n      var attr = attribute();\n      if (!attr) return node;\n      node.attributes[attr.name] = attr.value;\n    }\n\n    match(/\\?>\\s*/);\n\n    return node;\n  }\n\n  /**\n   * Tag.\n   */\n\n  function tag() {\n    var m = match(/^<([\\w-:.]+)\\s*/);\n    if (!m) return;\n\n    // name\n    var node = {\n      name: m[1],\n      attributes: {},\n      children: []\n    };\n\n    // attributes\n    while (!(eos() || is('>') || is('?>') || is('/>'))) {\n      var attr = attribute();\n      if (!attr) return node;\n      node.attributes[attr.name] = attr.value;\n    }\n\n    // self closing tag\n    if (match(/^\\s*\\/>\\s*/)) {\n      return node;\n    }\n\n    match(/\\??>\\s*/);\n\n    // content\n    node.content = content();\n\n    // children\n    var child;\n    while (child = tag()) {\n      node.children.push(child);\n    }\n\n    // closing\n    match(/^<\\/[\\w-:.]+>\\s*/);\n\n    return node;\n  }\n\n  /**\n   * Text content.\n   */\n\n  function content() {\n    var m = match(/^([^<]*)/);\n    if (m) return m[1];\n    return '';\n  }\n\n  /**\n   * Attribute.\n   */\n\n  function attribute() {\n    var m = match(/([\\w:-]+)\\s*=\\s*(\"[^\"]*\"|'[^']*'|\\w+)\\s*/);\n    if (!m) return;\n    return { name: m[1], value: strip(m[2]) }\n  }\n\n  /**\n   * Strip quotes from `val`.\n   */\n\n  function strip(val) {\n    return val.replace(/^['\"]|['\"]$/g, '');\n  }\n\n  /**\n   * Match `re` and advance the string.\n   */\n\n  function match(re) {\n    var m = xml.match(re);\n    if (!m) return;\n    xml = xml.slice(m[0].length);\n    return m;\n  }\n\n  /**\n   * End-of-source.\n   */\n\n  function eos() {\n    return 0 == xml.length;\n  }\n\n  /**\n   * Check for `prefix`.\n   */\n\n  function is(prefix) {\n    return 0 == xml.indexOf(prefix);\n  }\n};\n\nalasql.from.GEXF = function(filename, opts, cb, idx, query) {\n\n\tvar res;\n\talasql('SEARCH FROM XML('+filename+')',[],function(data){\n\t\tres = data;\n\t\tconsole.log(res);\n\t\tif(cb) res=cb(res);\n\t});\n  return res;\n};\n\n/*\r\n//\r\n// HELP for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n/**\r\n\tPrint statement \r\n\t@class\r\n\t@param {object} params Initial setup properties\r\n*/\r\n\nyy.Print = function (params) { return yy.extend(this, params); }\r\n\n/** \r\n\tGenerate SQL string \r\n\t@this Print statement object\r\n*/\r\nyy.Print.prototype.toString = function() {\r\n\tvar s = 'PRINT';\r\n\tif(this.statement) s += ' '+this.statement.toString();\r\n\treturn s;\r\n}\r\n\n/**\r\n \tPrint result of select statement or expression\r\n \t@param {string} databaseid Database identificator\r\n \t@param {object} params Query parameters\r\n \t@param {statement-callback} cb Callback function \r\n\t@this Print statement object\r\n*/\r\nyy.Print.prototype.execute = function (databaseid,params,cb) {\r\n\n\tvar self = this;\r\n\tvar res = 1;\r\n\n\talasql.precompile(this,databaseid,params);  /** @todo Change from alasql to this */\r\n\n\tif(this.exprs && this.exprs.length >0) {\r\n\t\tvar rs = this.exprs.map(function(expr){\r\n\n\t\t\tvar exprfn =  new Function(\"params,alasql,p\",'var y;return '+expr.toJS('({})','', null)).bind(self);\r\n\t\t\tvar r = exprfn(params,alasql);\r\n\t\t\treturn JSONtoString(r);\r\n\t\t});\r\n\t\tconsole.log.apply(console,rs);\r\n\t} else if(this.select) {\r\n\t\tvar r = this.select.execute(databaseid,params);\r\n\t\tconsole.log(JSONtoString(r));\r\n\t} else {\r\n\t\tconsole.log();\r\n\t}\r\n\n\tif(cb) res = cb(res);\r\n\treturn res;\r\n};\r\n\n/*\r\n//\r\n// HELP for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.Source = function (params) { return yy.extend(this, params); }\r\nyy.Source.prototype.toString = function() {\r\n\tvar s = 'SOURCE';\r\n\tif(this.url) s += \" '\"+this.url+\" '\";\r\n\treturn s;\r\n}\r\n\n// SOURCE FILE\r\nyy.Source.prototype.execute = function (databaseid,params,cb) {\r\n\n\tvar res;\r\n\tloadFile(this.url, !!cb, function(data){\r\n\n\t\tres = alasql(data);\r\n\t\tif(cb) res = cb(res);\r\n\t\treturn res;\r\n\t}, function(err){\r\n\t\tthrow err;\r\n\t});\r\n\treturn res;\r\n};\r\n\n/*\r\n//\r\n// HELP for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.Require = function (params) { return yy.extend(this, params); }\r\nyy.Require.prototype.toString = function() {\r\n\tvar s = 'REQUIRE';\r\n\tif(this.paths && this.paths.length > 0) {\r\n\t\ts += this.paths.map(function(path){\r\n\t\t\treturn path.toString()\r\n\t\t}).join(',');\r\n\t}\r\n\tif(this.plugins && this.plugins.length > 0) {\r\n\t\ts += this.plugins.map(function(plugin){\r\n\t\t\treturn plugin.toUpperCase();\r\n\t\t}).join(',');\r\n\t}\r\n\treturn s;\r\n}\r\n\n/**\r\n Attach plug-in for Alasql\r\n */\r\nyy.Require.prototype.execute = function (databaseid,params,cb) {\r\n\tvar self = this;\r\n\tvar res = 0;\r\n\tvar ss = '';\r\n\n\tif(this.paths && this.paths.length > 0) {\r\n\t\tthis.paths.forEach(function(path){\r\n\t\t\tloadFile(path.value, !!cb, function(data){\r\n\t\t\t\tres++;\r\n\n\t\t\t\tss += data;\r\n\t\t\t\tif(res<self.paths.length) return;\r\n\n\t\t\t\tnew Function(\"params,alasql\",ss)(params,alasql);\r\n\t\t\t\tif(cb) res = cb(res);\r\n\t\t\t});\r\n\t\t});\r\n\t} else if(this.plugins && this.plugins.length > 0) {\r\n\n\t\tthis.plugins.forEach(function(plugin){\r\n\t\t\t// If plugin is not loaded already\r\n\t\t\tif(!alasql.plugins[plugin]) {\r\n\t\t\t\tloadFile(alasql.path+'/alasql-'+plugin.toLowerCase()+'.js', !!cb, function(data){\r\n\t\t\t\t\t// Execute all plugins at the same time\r\n\t\t\t\t\tres++;\r\n\t\t\t\t\tss += data;\r\n\t\t\t\t\tif(res<self.plugins.length) return;\r\n\n\t\t\t\t\tnew Function(\"params,alasql\",ss)(params,alasql);\r\n\t\t\t\t\talasql.plugins[plugin] = true; // Plugin is loaded\r\n\t\t\t\t\tif(cb) res = cb(res);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t} else {\r\n\t\tif(cb) res = cb(res);\t\t\t\r\n\t} \r\n\treturn res;\r\n};\r\n\n/*\r\n//\r\n// HELP for Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\nyy.Assert = function (params) { return yy.extend(this, params); }\r\nyy.Source.prototype.toString = function() {\r\n\tvar s = 'ASSERT';\r\n\tif(this.value) s += ' '+JSON.stringify(this.value);\r\n\treturn s;\r\n}\r\n\n// SOURCE FILE\r\nyy.Assert.prototype.execute = function (databaseid) {\r\n\n\tif(!deepEqual(alasql.res,this.value)) {\r\n\n\t\t\tthrow new Error((this.message||'Assert wrong')+': '+JSON.stringify(alasql.res)+' == '+JSON.stringify(this.value));\r\n\n\t}\r\n\treturn 1;\r\n};\r\n\n//\n// 91websql.js\n// WebSQL database support\n// (c) 2014, Andrey Gershun\n//\n\nvar WEBSQL = alasql.engines.WEBSQL = function (){};\n\nWEBSQL.createDatabase = function(wdbid, args, dbid, cb){\n\tvar res = 1;\n\tvar wdb = openDatabase(wdbid, args[0], args[1], args[2]);\n\tif(this.dbid) {\n\t\tvar db = alasql.createDatabase(this.dbid);\n\t\tdb.engineid = 'WEBSQL';\n\t\tdb.wdbid = wdbid;\n\t\tsb.wdb = db;\n\t}\n\tif(!wdb) {\n\t\tthrow new Error('Cannot create WebSQL database \"'+databaseid+'\"')\n\t}\n\tif(cb) cb(res);\n\treturn res;\n};\n\nWEBSQL.dropDatabase = function(databaseid){\n\tthrow new Error('This is impossible to drop WebSQL database.');\n};\n\nWEBSQL.attachDatabase = function(databaseid, dbid, args, params, cb){\n\tvar res = 1;\n\tif(alasql.databases[dbid]) {\n\t\tthrow new Error('Unable to attach database as \"'+dbid+'\" because it already exists');\n\t};\n\talasqlopenDatabase(databaseid, args[0], args[1], args[2]);\n\treturn res;\n}\n\n//\n// 91indexeddb.js\n// AlaSQL IndexedDB module\n// Date: 18.04.2015\n// (c) Andrey Gershun\n//\n\nvar IDB = alasql.engines.INDEXEDDB = function (){};\n\nif(utils.hasIndexedDB) {\n\t// For Chrome it work normally, for Firefox - simple shim\n\tif(typeof utils.global.indexedDB.webkitGetDatabaseNames == 'function') {\n\t\tIDB.getDatabaseNames = utils.global.indexedDB.webkitGetDatabaseNames.bind(utils.global.indexedDB);\n\t} else {\n\t\tIDB.getDatabaseNames = function () {\n\t\t\tvar request = {};\n\t\t\tvar result = {\n\t\t\t\tcontains:function(name){\n\t\t\t\t\treturn true; // Always return true\n\t\t\t\t},\n\t\t\t\tnotsupported: true\n\t\t\t};\n\t\t\tsetTimeout(function(){\n\t\t\t\tvar event = {target:{result:result}}\n\t\t\t\trequest.onsuccess(event);\n\t\t\t},0);\n\t\t\treturn request;\n\t\t};\n\t\tIDB.getDatabaseNamesNotSupported = true;\n\t}\n}\n\n//\n// SHOW DATABASES\n// work only in chrome\n//\nIDB.showDatabases = function(like,cb) {\n\n\tvar request = IDB.getDatabaseNames();\n\trequest.onsuccess = function(event) {\n\t\tvar dblist = event.target.result;\n\t\tif(IDB.getDatabaseNamesNotSupported) {\n\t\t\tthrow new Error('SHOW DATABASE is not supported in this browser');\n\t\t}\n\t\tvar res = [];\n\t\tif(like) {\n\t\t\tvar relike = new RegExp((like.value).replace(/\\%/g,'.*'),'g');\n\t\t}\n\t\tfor(var i=0;i<dblist.length;i++) {\n\t\t\tif(!like || dblist[i].match(relike)) {\n\t\t\t\tres.push({databaseid: dblist[i]});\n\t\t\t}\n\t\t};\n\t\tcb(res);\n\t};\n};\n\nIDB.createDatabase = function(ixdbid, args, ifnotexists, dbid, cb){\nconsole.log(arguments);\n  var indexedDB = utils.global.indexedDB;\n\tif(ifnotexists) {\n\t\tvar request2 = indexedDB.open(ixdbid,1);\n\t\trequest2.onsuccess = function(event) {\n\t\t\tevent.target.result.close();\n\t\t\tif(cb) cb(1);\n\t\t};\n\t} else {\n\t\tvar request1 = indexedDB.open(ixdbid,1);\n\t\trequest1.onupgradeneeded = function (e){\n\t\t\tconsole.log('abort');\n\t\t    e.target.transaction.abort();\n\t\t};\n\t\trequest1.onsuccess = function(e) {\n\t\t\tconsole.log('success');\n\t\t\tif(ifnotexists) {\n\t\t\t\tif(cb) cb(0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('IndexedDB: Cannot create new database \"'+ixdbid+'\" because it already exists');\n\t\t\t}\n\t\t}\n\t}\n\n};\n\nIDB.createDatabase = function(ixdbid, args, ifnotexists, dbid, cb){\n  var indexedDB = utils.global.indexedDB;\n\tif(IDB.getDatabaseNamesNotSupported) {\n\t\t// Hack for Firefox\n\t\tif(ifnotexists) {\n\n\t\t\tvar dbExists = true;\n\t\t\tvar request2 = indexedDB.open(ixdbid);\n\n\t\t\trequest2.onupgradeneeded = function (e){\n\n\t\t\t\tdbExists = false;\n        //\t\t\t    e.target.transaction.abort();\n        //\t\t\t    cb(0);\n\t\t\t};\n\t\t\trequest2.onsuccess = function(event) {\n\n\t\t\t\tevent.target.result.close();\n\t\t\t\tif(dbExists) {\n\t\t\t\t\tif(cb) cb(0);\n\t\t\t\t} else {\n\t\t\t\t\tif(cb) cb(1);\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\n\t\t\tvar request1 = indexedDB.open(ixdbid);\n\t\t\trequest1.onupgradeneeded = function (e){\n\t\t\t    e.target.transaction.abort();\n\t\t\t};\n\t\t\trequest1.onabort = function(event) {\n\t\t\t\tif(cb) cb(1);\n\t\t\t};\n\t\t\trequest1.onsuccess = function(event) {\n\t\t\t\tevent.target.result.close();\n\t\t\t\tthrow new Error('IndexedDB: Cannot create new database \"'+ixdbid+'\" because it already exists');\n        //\t\t\t\tcb(0);\n\t\t\t};\n\n\t\t}\n\n\t} else {\n\t\tvar request1 = IDB.getDatabaseNames();\n\t\trequest1.onsuccess = function(event) {\n\t\t\tvar dblist = event.target.result;\n\t\t\tif(dblist.contains(ixdbid)){\n\t\t\t\tif(ifnotexists) {\n\t\t\t\t\tif(cb) cb(0);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('IndexedDB: Cannot create new database \"'+ixdbid+'\" because it already exists');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar request2 = indexedDB.open(ixdbid,1);\n\t\t\trequest2.onsuccess = function(event) {\n\t\t\t\tevent.target.result.close();\n\t\t\t\tif(cb) cb(1);\n\t\t\t};\n\t\t};\n\t}\n};\n\nIDB.dropDatabase = function(ixdbid, ifexists, cb){\n  var indexedDB = utils.global.indexedDB;\n\tvar request1 = IDB.getDatabaseNames();\n\trequest1.onsuccess = function(event) {\n\t\tvar dblist = event.target.result;\n\t\tif(!dblist.contains(ixdbid)){\n\t\t\tif(ifexists) {\n\t\t\t\tif(cb) cb(0);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthrow new Error('IndexedDB: Cannot drop new database \"'+ixdbid+'\" because it does not exist');\n\t\t\t}\n\t\t};\n\t\tvar request2 = indexedDB.deleteDatabase(ixdbid);\n\t\trequest2.onsuccess = function(event) {\n\n\t\t\tif(cb) cb(1);\n\t\t}\n\t};\n};\n\nIDB.attachDatabase = function(ixdbid, dbid, args, params, cb) {\n\n\tif(!utils.hasIndexedDB){\n\t\tthrow new Error('The current browser does not support IndexedDB');\n\t}\n\tvar indexedDB = utils.global.indexedDB;\n\tvar request1 = IDB.getDatabaseNames();\n\trequest1.onsuccess = function(event) {\n\t\tvar dblist = event.target.result;\n\t\tif(!dblist.contains(ixdbid)){\n\t\t\tthrow new Error('IndexedDB: Cannot attach database \"'+ixdbid+'\" because it does not exist');\n\t\t};\n\t\tvar request2 = indexedDB.open(ixdbid);\n\t\trequest2.onsuccess = function(event) {\n\t\t\tvar ixdb = event.target.result;\n\t\t\tvar db = new alasql.Database(dbid || ixdbid);\n\t\t\tdb.engineid = \"INDEXEDDB\";\n\t\t\tdb.ixdbid = ixdbid;\n\t\t\tdb.tables = [];\n\t\t\tvar tblist = ixdb.objectStoreNames;\n\t\t\tfor(var i=0;i<tblist.length;i++){\n\t\t\t\tdb.tables[tblist[i]] = {};\n\t\t\t};\n\n\t\t\tevent.target.result.close();\n\t\t\tif(cb) cb(1);\n\t\t};\n\t};\n};\n\nIDB.createTable = function(databaseid, tableid, ifnotexists, cb) {\n  var indexedDB = utils.global.indexedDB;\n\n\tvar ixdbid = alasql.databases[databaseid].ixdbid;\n\n\tvar request1 = IDB.getDatabaseNames();\n\trequest1.onsuccess = function(event) {\n\t\tvar dblist = event.target.result;\n\t\tif(!dblist.contains(ixdbid)){\n\t\t\tthrow new Error('IndexedDB: Cannot create table in database \"'+ixdbid+'\" because it does not exist');\n\t\t};\n\t\tvar request2 = indexedDB.open(ixdbid);\n\t\trequest2.onversionchange = function(event) {\n\n\t\t\tevent.target.result.close();\n\t\t};\n\t\trequest2.onsuccess = function(event) {\n\t\t\tvar version = event.target.result.version;\n\t\t\tevent.target.result.close();\n\n\t\t\tvar request3 = indexedDB.open(ixdbid, version+1);\n\t\t\trequest3.onupgradeneeded = function(event) {\n\t\t\t\tvar ixdb = event.target.result;\n\n\t\t\t\tvar store = ixdb.createObjectStore(tableid, {autoIncrement:true});\n\n\t\t\t};\n\t\t\trequest3.onsuccess = function(event) {\n\n\t\t\t\tevent.target.result.close();\n\t\t\t\tif(cb) cb(1);\n\t\t\t};\n\t\t\trequest3.onerror = function(event){\n\t\t\t\tthrow event;\n\n\t\t\t}\n\t\t\trequest3.onblocked = function(event){\n\t\t\t\tthrow new Error('Cannot create table \"'+tableid+'\" because database \"'+databaseid+'\"  is blocked');\n\n\t\t\t}\n\t\t};\n\t};\n};\n\nIDB.dropTable = function (databaseid, tableid, ifexists, cb) {\n  var indexedDB = utils.global.indexedDB;\n\tvar ixdbid = alasql.databases[databaseid].ixdbid;\n\n\tvar request1 = IDB.getDatabaseNames();\n\trequest1.onsuccess = function(event) {\n\t\tvar dblist = event.target.result;\n\n\t\tif(!dblist.contains(ixdbid)){\n\t\t\tthrow new Error('IndexedDB: Cannot drop table in database \"'+ixdbid+'\" because it does not exist');\n\t\t}\n\n\t\tvar request2 = indexedDB.open(ixdbid);\n\t\trequest2.onversionchange = function(event) {\n\t\t\tevent.target.result.close();\n\t\t};\n\n\t\trequest2.onsuccess = function(event) {\n\t\t\tvar version = event.target.result.version;\n\t\t\tevent.target.result.close();\n\n\t\t\tvar request3 = indexedDB.open(ixdbid, version+1);\n\t\t\trequest3.onupgradeneeded = function(event) {\n\t\t\t\tvar ixdb = event.target.result;\n\t\t\t\tif(ixdb.objectStoreNames.contains(tableid)) {\n\t\t\t\t\tixdb.deleteObjectStore(tableid);\n\t\t\t\t\tdelete alasql.databases[databaseid].tables[tableid];\n\t\t\t\t} else {\n\t\t\t\t\tif(!ifexists) {\n\t\t\t\t\t\tthrow new Error('IndexedDB: Cannot drop table \"'+tableid+'\" because it does not exist');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\t\t\trequest3.onsuccess = function(event) {\n\n\t\t\t\tevent.target.result.close();\n\t\t\t\tif(cb) cb(1);\n\t\t\t};\n\t\t\trequest3.onerror = function(event){\n\n\t\t\t\tthrow event;\n\t\t\t}\n\t\t\trequest3.onblocked = function(event){\n\t\t\t\tthrow new Error('Cannot drop table \"'+tableid+'\" because database \"'+databaseid+'\" is blocked');\n\n\t\t\t}\n\t\t};\n\t};\n}\n\nIDB.intoTable = function(databaseid, tableid, value, columns, cb) {\n\n\t// console.trace();\n\n\tvar indexedDB = utils.global.indexedDB;\n\tvar ixdbid = alasql.databases[databaseid].ixdbid;\n\tvar request1 = indexedDB.open(ixdbid);\n\trequest1.onsuccess = function(event) {\n\t\tvar ixdb = event.target.result;\n\t\tvar tx = ixdb.transaction([tableid],\"readwrite\");\n\t\tvar tb = tx.objectStore(tableid);\n\n\t\tfor(var i=0, ilen = value.length;i<ilen;i++) {\n\t\t\ttb.add(value[i]);\n\t\t};\n\t\ttx.oncomplete = function() {\n\t\t\tixdb.close();\n\n\t\t\tif(cb) cb(ilen);\n\t\t}\n\t};\n\n};\n\nIDB.fromTable = function(databaseid, tableid, cb, idx, query){\n\n\t// console.trace();\n\tvar indexedDB = utils.global.indexedDB;\n\tvar ixdbid = alasql.databases[databaseid].ixdbid;\n\tvar request = indexedDB.open(ixdbid);\n\trequest.onsuccess = function(event) {\n\t\tvar res = [];\n\t\tvar ixdb = event.target.result;\n\n\t\tvar tx = ixdb.transaction([tableid]);\n\t\tvar store = tx.objectStore(tableid);\n\t\tvar cur = store.openCursor();\n\n\t\tcur.onblocked = function(event) {\n\n\t\t}\n\t\tcur.onerror = function(event) {\n\n\t\t}\n\t\tcur.onsuccess = function(event) {\n\n\t\t\tvar cursor = event.target.result;\n\n\t\t\tif(cursor) {\n\t\t\t\tres.push(cursor.value);\n\t\t\t\tcursor.continue();\n\t\t\t} else {\n\n\t\t\t\tixdb.close();\n\t\t\t\tif(cb) cb(res, idx, query);\n\t\t\t}\n\t\t}\n\t}\n}\n\nIDB.deleteFromTable = function(databaseid, tableid, wherefn,params, cb){\n\n\t// console.trace();\n  var indexedDB = utils.global.indexedDB;\n\tvar ixdbid = alasql.databases[databaseid].ixdbid;\n\tvar request = indexedDB.open(ixdbid);\n\trequest.onsuccess = function(event) {\n\t\tvar res = [];\n\t\tvar ixdb = event.target.result;\n\n\t\tvar tx = ixdb.transaction([tableid], 'readwrite');\n\t\tvar store = tx.objectStore(tableid);\n\t\tvar cur = store.openCursor();\n\t\tvar num = 0;\n\n\t\tcur.onblocked = function(event) {\n\n\t\t}\n\t\tcur.onerror = function(event) {\n\n\t\t}\n\t\tcur.onsuccess = function(event) {\n\n\t\t\tvar cursor = event.target.result;\n\n\t\t\tif(cursor) {\n\t\t\t\tif((!wherefn) || wherefn(cursor.value,params)) {\n\n\t\t\t\t\tcursor.delete();\n\t\t\t\t\tnum++;\n\t\t\t\t}\n\t\t\t\tcursor.continue();\n\t\t\t} else {\n\n\t\t\t\tixdb.close();\n\t\t\t\tif(cb) cb(num);\n\t\t\t}\n\t\t}\n\t}\n}\n\nIDB.updateTable = function(databaseid, tableid, assignfn, wherefn, params, cb){\n\n\t// console.trace();\n  var indexedDB = utils.global.indexedDB;\n\tvar ixdbid = alasql.databases[databaseid].ixdbid;\n\tvar request = indexedDB.open(ixdbid);\n\trequest.onsuccess = function(event) {\n\t\tvar res = [];\n\t\tvar ixdb = event.target.result;\n\n\t\tvar tx = ixdb.transaction([tableid], 'readwrite');\n\t\tvar store = tx.objectStore(tableid);\n\t\tvar cur = store.openCursor();\n\t\tvar num = 0;\n\n\t\tcur.onblocked = function(event) {\n\n\t\t}\n\t\tcur.onerror = function(event) {\n\n\t\t}\n\t\tcur.onsuccess = function(event) {\n\n\t\t\tvar cursor = event.target.result;\n\n\t\t\tif(cursor) {\n\t\t\t\tif((!wherefn) || wherefn(cursor.value,params)) {\n\n\t\t\t\t\tvar r = cursor.value;\n\t\t\t\t\tassignfn(r,params);\n\n\t\t\t\t\tcursor.update(r);\n\t\t\t\t\tnum++;\n\t\t\t\t}\n\t\t\t\tcursor.continue();\n\t\t\t} else {\n\n\t\t\t\tixdb.close();\n\t\t\t\tif(cb) cb(num);\n\t\t\t}\n\t\t}\n\t}\n}\n\n//\n// 91localstorage.js\n// localStorage and DOM-Storage engine\n// Date: 09.12.2014\n// (c) Andrey Gershun\n//\n\nvar LS = alasql.engines.LOCALSTORAGE = function (){};\n\n/**\n\tRead data from localStorage with security breaks\n\t@param key {string} Address in localStorage\n\t@return {object} JSON object\n*/\nLS.get = function(key) {\n\tvar s = localStorage.getItem(key);\n\tif(typeof s === \"undefined\") return;\n\tvar v = undefined;\n\ttry {\n\t\tv = JSON.parse(s);\n\t} catch(err) {\n\t\tthrow new Error('Cannot parse JSON object from localStorage'+s);\n\t}\n\treturn v;\n};\n\n/**\n\tStore data into localStorage with security breaks\n\t@param key {string} Address in localStorage\n\t@return {object} JSON object\n*/\nLS.set = function(key, value){\n\tif(typeof value === 'undefined') localStorage.removeItem(key);\n\telse localStorage.setItem(key,JSON.stringify(value));\n};\n\n/**\n\tStore table structure and data into localStorage\n\t@param databaseid {string} AlaSQL database id (not external localStorage)\n\t@param tableid {string} Table name\n\t@return Nothing\n*/\nLS.storeTable = function(databaseid,tableid) {\n\tvar db = alasql.databases[databaseid];\n\tvar table = db.tables[tableid];\n\t// Create empty structure for table\n\tvar tbl = {};\n\ttbl.columns = table.columns;\n\ttbl.data = table.data;\n\ttbl.identities = table.identities;\n\t// TODO: May be add indexes, objects and other fields?\n\tLS.set(db.lsdbid+'.'+tableid,tbl);\n};\n\n/**\n\tRestore table structure and data\n\t@param databaseid {string} AlaSQL database id (not external localStorage)\n\t@param tableid {string} Table name\n\t@return Nothing\n*/\nLS.restoreTable = function(databaseid,tableid) {\n\tvar db = alasql.databases[databaseid];\n\tvar tbl = LS.get(db.lsdbid+'.'+tableid);\n\tvar table = new alasql.Table();\n\tfor(var f in tbl) {\n\t\ttable[f] = tbl[f];\n\t}\n\tdb.tables[tableid] = table;\n\ttable.indexColumns();\n\t// We need to add other things here\n\treturn table;\n};\n\n/**\n\tRemove table from localStorage\n\t@param databaseid {string} AlaSQL database id (not external localStorage)\n\t@param tableid {string} Table name\n*/\n\nLS.removeTable = function(databaseid,tableid) {\n\tvar db = alasql.databases[databaseid];\n\tlocalStorage.removeItem(db.lsdbid+'.'+tableid);\n};\n\n/**\n\tCreate database in localStorage\n\t@param lsdbid {string} localStorage database id\n\t@param args {array} List of parameters (not used in localStorage)\n\t@param ifnotexists {boolean} Check if database does not exist\n\t@param databaseid {string} AlaSQL database id (not external localStorage)\n\t@param cb {function} Callback\n*/\n\nLS.createDatabase = function(lsdbid, args, ifnotexists, databaseid, cb){\n\tvar res = 1;\n\tvar ls = LS.get('alasql'); // Read list of all databases\n\tif(!(ifnotexists && ls && ls.databases && ls.databases[lsdbid])) {\n\t\tif(!ls) ls = {databases:{}}; // Empty record\n\t\tif(ls.databases && ls.databases[lsdbid]) {\n\t\t\tthrow new Error('localStorage: Cannot create new database \"'+lsdbid+'\" because it already exists');\n\t\t}\n\t\tls.databases[lsdbid] = true;\n\t\tLS.set('alasql',ls);\n\t\tLS.set(lsdbid,{databaseid:lsdbid, tables:{}}); // Create database record\n\t} else {\n\t\tres = 0;\n\t}\n\tif(cb) res = cb(res);\n\treturn res;\n};\n\n/**\n\tDrop external database\n\t@param lsdbid {string} localStorage database id\n\t@param ifexists {boolean} Check if database exists\n\t@param cb {function} Callback\n*/\nLS.dropDatabase = function(lsdbid, ifexists, cb){\n\tvar res = 1;\n\tvar ls = LS.get('alasql');\n\tif(!(ifexists && ls && ls.databases && !ls.databases[lsdbid])) {\n\n\t\t// 1. Remove record from 'alasql' record\n\t\tif(!ls) {\n\t\t\tif(!ifexists) {\n\t\t\t\tthrow new Error('There is no any AlaSQL databases in localStorage');\n\t\t\t} else {\n\t\t\t\treturn cb?cb(0):0;\n\t\t\t}\n\t\t};\n\n\t\tif(ls.databases && !ls.databases[lsdbid]) {\n\t\t\tthrow new Error('localStorage: Cannot drop database \"'+lsdbid+'\" because there is no such database');\n\t\t}\n\t\tdelete ls.databases[lsdbid];\n\t\tLS.set('alasql',ls);\n\n\t\t// 2. Remove tables definitions\n\t\tvar db = LS.get(lsdbid);\n\t\tfor(var tableid in db.tables) {\n\t\t\tlocalStorage.removeItem(lsdbid+'.'+tableid);\n\t\t}\n\n\t\t// 3. Remove database definition\n\t\tlocalStorage.removeItem(lsdbid);\n\t} else {\n\t\tres = 0;\n\t}\n\tif(cb) res = cb(res);\n\treturn res;\n};\n\n/**\n\tAttach existing localStorage database to AlaSQL database\n\t@param lsdibid {string} localStorage database id\n\t@param\n*/\n\nLS.attachDatabase = function(lsdbid, databaseid, args, params, cb){\n\tvar res = 1;\n\tif(alasql.databases[databaseid]) {\n\t\tthrow new Error('Unable to attach database as \"'+databaseid+'\" because it already exists');\n\t};\n\tif(!databaseid) databaseid = lsdbid;\n\tvar db = new alasql.Database(databaseid);\n\tdb.engineid = \"LOCALSTORAGE\";\n\tdb.lsdbid = lsdbid;\n\tdb.tables = LS.get(lsdbid).tables;\n\t// IF AUTOABORT IS OFF then copy data to memory\n\tif(!alasql.options.autocommit) {\n\t\tif(db.tables){\n\t\t\tfor(var tbid in db.tables) {\n\t\t\t\tLS.restoreTable(databaseid,tbid);\n\n\t\t\t}\n\t\t}\n\t}\n\tif(cb) res = cb(res);\n\treturn res;\n};\n\n/**\n\tShow list of databases from localStorage\n\t@param like {string} Mathing pattern\n\t@param cb {function} Callback\n*/\nLS.showDatabases = function(like, cb) {\n\tvar res = [];\n\tvar ls = LS.get('alasql');\n\tif(like) {\n\t\t// TODO: If we have a special function for LIKE patterns?\n\t\tvar relike = new RegExp(like.value.replace(/\\%/g,'.*'),'g');\n\t}\n\tif(ls && ls.databases) {\n\t\tfor(dbid in ls.databases) {\n\t\t\tres.push({databaseid: dbid});\n\t\t};\n\t\tif(like && res && res.length > 0) {\n\t\t\tres = res.filter(function(d){\n\t\t\t\treturn d.databaseid.match(relike);\n\t\t\t});\n\t\t}\n\t};\n\tif(cb) res=cb(res);\n\treturn res;\n};\n\n/**\n\tCreate table in localStorage database\n\t@param databaseid {string} AlaSQL database id\n\t@param tableid {string} Table id\n\t@param ifnotexists {boolean} If not exists flag\n\t@param cb {function} Callback\n*/\n\nLS.createTable = function(databaseid, tableid, ifnotexists, cb) {\n\tvar res = 1;\n\tvar lsdbid = alasql.databases[databaseid].lsdbid;\n\tvar tb = LS.get(lsdbid+'.'+tableid);\n\t// Check if such record exists\n\tif(tb && !ifnotexists) {\n\t\tthrow new Error('Table \"'+tableid+'\" alsready exists in localStorage database \"'+lsdbid+'\"');\n\t};\n\tvar lsdb = LS.get(lsdbid);\n\tvar table = alasql.databases[databaseid].tables[tableid];\n\n\t// TODO: Check if required\n\tlsdb.tables[tableid] = true;\n\n\tLS.set(lsdbid, lsdb);\n\tLS.storeTable(databaseid,tableid);\n\n\tif(cb) res = cb(res);\n\treturn res;\n}\n\n/**\n   Empty table and reset identities\n   @param databaseid {string} AlaSQL database id (not external localStorage)\n   @param tableid {string} Table name\n\t @param ifexists {boolean} If exists flag\n   @param cb {function} Callback\n   @return 1 on success\n*/\nLS.truncateTable = function(databaseid,tableid, ifexists, cb){\n  var res = 1\n  var lsdbid = alasql.databases[databaseid].lsdbid;\n\n\tif(alasql.options.autocommit) {\n\t\tvar lsdb = LS.get(lsdbid);\n\t} else {\n\t\tvar lsdb = alasql.databases[databaseid];\n\t}\n\n\tif(!ifexists && !lsdb.tables[tableid]) {\n\t\tthrow (new Error('Cannot truncate table \"'+tableid+'\" in localStorage, because it does not exist'));\n\t};\n\n\t//load table\n\tvar tbl = LS.restoreTable(databaseid,tableid);\n\n  //clear data from table\n  tbl.data = [];\n  //TODO reset all identities\n  //but identities are not working on LOCALSTORAGE\n  //See test 607 for details\n\n\t//store table\n\tLS.storeTable(databaseid,tableid);\n\n  if(cb) res = cb(res);\n  return res;\n}\n\n/**\n\tCreate table in localStorage database\n\t@param databaseid {string} AlaSQL database id\n\t@param tableid {string} Table id\n\t@param ifexists {boolean} If exists flag\n\t@param cb {function} Callback\n*/\n\nLS.dropTable = function (databaseid, tableid, ifexists, cb) {\n\tvar res = 1;\n\tvar lsdbid = alasql.databases[databaseid].lsdbid;\n\tif(alasql.options.autocommit) {\n\t\tvar lsdb = LS.get(lsdbid);\n\t} else {\n\t\tvar lsdb = alasql.databases[databaseid];\n\t}\n\tif(!ifexists && !lsdb.tables[tableid]) {\n\t\tthrow new Error('Cannot drop table \"'+tableid+'\" in localStorage, because it does not exist');\n\t};\n\tdelete lsdb.tables[tableid];\n\tLS.set(lsdbid, lsdb);\n//\tlocalStorage.removeItem(lsdbid+'.'+tableid);\n\tLS.removeTable(databaseid,tableid);\n\tif(cb) res = cb(res);\n\treturn res;\n}\n\n/**\n\tRead all data from table\n*/\n\nLS.fromTable = function(databaseid, tableid, cb, idx, query) {\n\n\tvar lsdbid = alasql.databases[databaseid].lsdbid;\n//\tvar res = LS.get(lsdbid+'.'+tableid);\n\n\tvar res = LS.restoreTable(databaseid,tableid).data;\n\n\tif(cb) res = cb(res, idx, query);\n\treturn res;\n};\n\n/**\n\tInsert data into the table\n\t@param databaseid {string} Database id\n\t@param tableid {string} Table id\n\t@param value {array} Array of values\n\t@param columns {array} Columns (not used)\n\t@param cb {function} Callback\n*/\n\nLS.intoTable = function(databaseid, tableid, value, columns, cb) {\n\n\tvar lsdbid = alasql.databases[databaseid].lsdbid;\n\tvar res = value.length;\n//\tvar tb = LS.get(lsdbid+'.'+tableid);\n\tvar tb = LS.restoreTable(databaseid,tableid);\n\tif(!tb.data) tb.data = [];\n\ttb.data = tb.data.concat(value);\n//\tLS.set(lsdbid+'.'+tableid, tb);\n\tLS.storeTable(databaseid,tableid);\n\n\tif(cb) res = cb(res);\n\n\treturn res;\n};\n\n/**\n\tLaad data from table\n*/\nLS.loadTableData = function(databaseid, tableid){\n\tvar db = alasql.databases[databaseid];\n\tvar lsdbid = alasql.databases[databaseid].lsdbid;\n\tLS.restoreTable(databaseid,tableid);\n//\tdb.tables[tableid].data = LS.get(lsdbid+'.'+tableid);\n}\n\n/**\n\tSave data to the table\n*/\n\nLS.saveTableData = function(databaseid, tableid){\n\tvar db = alasql.databases[databaseid];\n\tvar lsdbid = alasql.databases[databaseid].lsdbid;\n\tLS.storeTable(lsdbid,tableid);\n//\tLS.set(lsdbid+'.'+tableid,db.tables[tableid].data);\n\tdb.tables[tableid].data = undefined;\n}\n\n/**\n\tCommit\n*/\n\nLS.commit = function(databaseid, cb) {\n\n\tvar db = alasql.databases[databaseid];\n\tvar lsdbid = alasql.databases[databaseid].lsdbid;\n\tvar lsdb = {databaseid:lsdbid, tables:{}};\n\tif(db.tables) {\n\t\tfor(var tbid in db.tables) {\n\t\t\t// TODO: Question - do we need this line\n\t\t\tlsdb.tables[tbid] = true;\n\t\t\tLS.storeTable(databaseid,tbid);\n\n\t\t};\n\t}\n\tLS.set(lsdbid,lsdb);\n\treturn cb?cb(1):1;\n};\n\n/**\n\tAlias BEGIN = COMMIT\n*/\nLS.begin = LS.commit;\n\n/**\n\tROLLBACK\n*/\n\nLS.rollback = function(databaseid, cb) {\n\n\t// This does not work and should be fixed\n\t// Plus test 151 and 231\n\n\treturn;\n\n\tvar db = alasql.databases[databaseid];\n\tdb.dbversion++;\n\n\tvar lsdbid = alasql.databases[databaseid].lsdbid;\n\tvar lsdb = LS.get(lsdbid);\n//\tif(!alasql.options.autocommit) {\n\n\tdelete alasql.databases[databaseid];\n\talasql.databases[databaseid] = new alasql.Database(databaseid);\n\textend(alasql.databases[databaseid], lsdb);\n\talasql.databases[databaseid].databaseid = databaseid;\n\talasql.databases[databaseid].engineid = 'LOCALSTORAGE';\n\n\t\tif(lsdb.tables){\n\t\t\tfor(var tbid in lsdb.tables) {\n\n\t\t\t\t\tLS.restoreTable(databaseid,tbid);\n\n\t\t\t\t// index columns\n\t\t\t\t// convert types\n\t\t\t}\n\t\t}\n//\t}\n\n}\n\n//\n// 91websql.js\n// WebSQL database support\n// (c) 2014, Andrey Gershun\n//\n\nvar SQLITE = alasql.engines.SQLITE = function (){};\n\nSQLITE.createDatabase = function(wdbid, args, ifnotexists, dbid, cb){\n\tthrow new Error('Connot create SQLITE database in memory. Attach it.');\n};\n\nSQLITE.dropDatabase = function(databaseid){\n\tthrow new Error('This is impossible to drop SQLite database. Detach it.');\n};\n\nSQLITE.attachDatabase = function(sqldbid, dbid, args, params, cb){\n\tvar res = 1;\n\tif(alasql.databases[dbid]) {\n\t\tthrow new Error('Unable to attach database as \"'+dbid+'\" because it already exists');\n\t};\n\n\tif(args[0] && (args[0] instanceof yy.StringValue)\n\t\t|| (args[0] instanceof yy.ParamValue)) {\n\n\t\tif(args[0] instanceof yy.StringValue) {\n\t\t\tvar value = args[0].value;\n\t\t} else if(args[0] instanceof yy.ParamValue) {\n\t\t\tvar value = params[args[0].param];\n\t\t}\n\t\talasql.utils.loadBinaryFile(value,true,function(data){\n\t\t\tvar db = new alasql.Database(dbid || sqldbid);\n\t\t\tdb.engineid = \"SQLITE\";\n\t\t\tdb.sqldbid = sqldbid;\n\t\t\tvar sqldb = db.sqldb = new SQL.Database(data);\n\t\t\tdb.tables = [];\n\t\t\tvar tables = sqldb.exec(\"SELECT * FROM sqlite_master WHERE type='table'\")[0].values;\n\n\t\t   \ttables.forEach(function(tbl){\n\t\t   \t\tdb.tables[tbl[1]] = {};\n\t\t   \t\tvar columns = db.tables[tbl[1]].columns = [];\n\t\t   \t\tvar ast = alasql.parse(tbl[4]);\n\n\t\t   \t\tvar coldefs = ast.statements[0].columns;\n\t\t   \t\tif(coldefs && coldefs.length>0) {\n\t\t   \t\t\tcoldefs.forEach(function(cd){\n\t\t\t   \t\t\tcolumns.push(cd);\n\t\t   \t\t\t});\n\t\t   \t\t}\n\n\t\t   \t});\n\n\t\t   \tcb(1);\n\t\t}, function(err){\n\t\t\tthrow new Error('Cannot open SQLite database file \"'+args[0].value+'\"');\n\t\t})\n\t\treturn res;\n\t} else {\n\t\tthrow new Error('Cannot attach SQLite database without a file');\n\t};\n\n\treturn res;\n}\n\nSQLITE.fromTable = function(databaseid, tableid, cb, idx, query){\n\tvar data = alasql.databases[databaseid].sqldb.exec(\"SELECT * FROM \"+tableid);\n\tvar columns = query.sources[idx].columns = [];\n\tif(data[0].columns.length > 0) {\n\t\tdata[0].columns.forEach(function(columnid) {\n\t\t\tcolumns.push({columnid:columnid});\n\t\t});\n\t};\n\n\tvar res = [];\n\tif(data[0].values.length > 0) {\n\t\tdata[0].values.forEach(function(d){\n\t\t\tvar r = {};\n\t\t\tcolumns.forEach(function(col,idx){\n\t\t\t\tr[col.columnid] = d[idx];\n\t\t\t});\n\t\t\tres.push(r);\n\t\t});\n\t}\n\tif(cb) cb(res, idx, query);\n};\n\nSQLITE.intoTable = function(databaseid, tableid, value, columns, cb) {\n\tvar sqldb = alasql.databases[databaseid].sqldb;\n\tfor(var i=0, ilen = value.length;i<ilen;i++) {\n\t\tvar s = \"INSERT INTO \"+tableid+\" (\";\n\t\tvar d = value[i];\n\t\tvar keys = Object.keys(d);\n\t\ts += keys.join(\",\");\n\t\ts += \") VALUES (\";\n\t\ts += keys.map(function(k){\n\t\t\tv = d[k];\n\t\t\tif(typeof v == 'string') v = \"'\"+v+\"'\";\n\t\t\treturn v;\n\t\t}).join(\",\");\n\t\ts += \")\";\n\t\tsqldb.exec(s);\n\t};\n\tvar res = ilen;\n\tif(cb) cb(res);\n\treturn res;\n};\n\n//\n// 91localstorage.js\n// localStorage and DOM-Storage engine\n// Date: 09.12.2014\n// (c) Andrey Gershun\n//\n\nvar FS = alasql.engines.FILESTORAGE = alasql.engines.FILE = function (){};\n\nFS.createDatabase = function(fsdbid, args, ifnotexists, dbid, cb){\n\n\tvar res = 1;\n\tvar filename = args[0].value;\n\n\talasql.utils.fileExists(filename, function(fex){\n\n\t\tif(fex) {\n\t\t\tif(ifnotexists) {\n\t\t\t\tres = 0;\n\t\t\t\tif(cb) res = cb(res);\n\t\t\t\treturn res;\n\t\t\t} else {\n\t\t\t\tthrow new Error('Cannot create new database file, because it alreagy exists');\n\t\t\t} \n\t\t} else {\n\t\t\tvar data = {tables:{}};\n\t\t\talasql.utils.saveFile(filename,JSON.stringify(data),function(data){\n\t\t\t\tif(cb) res = cb(res);\n\t\t\t});\n\t\t}\n\t});\n\treturn res;\n};\n\nFS.dropDatabase = function(fsdbid, ifexists, cb){\n\tvar res;\n\tvar filename = fsdbid.value;\n\n\talasql.utils.fileExists(filename, function(fex){\n\t\tif(fex) {\n\t\t\tres = 1;\n\t\t\talasql.utils.deleteFile(filename, function(){\n\t\t\t\tres = 1;\n\t\t\t\tif(cb) res = cb(res);\n\t\t\t});\n\t\t} else {\n\t\t\tif(!ifexists) {\n\t\t\t\tthrow new Error('Cannot drop database file, because it does not exist');\n\t\t\t}\n\t\t\tres = 0;\n\t\t\tif(cb) res = cb(res);\n\t\t}\n\t});\n\treturn res;\n};\n\nFS.attachDatabase = function(fsdbid, dbid, args, params, cb){\n\n\tvar res = 1;\n\tif(alasql.databases[dbid]) {\n\t\tthrow new Error('Unable to attach database as \"'+dbid+'\" because it already exists');\n\t};\n\tvar db = new alasql.Database(dbid || fsdbid);\n\tdb.engineid = \"FILESTORAGE\";\n//\tdb.fsdbid = fsdbid;\n\tdb.filename = args[0].value;\n\tloadFile(db.filename, !!cb, function(s){\n\t\ttry {\n\t\t\tdb.data = JSON.parse(s);\n\t\t} catch(err) {\n\t\t\tthrow new Error('Data in FileStorage database are corrupted');\n\t\t}\n\t\tdb.tables = db.data.tables;\n\t\t// IF AUTOCOMMIT IS OFF then copy data to memory\n\t\tif(!alasql.options.autocommit) {\n\t\t\tif(db.tables){\n\t\t\t\tfor(var tbid in db.tables) {\n\t\t\t\t\tdb.tables[tbid].data = db.data[tbid];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(cb) res = cb(res);\n\t});\n\treturn res;\n};\n\nFS.createTable = function(databaseid, tableid, ifnotexists, cb) {\n\tvar db = alasql.databases[databaseid];\n\tvar tb = db.data[tableid];\n\tvar res = 1;\n\n\tif(tb && !ifnotexists) {\n\t\tthrow new Error('Table \"'+tableid+'\" alsready exists in the database \"'+fsdbid+'\"');\n\t};\n\tvar table = alasql.databases[databaseid].tables[tableid];\n\tdb.data.tables[tableid] = {columns:table.columns};\n\tdb.data[tableid] = [];\n\n\tFS.updateFile(databaseid);\t\n\n\tif(cb) cb(res);\n\treturn res;\n};\n\nFS.updateFile = function(databaseid) {\n\n\tvar db = alasql.databases[databaseid];\n\tif(db.issaving) {\n\t\tdb.postsave = true;\n\t\treturn;\n\t};\n\tdb.issaving = true;\n\tdb.postsave = false;\n\talasql.utils.saveFile(db.filename, JSON.stringify(db.data), function(){\n\t\tdb.issaving = false;\n\n\t\tif(db.postsave) {\n\t\t\tsetTimeout(function(){\n\t\t\t\tFS.updateFile(databaseid);\n\t\t\t},50); // TODO Test with different timeout parameters\n\t\t};\n\t});\n};\n\nFS.dropTable = function (databaseid, tableid, ifexists, cb) {\n\tvar res = 1;\n\tvar db = alasql.databases[databaseid];\n\tif(!ifexists && !db.tables[tableid]) {\n\t\tthrow new Error('Cannot drop table \"'+tableid+'\" in fileStorage, because it does not exist');\n\t};\n\tdelete db.tables[tableid];\n\tdelete db.data.tables[tableid];\n\tdelete db.data[tableid];\n\tFS.updateFile(databaseid);\t\n\tif(cb) cb(res);\n\treturn res;\n}\n\nFS.fromTable = function(databaseid, tableid, cb, idx, query) {\n\n\tvar db = alasql.databases[databaseid];\n\tvar res = db.data[tableid];\n\tif(cb) res = cb(res, idx, query);\n\treturn res;\n};\n\nFS.intoTable = function(databaseid, tableid, value, columns, cb) {\n\tvar db = alasql.databases[databaseid];\n\tvar res = value.length;\n\tvar tb = db.data[tableid];\n\tif(!tb) tb = [];\n\tdb.data[tableid] = tb.concat(value);\n\tFS.updateFile(databaseid);\t\n\tif(cb) cb(res);\n\treturn res;\n};\n\nFS.loadTableData = function(databaseid, tableid){\n\tvar db = alasql.databases[databaseid];\n\tdb.tables[tableid].data = db.data[tableid];\n}\n\nFS.saveTableData = function(databaseid, tableid){\n\tvar db = alasql.databases[databaseid];\n\tdb.data[tableid] = db.tables[tableid].data;\n\tdb.tables[tableid].data = null;\n\tFS.updateFile(databaseid);\t\n}\n\nFS.commit = function(databaseid, cb) {\n\n\tvar db = alasql.databases[databaseid];\n\tvar fsdb = {tables:{}};\n\tif(db.tables) {\n\t\tfor(var tbid in db.tables) {\n\t\t\tdb.data.tables[tbid] = {columns: db.tables[tbid].columns};\n\t\t\tdb.data[tbid] = db.tables[tbid].data;\n\t\t};\n\t};\n\tFS.updateFile(databaseid);\n\treturn cb?cb(1):1;\n};\n\nFS.begin = FS.commit;\n\nFS.rollback = function(databaseid, cb) {\n\tvar res = 1;\n\tvar db = alasql.databases[databaseid];\n\tdb.dbversion++;\n\n//\tvar lsdbid = alasql.databases[databaseid].lsdbid;\n//\tlsdb = LS.get(lsdbid);\n\twait();\n\tfunction wait() {\n\t\tsetTimeout(function(){\n\t\t\tif(db.issaving) {\n\t\t\t\treturn wait();\n\t\t\t} else {\n\t\t\t\talasql.loadFile(db.filename,!!cb,function(data){\n\t\t\t\t\tdb.data = data;\n\t\t\t\t\tdb.tables = {};\n\t\t\t\t\tfor(var tbid in db.data.tables) {\n\t\t\t\t\t\tvar tb = new alasql.Table({columns: db.data.tables[tbid].columns});\n\t\t\t\t\t\textend(tb,db.data.tables[tbid]);\n\t\t\t\t\t\tdb.tables[tbid] = tb;\n\t\t\t\t\t\tif(!alasql.options.autocommit) {\n\t\t\t\t\t\t\tdb.tables[tbid].data = db.data[tbid];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdb.tables[tbid].indexColumns();\n\n\t\t\t\t\t\t// index columns\n\t\t\t\t\t\t// convert types\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete alasql.databases[databaseid];\n\t\t\t\t\talasql.databases[databaseid] = new alasql.Database(databaseid);\n\t\t\t\t\textend(alasql.databases[databaseid], db);\n\t\t\t\t\talasql.databases[databaseid].engineid = 'FILESTORAGE';\n\t\t\t\t\talasql.databases[databaseid].filename = db.filename;\n\n\t\t\t\t\tif(cb) res = cb(res);\n\t\t\t\t\t// Todo: check why no return\n\t\t\t\t});\n\t\t\t};\n\t\t},100);\t\t\n\t};\n\n}\n\nif(utils.isBrowser && !utils.isWebWorker) {\n\nalasql = alasql||false;\n\nif(!alasql){\n\tthrow new Error('alasql was not found');\n}\n\nalasql.worker = function(){\n\tthrow new Error('Can find webworker in this enviroment');\n\n}\n\nif(typeof(Worker) !== \"undefined\") {\n\n\talasql.worker = function(path, paths, cb) {\n\t//\tvar path;\n\t\tif(path === true){\n\t\t\tpath = undefined;\n\t\t}\n\n\t\tif (typeof path === \"undefined\") {\n\t\t\tvar sc = document.getElementsByTagName('script');\n\t\t\tfor(var i=0;i<sc.length;i++) {\n\t\t\t\tif (sc[i].src.substr(-16).toLowerCase() === 'alasql-worker.js') {\n\t\t\t\t\tpath = sc[i].src.substr(0,sc[i].src.length-16)+'alasql.js'; \n\t\t\t\t\tbreak;\n\t\t\t\t} else if (sc[i].src.substr(-20).toLowerCase() === 'alasql-worker.min.js') {\n\t\t\t\t\tpath = sc[i].src.substr(0,sc[i].src.length-20)+'alasql.min.js';\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (sc[i].src.substr(-9).toLowerCase() === 'alasql.js') {\n\t\t\t\t\tpath = sc[i].src; \n\t\t\t\t\tbreak;\n\t\t\t\t} else if (sc[i].src.substr(-13).toLowerCase() === 'alasql.min.js') {\n\t\t\t\t\tpath = sc[i].src.substr(0,sc[i].src.length-13)+'alasql.min.js'; \n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(typeof path === \"undefined\") {\n\t\t\tthrow new Error('Path to alasql.js is not specified');\n\t\t} else if(path !== false) {\n\n\t\t\tvar js = \"importScripts('\";\n\t\t\t\tjs += path;\n\t\t\t\tjs+=\"');self.onmessage = function(event) {\"+\n\t\t\t\"alasql(event.data.sql,event.data.params, function(data){\"+\n\t\t\t\"postMessage({id:event.data.id, data:data});});}\";\n\n\t\t\tvar blob = new Blob([js], {\"type\": \"text\\/plain\"});\n\t\t\talasql.webworker = new Worker(URL.createObjectURL(blob));\n\n\t\t\talasql.webworker.onmessage = function(event) {\n\t\t\t\tvar id = event.data.id;\n\n\t\t\t\talasql.buffer[id](event.data.data);\n\t\t\t\tdelete alasql.buffer[id];\n\t\t\t};\n\n\t\t\talasql.webworker.onerror = function(e){\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\tif(arguments.length > 1) {\n\t\t\t\tvar sql = 'REQUIRE ' + paths.map(function(p){\n\t\t\t\t\treturn '\"'+p+'\"';\n\t\t\t\t}).join(\",\");\n\t\t\t\talasql(sql,[],cb);\n\t\t\t}\n\n\t\t} else if(path === false) {\n\t\t\tdelete alasql.webworker;\n\t\t\treturn;\n\t\t}\n\t};\n\n}\n\n/* FileSaver.js\n * A saveAs() FileSaver implementation.\n * 1.3.2\n * 2016-06-16 18:25:19\n *\n * By Eli Grey, http://eligrey.com\n * License: MIT\n *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md\n */\n\n/*global self */\n/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\n\n/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */\n\nvar saveAs = saveAs || (function(view) {\n\t\"use strict\";\n\t// IE <10 is explicitly unsupported\n\tif (typeof view === \"undefined\" || typeof navigator !== \"undefined\" && /MSIE [1-9]\\./.test(navigator.userAgent)) {\n\t\treturn;\n\t}\n\tvar\n\t\t  doc = view.document\n\t\t  // only get URL when necessary in case Blob.js hasn't overridden it yet\n\t\t, get_URL = function() {\n\t\t\treturn view.URL || view.webkitURL || view;\n\t\t}\n\t\t, save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\n\t\t, can_use_save_link = \"download\" in save_link\n\t\t, click = function(node) {\n\t\t\tvar event = new MouseEvent(\"click\");\n\t\t\tnode.dispatchEvent(event);\n\t\t}\n\t\t, is_safari = /constructor/i.test(view.HTMLElement) || view.safari\n\t\t, is_chrome_ios =/CriOS\\/[\\d]+/.test(navigator.userAgent)\n\t\t, throw_outside = function(ex) {\n\t\t\t(view.setImmediate || view.setTimeout)(function() {\n\t\t\t\tthrow ex;\n\t\t\t}, 0);\n\t\t}\n\t\t, force_saveable_type = \"application/octet-stream\"\n\t\t// the Blob API is fundamentally broken as there is no \"downloadfinished\" event to subscribe to\n\t\t, arbitrary_revoke_timeout = 1000 * 40 // in ms\n\t\t, revoke = function(file) {\n\t\t\tvar revoker = function() {\n\t\t\t\tif (typeof file === \"string\") { // file is an object URL\n\t\t\t\t\tget_URL().revokeObjectURL(file);\n\t\t\t\t} else { // file is a File\n\t\t\t\t\tfile.remove();\n\t\t\t\t}\n\t\t\t};\n\t\t\tsetTimeout(revoker, arbitrary_revoke_timeout);\n\t\t}\n\t\t, dispatch = function(filesaver, event_types, event) {\n\t\t\tevent_types = [].concat(event_types);\n\t\t\tvar i = event_types.length;\n\t\t\twhile (i--) {\n\t\t\t\tvar listener = filesaver[\"on\" + event_types[i]];\n\t\t\t\tif (typeof listener === \"function\") {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlistener.call(filesaver, event || filesaver);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\tthrow_outside(ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t, auto_bom = function(blob) {\n\t\t\t// prepend BOM for UTF-8 XML and text/* types (including HTML)\n\t\t\t// note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n\t\t\tif (/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n\t\t\t\treturn new Blob([String.fromCharCode(0xFEFF), blob], {type: blob.type});\n\t\t\t}\n\t\t\treturn blob;\n\t\t}\n\t\t, FileSaver = function(blob, name, no_auto_bom) {\n\t\t\tif (!no_auto_bom) {\n\t\t\t\tblob = auto_bom(blob);\n\t\t\t}\n\t\t\t// First try a.download, then web filesystem, then object URLs\n\t\t\tvar\n\t\t\t\t  filesaver = this\n\t\t\t\t, type = blob.type\n\t\t\t\t, force = type === force_saveable_type\n\t\t\t\t, object_url\n\t\t\t\t, dispatch_all = function() {\n\t\t\t\t\tdispatch(filesaver, \"writestart progress write writeend\".split(\" \"));\n\t\t\t\t}\n\t\t\t\t// on any filesys errors revert to saving with object URLs\n\t\t\t\t, fs_error = function() {\n\t\t\t\t\tif ((is_chrome_ios || (force && is_safari)) && view.FileReader) {\n\t\t\t\t\t\t// Safari doesn't allow downloading of blob urls\n\t\t\t\t\t\tvar reader = new FileReader();\n\t\t\t\t\t\treader.onloadend = function() {\n\t\t\t\t\t\t\tvar url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');\n\t\t\t\t\t\t\tvar popup = view.open(url, '_blank');\n\t\t\t\t\t\t\tif(!popup) view.location.href = url;\n\t\t\t\t\t\t\turl=undefined; // release reference before dispatching\n\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\tdispatch_all();\n\t\t\t\t\t\t};\n\t\t\t\t\t\treader.readAsDataURL(blob);\n\t\t\t\t\t\tfilesaver.readyState = filesaver.INIT;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// don't create more object URLs than needed\n\t\t\t\t\tif (!object_url) {\n\t\t\t\t\t\tobject_url = get_URL().createObjectURL(blob);\n\t\t\t\t\t}\n\t\t\t\t\tif (force) {\n\t\t\t\t\t\tview.location.href = object_url;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar opened = view.open(object_url, \"_blank\");\n\t\t\t\t\t\tif (!opened) {\n\t\t\t\t\t\t\t// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html\n\t\t\t\t\t\t\tview.location.href = object_url;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\tdispatch_all();\n\t\t\t\t\trevoke(object_url);\n\t\t\t\t}\n\t\t\t;\n\t\t\tfilesaver.readyState = filesaver.INIT;\n\n\t\t\tif (can_use_save_link) {\n\t\t\t\tobject_url = get_URL().createObjectURL(blob);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tsave_link.href = object_url;\n\t\t\t\t\tsave_link.download = name;\n\t\t\t\t\tclick(save_link);\n\t\t\t\t\tdispatch_all();\n\t\t\t\t\trevoke(object_url);\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfs_error();\n\t\t}\n\t\t, FS_proto = FileSaver.prototype\n\t\t, saveAs = function(blob, name, no_auto_bom) {\n\t\t\treturn new FileSaver(blob, name || blob.name || \"download\", no_auto_bom);\n\t\t}\n\t;\n\t// IE 10+ (native saveAs)\n\tif (typeof navigator !== \"undefined\" && navigator.msSaveOrOpenBlob) {\n\t\treturn function(blob, name, no_auto_bom) {\n\t\t\tname = name || blob.name || \"download\";\n\n\t\t\tif (!no_auto_bom) {\n\t\t\t\tblob = auto_bom(blob);\n\t\t\t}\n\t\t\treturn navigator.msSaveOrOpenBlob(blob, name);\n\t\t};\n\t}\n\n\tFS_proto.abort = function(){};\n\tFS_proto.readyState = FS_proto.INIT = 0;\n\tFS_proto.WRITING = 1;\n\tFS_proto.DONE = 2;\n\n\tFS_proto.error =\n\tFS_proto.onwritestart =\n\tFS_proto.onprogress =\n\tFS_proto.onwrite =\n\tFS_proto.onabort =\n\tFS_proto.onerror =\n\tFS_proto.onwriteend =\n\t\tnull;\n\n\treturn saveAs;\n}(\n\t   typeof self !== \"undefined\" && self\n\t|| typeof window !== \"undefined\" && window\n\t|| this.content\n));\n// `self` is undefined in Firefox for Android content script context\n// while `this` is nsIContentFrameMessageManager\n// with an attribute `content` that corresponds to the window\n\nif (typeof module !== \"undefined\" && module.exports) {\n  module.exports.saveAs = saveAs;\n} else if ((typeof define !== \"undefined\" && define !== null) && (define.amd !== null)) {\n  define(\"FileSaver.js\", function() {\n    return saveAs;\n  });\n}\n/*\r\n//\r\n// Last part of Alasql.js\r\n// Date: 03.11.2014\r\n// (c) 2014, Andrey Gershun\r\n//\r\n*/\r\n\n// This is a final part of Alasql\r\n\n/*only-for-browser/*\r\nif(utils.isCordova || utils.isMeteorServer || utils.isNode ){\r\n  console.warn('It looks like you are using the browser version of AlaSQL. Please use the alasql.fs.js file instead.')\r\n}\r\n//*/\r\n\n// FileSaveAs\r\nalasql.utils.saveAs = saveAs;\r\n\n};\r\n\n// Create default database\r\nnew Database(\"alasql\");\r\n\n// Set default database\r\nalasql.use(\"alasql\");\r\n\nreturn alasql;\r\n}));\r\n\n","/home/travis/build/npmtest/node-npmtest-alasql/node_modules/alasql/bin/alaserver.js":"#!/usr/bin/env node\n//\n// alaserver.js = Alasql Server\n// Date: 25.11.2014\n// (c) 2014, Andrey Gershun\n//\n\nvar alasql = require('alasql');\nvar http = require('http');\nvar url = require('url');\nvar port = (process.argv[2] || 1337)|0;\nif(!port) {\n\tthrow new Error('Wrong port number '+process.argv[3]);\n}\n\nhttp.createServer(function (req, res) {\n\tvar sql = decodeURI(url.parse(req.url).search).substr(1);\n\tvar a = '';\n\ttry {\n\t\ta = alasql(sql);\n\t} catch(err) {\n\t\ta = err.toString();\n\t};\n  \tres.writeHead(200, {'Content-Type': 'application/json'});\n  \tres.end(JSON.stringify(a));\n}).listen(port, '127.0.0.1');\n\nconsole.log('Server running at http://127.0.0.1:'+port+'/');\n","/home/travis/build/npmtest/node-npmtest-alasql/node_modules/alasql/bin/alasql-cli.js":"#!/usr/bin/env node\n //\n// Command line interface for Alasql\n// Version: 0.2.2\n// Date: 28.07.2015\n// (c) 2014-2015, Andrey Gershun & M. Rangel Wulff\n//\n\nlet alasql = require('alasql');\nlet path = require('path');\nlet fs = require('fs');\nlet stdin = process.openStdin();\nlet yargs = require('yargs')\n\t.strict()\n\t.usage('AlaSQL command-line utility (version ' + alasql.version + ')\\n\\nUsage: $0 [options] [sql] [params]')\n\n.example('$0 \"sql-statement\"', 'Run SQL statement and output result as JSON')\n\t.example('')\n\t.example('$0 \\'value of select 2+?\\' 40', 'Outputs 42')\n\t.example('')\n\t.example('$0 \\'select count(*) from txt()\\' < city.txt', 'Count lines in city.txt')\n\t.example('')\n\t.example('$0 \\'select * into xlsx(\"city.xlsx\") from txt(\"city.txt\")\\'', 'Convert from txt to xlsx')\n\t.example('')\n\t.example('$0 --file file.sql France 1960', 'Run SQL from file with 2 parameters')\n\n.version('v', 'Echo AlaSQL version', alasql.version)\n\t.alias('v', 'version')\n\n.boolean('m')\n\t.describe('m', 'Minify json output')\n\t.alias('m', 'minify')\n\n.describe('f', 'Load SQL from file')\n\t.alias('f', 'file')\n\t.nargs('f', 1)\n\t.normalize('f')\n\n.help('h')\n\t.alias('h', 'help')\n\n.epilog('\\nMore information about the library: www.alasql.org')\n\nlet argv = yargs.argv;\nlet sql = '';\nlet params = [];\nlet pipedData = ''\nstdin.on('data', function (chunk) {\n\tpipedData += chunk;\n});\n\nif (argv.v) {\n\tconsole.log(alasql.version);\n\tprocess.exit(0);\n}\n\nif (argv.f) {\n\tif (!fs.existsSync(argv.f)) {\n\t\tconsole.error('Error: file not found');\n\t\tprocess.exit(1);\n\t}\n\n\tif (isDirectory(argv.f)) {\n\t\tconsole.error('Error: file expected but directory found');\n\t\tprocess.exit(1);\n\t}\n\n\tsql = fs.readFileSync(argv.f, 'utf8').toString();\n\texecute(sql, argv._);\n\n} else {\n\tsql = argv._.shift() || '';\n\n\t// if data is not piped\n\tif (Boolean(process.stdin.isTTY)) {\n\t\texecute(sql, argv._);\n\t}\n}\n\n// if data is piped\nstdin.on('end', function () {\n\texecute(pipedData, argv._);\n});\n\n/**\n * Execute SQL query\n *\n * @sql {String} SQL query\n * @param {String} Parameters\n * @returns {null} Result will be printet to console.log\n */\nfunction execute(sql, params) {\n\n\tif (0 === sql.trim().length) {\n\t\tconsole.error(\"\\nNo SQL to process\\n\");\n\t\tyargs.showHelp();\n\t\tprocess.exit(1);\n\t}\n\n\tfor (var i = 1; i < params.length; i++) {\n\t\tvar a = params[i];\n\t\tif (a[0] !== '\"' && a[0] !== \"'\") {\n\t\t\tif (+a == a) { // jshint ignore:line\n\t\t\t\tparams[i] = +a;\n\t\t\t}\n\t\t}\n\t}\n\n\talasql.promise(sql, params)\n\t\t.then(function (res) {\n\t\t\tif (!alasql.options.stdout) {\n\t\t\t\tconsole.log(formatOutput(res));\n\t\t\t}\n\t\t\tprocess.exit(0);\n\t\t}).catch(function (err) {\n\t\t\tlet errorJsonObj = JSON.parse(JSON.stringify(err, Object.getOwnPropertyNames(err)));\n\t\t\tconsole.error(formatOutput({\n\t\t\t\terror: errorJsonObj\n\t\t\t}));\n\t\t\tprocess.exit(1);\n\t\t});\n}\n\n/**\n * Is this padh a Directory\n *\n * @param {String} filePath\n * @returns {Boolean}\n */\nfunction isDirectory(filePath) {\n\tvar isDir = false;\n\ttry {\n\t\tvar absolutePath = path.resolve(filePath);\n\t\tisDir = fs.lstatSync(absolutePath).isDirectory();\n\t} catch (e) {\n\t\tisDir = e.code === 'ENOENT';\n\t}\n\treturn isDir;\n}\n\n\n/**\n * Format output\n *\n * @param {Object} Object to be formatted according to -p flag\n * @returns {JSON string}\n */\nfunction formatOutput(obj) {\n\tif (argv.m) {\n\t\treturn JSON.stringify(obj);\n\t}\n\treturn JSON.stringify(obj, null, 2);\n}\n","/home/travis/build/npmtest/node-npmtest-alasql/node_modules/alasql/utils/2repl.js":"var fs = require('fs');\nvar alasql = require('..');\nvar s1 = fs.readFileSync('../dist/alasql.min.js').toString();\nvar len1 = s1.length;\n\nvar dict = {\n\t\"toJavaScript\":\"JS\",\n\t\"databases\":\"DB\",\n\t\"expression\": 'EX',\n\t\"extend\": 'X',\n\t\"ParamValue\": 'PV',\n};\n\nfor(var d in dict) {\n\ts2 = s1.replace(new RegExp('/.'+d,'g'),'.'+dict[d]);\n}\n\nvar len2 = s2.length;\n\n\nconsole.log(len1,len2)\n","/home/travis/build/npmtest/node-npmtest-alasql/node_modules/alasql/utils/a.js":"/* parser generated by jison 0.4.15 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,10],$V1=[1,95],$V2=[1,96],$V3=[1,6],$V4=[1,38],$V5=[1,71],$V6=[1,68],$V7=[1,87],$V8=[1,86],$V9=[1,63],$Va=[1,94],$Vb=[1,78],$Vc=[1,76],$Vd=[1,60],$Ve=[1,64],$Vf=[1,58],$Vg=[1,62],$Vh=[1,56],$Vi=[1,66],$Vj=[1,57],$Vk=[1,61],$Vl=[1,75],$Vm=[1,69],$Vn=[1,77],$Vo=[1,79],$Vp=[1,80],$Vq=[1,73],$Vr=[1,74],$Vs=[1,72],$Vt=[1,81],$Vu=[1,82],$Vv=[1,83],$Vw=[1,84],$Vx=[1,85],$Vy=[1,91],$Vz=[1,59],$VA=[1,70],$VB=[1,65],$VC=[1,89],$VD=[1,90],$VE=[1,103],$VF=[1,99],$VG=[8,258,260,441],$VH=[8,258,260,262,441],$VI=[105,297,350],$VJ=[1,115],$VK=[1,119],$VL=[1,121],$VM=[1,146],$VN=[1,168],$VO=[1,158],$VP=[1,159],$VQ=[1,156],$VR=[1,162],$VS=[1,166],$VT=[1,163],$VU=[1,153],$VV=[1,155],$VW=[1,157],$VX=[1,164],$VY=[1,148],$VZ=[1,173],$V_=[1,169],$V$=[1,170],$V01=[1,174],$V11=[1,175],$V21=[1,176],$V31=[1,177],$V41=[1,178],$V51=[1,179],$V61=[1,180],$V71=[1,181],$V81=[1,182],$V91=[1,151],$Va1=[1,152],$Vb1=[1,160],$Vc1=[1,161],$Vd1=[1,167],$Ve1=[1,165],$Vf1=[1,154],$Vg1=[1,172],$Vh1=[1,183],$Vi1=[4,5],$Vj1=[1,189],$Vk1=[1,197],$Vl1=[8,71,93,104,134,139,140,152,168,200,213,258,260,262,441,462],$Vm1=[8,71,168,258,260,262,441,443,444,462],$Vn1=[4,5,8,47,65,67,69,71,81,90,93,97,98,99,104,106,107,108,112,113,114,120,121,126,128,134,139,140,141,142,148,149,152,158,168,176,178,190,191,192,193,194,195,196,200,207,210,211,213,227,251,258,260,261,262,263,264,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],$Vo1=[1,225],$Vp1=[1,231],$Vq1=[1,241],$Vr1=[1,246],$Vs1=[1,245],$Vt1=[1,251],$Vu1=[2,138],$Vv1=[1,258],$Vw1=[8,67,71,258,260,262,439,441],$Vx1=[8,71,93,104,134,136,139,140,152,154,156,165,168,200,213,258,260,262,441,442,450,462],$Vy1=[4,5,8,47,65,67,69,70,71,81,90,93,97,98,99,104,106,107,108,112,113,114,116,120,121,123,124,126,128,134,139,140,141,142,148,149,152,156,158,163,168,176,178,190,191,192,193,194,195,196,197,198,200,207,210,211,213,227,251,252,258,260,261,262,263,264,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,287,291,300,312,313,314,317,318,329,331,337,340,341,342,343,344,345,346,348,349,357,358,359,367,369,375,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,444,452,453,458,459,462,472,474,475],$Vz1=[4,5,8,47,65,81,99,121,128,158,227,258,260,262,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,439,440,441],$VA1=[2,439],$VB1=[1,276],$VC1=[2,772],$VD1=[1,289],$VE1=[1,287],$VF1=[1,288],$VG1=[8,71,81,121,158,258,260,262,411,441,463,464],$VH1=[8,67,258,260,262,441],$VI1=[2,496],$VJ1=[1,304],$VK1=[4,5,128],$VL1=[258,260,262,441],$VM1=[1,319],$VN1=[1,310],$VO1=[1,318],$VP1=[1,317],$VQ1=[1,324],$VR1=[1,315],$VS1=[1,316],$VT1=[1,320],$VU1=[1,322],$VV1=[1,334],$VW1=[1,331],$VX1=[1,332],$VY1=[1,312],$VZ1=[1,314],$V_1=[1,311],$V$1=[1,313],$V02=[1,321],$V12=[1,323],$V22=[1,325],$V32=[1,326],$V42=[1,327],$V52=[1,328],$V62=[1,329],$V72=[1,333],$V82=[1,335],$V92=[1,336],$Va2=[1,337],$Vb2=[1,338],$Vc2=[2,260],$Vd2=[1,347],$Ve2=[4,5,8,47,65,67,69,71,81,90,93,97,98,99,104,106,107,108,112,113,114,120,121,126,128,134,139,140,141,142,148,149,152,156,158,168,176,178,190,191,192,193,194,195,196,197,198,200,207,210,211,213,227,251,252,258,260,261,262,263,264,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,287,291,300,312,313,317,318,337,340,341,344,346,348,349,357,358,359,367,369,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,444,452,453,462,472,474,475],$Vf2=[4,5,8,47,65,67,69,71,81,90,93,97,98,99,104,106,107,108,112,113,114,120,121,126,128,134,139,140,141,142,148,149,152,156,158,168,176,178,190,191,192,193,194,195,196,197,198,200,207,210,211,213,227,251,252,258,260,261,262,263,264,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,287,291,300,312,313,317,318,337,340,341,344,346,348,349,357,358,359,367,369,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,452,453,462,472,474,475],$Vg2=[2,321],$Vh2=[1,358],$Vi2=[1,368],$Vj2=[4,5,8,47,65,67,69,71,81,90,93,97,98,99,104,106,107,108,112,113,114,120,121,126,128,134,139,140,141,142,148,149,152,158,168,176,178,190,191,192,193,194,195,196,197,198,200,207,210,211,213,227,251,258,260,261,262,263,264,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,367,369,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,452,453,462,472,474,475],$Vk2=[1,383],$Vl2=[1,391],$Vm2=[1,390],$Vn2=[8,67,69,71,93,104,134,139,140,176,178,190,191,192,193,194,195,196,197,198,200,213,258,260,262,441,453,462],$Vo2=[8,67,71,93,104,134,139,140,176,178,190,191,192,193,194,195,196,197,198,200,213,258,260,262,441,462],$Vp2=[2,176],$Vq2=[1,410],$Vr2=[2,139],$Vs2=[1,413],$Vt2=[67,81,158],$Vu2=[8,67,71,126,156,252,258,260,262,287,300,312,313,317,318,441],$Vv2=[1,432],$Vw2=[67,71,258,260,262,441],$Vx2=[1,433],$Vy2=[1,441],$Vz2=[8,67,71,258,260,262,441],$VA2=[4,5,70,105,106,107,111,115,119,124,126,148,149,150,226,227,228,229,231,239,240,241,242,243,244,245,246,247,249,250,251,252,253,255,264,361,365],$VB2=[8,71,93,104,134,139,140,152,168,200,213,258,260,262,441,442,462],$VC2=[4,5,107,251],$VD2=[1,464],$VE2=[8,67,71,258,260,262,441,466],$VF2=[8,67,71,113,258,260,262,441,465,466,470,471],$VG2=[8,71,81,121,158,258,260,262,411,441,464],$VH2=[1,480],$VI2=[1,481],$VJ2=[136,280],$VK2=[2,391],$VL2=[1,528],$VM2=[1,547],$VN2=[4,5,47,65,67,69,71,81,90,93,99,104,106,107,113,114,120,121,126,128,134,139,140,141,142,148,152,158,168,176,178,190,191,192,193,194,195,196,200,207,210,211,213,227,251,258,260,261,262,263,264,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],$VO2=[2,324],$VP2=[2,336],$VQ2=[1,554],$VR2=[258,260,262],$VS2=[67,369],$VT2=[67,367,369],$VU2=[4,5,8,47,65,67,69,71,81,90,93,97,98,99,104,106,107,108,112,113,114,120,121,126,128,134,139,140,141,142,148,149,152,158,168,176,178,190,191,192,193,194,195,196,200,207,210,211,213,227,251,258,260,261,262,263,264,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,367,369,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],$VV2=[1,561],$VW2=[67,367],$VX2=[8,67,69,71,93,104,134,139,140,176,178,190,191,192,193,194,195,196,197,198,200,213,258,260,262,441,462],$VY2=[8,71,93,104,134,139,140,200,213,258,260,262,441,462],$VZ2=[8,71,258,260,262,441,462],$V_2=[4,5,8,70,71,93,104,105,106,107,111,115,119,124,126,134,139,140,148,149,150,152,168,200,213,226,227,228,229,231,239,240,241,242,243,244,245,246,247,249,250,251,252,253,255,258,260,262,264,361,365,441,442,450,462],$V$2=[1,627],$V03=[1,626],$V13=[8,67,71,113,258,260,262,441,465,466,471],$V23=[8,71,81,121,158,258,260,262,411,441],$V33=[4,5,8,47,65,67,69,71,81,90,93,97,98,99,104,106,107,108,112,113,114,120,121,126,128,134,139,140,141,142,148,149,152,156,158,168,176,178,190,191,192,193,194,195,196,200,207,210,211,213,227,251,252,258,260,261,262,263,264,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,287,291,300,312,313,317,318,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],$V43=[8,67,71,258,260,262,439,441,472],$V53=[4,5,47,65,67,69,71,81,90,93,99,104,106,107,113,114,120,121,126,128,134,139,140,141,142,152,158,168,176,178,190,191,192,193,194,195,196,200,207,210,211,213,227,251,258,260,261,262,263,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],$V63=[4,5,47,65,67,69,71,81,90,93,99,104,106,107,108,112,113,114,120,121,126,128,134,139,140,141,142,148,149,152,158,168,176,178,190,191,192,193,194,195,196,200,207,210,211,213,227,251,258,260,261,262,263,264,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],$V73=[4,5,47,65,67,69,71,81,93,99,104,106,107,113,114,120,121,128,134,139,140,141,142,152,158,168,176,178,190,191,192,193,194,195,196,200,207,210,211,213,227,251,258,260,261,262,265,266,267,268,269,270,271,276,277,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],$V83=[2,357],$V93=[4,5,47,65,67,69,71,81,93,104,106,107,120,121,128,134,139,140,141,142,152,158,168,176,178,190,191,192,193,194,195,196,200,207,210,211,213,227,251,258,260,261,262,276,277,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],$Va3=[2,258],$Vb3=[1,699],$Vc3=[8,71,258,260,262,441],$Vd3=[8,71,93,104,134,139,140,152,200,213,258,260,262,441,444,462],$Ve3=[1,723],$Vf3=[4,5,8,47,65,67,71,81,99,104,121,128,158,227,258,260,262,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,439,440,441],$Vg3=[1,731],$Vh3=[1,730],$Vi3=[1,732],$Vj3=[8,67,71,93,104,134,139,140,152,168,200,213,258,260,262,441,442,462],$Vk3=[1,741],$Vl3=[2,513],$Vm3=[1,755],$Vn3=[113,466],$Vo3=[8,67,71,113,258,260,262,441,465,466],$Vp3=[2,652],$Vq3=[1,769],$Vr3=[1,770],$Vs3=[2,299],$Vt3=[1,793],$Vu3=[1,804],$Vv3=[4,5,8,47,65,67,71,81,99,121,128,158,227,258,260,262,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,439,440,441],$Vw3=[1,807],$Vx3=[8,67,69,71,93,104,134,139,140,176,178,190,191,192,193,194,195,196,200,213,258,260,262,441,462],$Vy3=[8,71,93,134,139,140,213,258,260,262,441,462],$Vz3=[1,815],$VA3=[1,829],$VB3=[1,819],$VC3=[1,820],$VD3=[1,822],$VE3=[1,823],$VF3=[1,824],$VG3=[1,825],$VH3=[1,826],$VI3=[1,827],$VJ3=[1,828],$VK3=[97,99],$VL3=[67,258,260,262,441],$VM3=[67,71],$VN3=[1,881],$VO3=[8,71,134,139,140,213,258,260,262,441,462],$VP3=[8,69,71,93,104,134,139,140,176,178,190,191,192,193,194,195,196,200,213,258,260,262,441,462],$VQ3=[1,917],$VR3=[1,919],$VS3=[4,5,70,115,119,124,150,249,250,255,361,365],$VT3=[1,951],$VU3=[1,953],$VV3=[1,950],$VW3=[1,949],$VX3=[1,948],$VY3=[1,954],$VZ3=[1,945],$V_3=[1,946],$V$3=[1,947],$V04=[1,958],$V14=[8,67,71,134,139,140,213,258,260,262,441,462],$V24=[1,975],$V34=[8,71,134,139,140,258,260,262,441,462],$V44=[1,986],$V54=[1,987],$V64=[1,988],$V74=[8,71,93,104,134,139,140,176,178,190,191,192,193,194,195,196,197,198,200,213,258,260,262,441,462],$V84=[8,69,71,93,104,134,139,140,176,178,190,191,192,193,194,195,196,197,198,200,213,258,260,262,441,453,462],$V94=[1,1034],$Va4=[1,1033],$Vb4=[1,1035],$Vc4=[156,163,312,313,314,317],$Vd4=[2,451],$Ve4=[1,1040],$Vf4=[1,1060],$Vg4=[8,67,71,93,134,139,140,207,213,258,260,262,441,462],$Vh4=[8,69,71,93,104,134,139,140,176,178,190,191,192,193,194,195,196,197,198,200,213,258,260,262,441,462],$Vi4=[4,8,258,260,262,287,300,441],$Vj4=[1,1176],$Vk4=[1,1182],$Vl4=[67,71,197];\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"Gl\":3,\"A7\":4,\"AD\":5,\"main\":6,\"Dl\":7,\"Dg\":8,\"Dl_group0\":9,\"Dn\":10,\"Dm\":11,\"BG\":12,\"CE\":13,\"CA\":14,\"Do\":15,\"AlterTable\":16,\"AttachDatabase\":17,\"FW\":18,\"CreateIndex\":19,\"CreateGraph\":20,\"CreateTable\":21,\"Ff\":22,\"GW\":23,\"CreateVertex\":24,\"GG\":25,\"Delete\":26,\"FV\":27,\"FZ\":28,\"Fa\":29,\"DropTable\":30,\"Fh\":31,\"If\":32,\"Insert\":33,\"GK\":34,\"FU\":35,\"Select\":36,\"Fe\":37,\"Fc\":38,\"ShowDatabases\":39,\"Fd\":40,\"Fb\":41,\"GJ\":42,\"WithSelect\":43,\"F4\":44,\"F2\":45,\"F3\":46,\"EndTransaction\":47,\"FY\":48,\"Update\":49,\"Help\":50,\"EX\":51,\"Fn\":52,\"Fo\":53,\"F7\":54,\"F8\":55,\"F9\":56,\"GA\":57,\"GB\":58,\"GC\":59,\"Fx\":60,\"Fm\":61,\"Gh\":62,\"Gk\":63,\"GD\":64,\"C5\":65,\"Dp\":66,\"Da\":67,\"Dq\":68,\"AW\":69,\"DR\":70,\"DS\":71,\"SelectClause\":72,\"Select_option0\":73,\"D4\":74,\"D5\":75,\"EH\":76,\"EI\":77,\"EN\":78,\"EQ\":79,\"EM\":80,\"CU\":81,\"Select_repetition0\":82,\"Select_option1\":83,\"Dr\":84,\"CK\":85,\"Dr_option0\":86,\"Ds\":87,\"Dt\":88,\"EV\":89,\"Bh\":90,\"Ek\":91,\"Du\":92,\"B4\":93,\"Af\":94,\"EO\":95,\"Du_option0\":96,\"C9\":97,\"Dh\":98,\"DP\":99,\"EW\":100,\"Du_repetition_plus0\":101,\"Du_repetition_plus1\":102,\"Du_option1\":103,\"C3\":104,\"Ag\":105,\"C7\":106,\"AH\":107,\"DE\":108,\"C0\":109,\"BA\":110,\"DA\":111,\"DF\":112,\"DL\":113,\"DO\":114,\"De\":115,\"DZ\":116,\"DOT\":117,\"Fp\":118,\"DT\":119,\"Cn\":120,\"CX\":121,\"Ex\":122,\"Cz\":123,\"Dc\":124,\"Dw\":125,\"Bv\":126,\"Du_repetition2\":127,\"BS\":128,\"Du_repetition3\":129,\"Ef\":130,\"Du_repetition4\":131,\"Du_group0\":132,\"Du_repetition5\":133,\"Ct\":134,\"Dv\":135,\"AP\":136,\"Du_repetition6\":137,\"Du_repetition7\":138,\"Ba\":139,\"BE\":140,\"AK\":141,\"AJ\":142,\"B7\":143,\"CO\":144,\"ES\":145,\"Dv_repetition0\":146,\"Dv_repetition1\":147,\"DB\":148,\"DD\":149,\"Df\":150,\"Dx\":151,\"BL\":152,\"D2\":153,\"A6\":154,\"D3\":155,\"Cu\":156,\"SelectClause_option0\":157,\"CV\":158,\"CS\":159,\"Am\":160,\"Bk\":161,\"Ck\":162,\"BW\":163,\"CG\":164,\"Co\":165,\"Ei\":166,\"D3_option0\":167,\"Bb\":168,\"EA\":169,\"Eg\":170,\"Eo\":171,\"Em\":172,\"D7\":173,\"EB\":174,\"D6\":175,\"Aw\":176,\"AU\":177,\"B5\":178,\"D8\":179,\"D8_option0\":180,\"D8_option1\":181,\"D9\":182,\"EC\":183,\"EE\":184,\"ED\":185,\"EG\":186,\"ED_option0\":187,\"ED_option1\":188,\"EF\":189,\"Bq\":190,\"Bc\":191,\"BX\":192,\"Bg\":193,\"CP\":194,\"FULL\":195,\"CW\":196,\"By\":197,\"Cy\":198,\"E2\":199,\"BO\":200,\"EJ\":201,\"EL\":202,\"EK\":203,\"BP\":204,\"CR\":205,\"Ax\":206,\"BQ\":207,\"At\":208,\"EP\":209,\"AY\":210,\"Al\":211,\"Bt\":212,\"Bi\":213,\"ER\":214,\"B0\":215,\"ET\":216,\"EU\":217,\"Eb\":218,\"Et\":219,\"El\":220,\"En\":221,\"Ep\":222,\"EZ\":223,\"EY\":224,\"EW_group0\":225,\"CURRENT_TIMESTAMP\":226,\"AA\":227,\"Bs\":228,\"Ah\":229,\"FN\":230,\"As\":231,\"Ea\":232,\"Eh\":233,\"Ec\":234,\"B6\":235,\"Ed\":236,\"Ee\":237,\"B8\":238,\"Ce\":239,\"Au\":240,\"Bn\":241,\"Bl\":242,\"Ab\":243,\"BJ\":244,\"Be\":245,\"AO\":246,\"AV\":247,\"Eg_option0\":248,\"Cr\":249,\"BH\":250,\"AF\":251,\"Bw\":252,\"BF\":253,\"Eo_group0\":254,\"AB\":255,\"Eq\":256,\"Es\":257,\"BB\":258,\"Er\":259,\"C2\":260,\"Cl\":261,\"BD\":262,\"NOT_LIKE\":263,\"DC\":264,\"DK\":265,\"DM\":266,\"DJ\":267,\"DH\":268,\"DN\":269,\"DI\":270,\"DG\":271,\"Ev\":272,\"Ew\":273,\"BV\":274,\"Eu\":275,\"Ad\":276,\"NOT_BETWEEN\":277,\"BU\":278,\"Db\":279,\"Ca\":280,\"Cv\":281,\"Ey\":282,\"A2\":283,\"BY\":284,\"Ez\":285,\"ValuesListsList\":286,\"A1\":287,\"E0\":288,\"E1\":289,\"DateValue\":290,\"Av\":291,\"E6\":292,\"E3\":293,\"E7\":294,\"E8\":295,\"E4\":296,\"Cf\":297,\"E5\":298,\"CreateTableOption\":299,\"Aa\":300,\"Ci\":301,\"ColumnDefsList\":302,\"E9\":303,\"FA\":304,\"FB\":305,\"FD\":306,\"FE\":307,\"FJ\":308,\"FK\":309,\"FC\":310,\"Ap\":311,\"Ai\":312,\"CB\":313,\"Bd\":314,\"FD_option0\":315,\"FL\":316,\"BK\":317,\"CI\":318,\"FE_option0\":319,\"FG\":320,\"FF\":321,\"FH\":322,\"FI\":323,\"Bu\":324,\"AM\":325,\"FJ_option0\":326,\"FM\":327,\"FP\":328,\"ColumnConstraints\":329,\"FO\":330,\"BC\":331,\"FQ\":332,\"FS\":333,\"FR\":334,\"FS_option0\":335,\"FS_option1\":336,\"A8\":337,\"DropTable_group0\":338,\"FT\":339,\"AQ\":340,\"CL\":341,\"AN\":342,\"Bp\":343,\"AZ\":344,\"Az\":345,\"A5\":346,\"FX\":347,\"Cw\":348,\"CZ\":349,\"C1\":350,\"Ff_option0\":351,\"Ff_option1\":352,\"Fg\":353,\"CF\":354,\"Bz\":355,\"B2\":356,\"BR\":357,\"Cb\":358,\"AX\":359,\"Fs\":360,\"AC\":361,\"Ft\":362,\"Fq\":363,\"Fr\":364,\"DU\":365,\"Fu\":366,\"DV\":367,\"Fw\":368,\"DW\":369,\"Fv\":370,\"F1\":371,\"Fy\":372,\"Fz\":373,\"F0\":374,\"Bx\":375,\"Ao\":376,\"Cp\":377,\"CQ\":378,\"Ac\":379,\"F6\":380,\"C4\":381,\"Ar\":382,\"Ae\":383,\"CC\":384,\"CM\":385,\"GE\":386,\"GF\":387,\"Plugin\":388,\"A9\":389,\"A0\":390,\"GH\":391,\"GI\":392,\"Cs\":393,\"Bm\":394,\"GL\":395,\"GM\":396,\"GN\":397,\"GO\":398,\"GT\":399,\"GP\":400,\"GR\":401,\"GQ\":402,\"GS\":403,\"Ch\":404,\"OUTPUT\":405,\"CreateVertex_option0\":406,\"CreateVertex_option1\":407,\"CreateVertex_option2\":408,\"GV\":409,\"GU\":410,\"Aq\":411,\"GW_option0\":412,\"BN\":413,\"GX\":414,\"GY\":415,\"Gc\":416,\"GY_option0\":417,\"GY_option1\":418,\"GY_group0\":419,\"GY_option2\":420,\"GY_option3\":421,\"GY_group1\":422,\"GZ\":423,\"Ga\":424,\"Gb\":425,\"Gc_option0\":426,\"Gc_option1\":427,\"Gc_option2\":428,\"Gc_option3\":429,\"Gd\":430,\"Ge\":431,\"Gf\":432,\"Gf_option0\":433,\"Gg\":434,\"Gg_option0\":435,\"Gg_option1\":436,\"Gg_option2\":437,\"Gi\":438,\"DX\":439,\"DY\":440,\"SEMICOLON\":441,\"RemoveClause\":442,\"SearchSelector\":443,\"SearchFrom\":444,\"COLUMN\":445,\"DIRECTION\":446,\"ExprList\":447,\"DISTINCT\":448,\"UNIQUE\":449,\"ResultColumns\":450,\"PERCENT\":451,\"AS\":452,\"Literal\":453,\"CreateEdge\":454,\"Eg_option0_group0\":455,\"ALL\":456,\"NUMBER\":457,\"ParColsList\":458,\"ParLiteral\":459,\"TABLE\":460,\"CLASS\":461,\"SubqueryRestriction\":462,\"SharpValue\":463,\"StringValue\":464,\"Json\":465,\"GraphAsClause\":466,\"GraphElement\":467,\"GraphVar\":468,\"SharpLiteral\":469,\"STRING\":470,\"ColonLiteral\":471,\"WHERE\":472,\"Expression\":473,\"FROM\":474,\"TO\":475,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",4:\"A7\",5:\"AD\",8:\"Dg\",12:\"BG\",13:\"CE\",14:\"CA\",47:\"EndTransaction\",65:\"C5\",67:\"Da\",69:\"AW\",70:\"DR\",71:\"DS\",81:\"CU\",85:\"CK\",90:\"Bh\",93:\"B4\",94:\"Af\",97:\"C9\",98:\"Dh\",99:\"DP\",104:\"C3\",105:\"Ag\",106:\"C7\",107:\"AH\",108:\"DE\",109:\"C0\",110:\"BA\",111:\"DA\",112:\"DF\",113:\"DL\",114:\"DO\",115:\"De\",116:\"DZ\",117:\"DOT\",119:\"DT\",120:\"Cn\",121:\"CX\",123:\"Cz\",124:\"Dc\",126:\"Bv\",128:\"BS\",134:\"Ct\",136:\"AP\",139:\"Ba\",140:\"BE\",141:\"AK\",142:\"AJ\",143:\"B7\",144:\"CO\",148:\"DB\",149:\"DD\",150:\"Df\",152:\"BL\",154:\"A6\",156:\"Cu\",158:\"CV\",159:\"CS\",160:\"Am\",161:\"Bk\",162:\"Ck\",163:\"BW\",164:\"CG\",165:\"Co\",168:\"Bb\",176:\"Aw\",177:\"AU\",178:\"B5\",190:\"Bq\",191:\"Bc\",192:\"BX\",193:\"Bg\",194:\"CP\",195:\"FULL\",196:\"CW\",197:\"By\",198:\"Cy\",200:\"BO\",204:\"BP\",205:\"CR\",206:\"Ax\",207:\"BQ\",208:\"At\",210:\"AY\",211:\"Al\",212:\"Bt\",213:\"Bi\",215:\"B0\",226:\"CURRENT_TIMESTAMP\",227:\"AA\",228:\"Bs\",229:\"Ah\",231:\"As\",235:\"B6\",238:\"B8\",239:\"Ce\",240:\"Au\",241:\"Bn\",242:\"Bl\",243:\"Ab\",244:\"BJ\",245:\"Be\",246:\"AO\",247:\"AV\",249:\"Cr\",250:\"BH\",251:\"AF\",252:\"Bw\",253:\"BF\",255:\"AB\",258:\"BB\",260:\"C2\",261:\"Cl\",262:\"BD\",263:\"NOT_LIKE\",264:\"DC\",265:\"DK\",266:\"DM\",267:\"DJ\",268:\"DH\",269:\"DN\",270:\"DI\",271:\"DG\",274:\"BV\",276:\"Ad\",277:\"NOT_BETWEEN\",278:\"BU\",279:\"Db\",280:\"Ca\",281:\"Cv\",283:\"A2\",284:\"BY\",287:\"A1\",290:\"DateValue\",291:\"Av\",297:\"Cf\",300:\"Aa\",301:\"Ci\",311:\"Ap\",312:\"Ai\",313:\"CB\",314:\"Bd\",317:\"BK\",318:\"CI\",324:\"Bu\",325:\"AM\",329:\"ColumnConstraints\",331:\"BC\",337:\"A8\",340:\"AQ\",341:\"CL\",342:\"AN\",343:\"Bp\",344:\"AZ\",345:\"Az\",346:\"A5\",348:\"Cw\",349:\"CZ\",350:\"C1\",354:\"CF\",355:\"Bz\",356:\"B2\",357:\"BR\",358:\"Cb\",359:\"AX\",361:\"AC\",365:\"DU\",367:\"DV\",369:\"DW\",375:\"Bx\",376:\"Ao\",377:\"Cp\",378:\"CQ\",379:\"Ac\",381:\"C4\",382:\"Ar\",383:\"Ae\",384:\"CC\",385:\"CM\",389:\"A9\",390:\"A0\",393:\"Cs\",394:\"Bm\",404:\"Ch\",405:\"OUTPUT\",411:\"Aq\",413:\"BN\",439:\"DX\",440:\"DY\",441:\"SEMICOLON\",442:\"RemoveClause\",443:\"SearchSelector\",444:\"SearchFrom\",445:\"COLUMN\",446:\"DIRECTION\",447:\"ExprList\",448:\"DISTINCT\",449:\"UNIQUE\",450:\"ResultColumns\",451:\"PERCENT\",452:\"AS\",453:\"Literal\",454:\"CreateEdge\",456:\"ALL\",457:\"NUMBER\",458:\"ParColsList\",459:\"ParLiteral\",460:\"TABLE\",461:\"CLASS\",462:\"SubqueryRestriction\",463:\"SharpValue\",464:\"StringValue\",465:\"Json\",466:\"GraphAsClause\",467:\"GraphElement\",468:\"GraphVar\",469:\"SharpLiteral\",470:\"STRING\",471:\"ColonLiteral\",472:\"WHERE\",473:\"Expression\",474:\"FROM\",475:\"TO\"},\nproductions_: [0,[3,1],[3,1],[6,2],[7,3],[7,1],[7,1],[11,2],[11,4],[10,1],[15,0],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[43,3],[66,3],[66,1],[68,5],[36,9],[36,4],[84,3],[87,3],[87,1],[88,1],[88,2],[92,1],[92,5],[92,5],[92,2],[92,1],[92,2],[92,2],[92,3],[92,4],[92,4],[92,4],[92,4],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,2],[92,2],[92,2],[92,1],[92,1],[92,1],[92,2],[92,1],[92,2],[92,3],[92,3],[92,4],[92,1],[92,2],[92,2],[92,4],[92,4],[92,4],[92,4],[92,4],[92,5],[92,4],[92,4],[92,4],[92,4],[92,4],[92,4],[92,4],[92,4],[135,3],[135,1],[125,1],[125,1],[125,1],[151,2],[72,4],[72,4],[72,4],[72,3],[153,1],[153,2],[153,2],[153,2],[153,2],[153,2],[153,2],[153,2],[155,3],[155,4],[155,0],[74,0],[74,2],[74,2],[74,2],[74,2],[74,2],[75,2],[75,3],[75,5],[75,0],[175,6],[175,7],[175,6],[175,7],[173,1],[173,3],[179,4],[179,5],[179,3],[179,3],[179,2],[179,3],[179,1],[179,2],[179,3],[179,1],[179,1],[179,2],[179,3],[179,1],[179,2],[179,3],[179,1],[179,2],[179,3],[182,1],[169,3],[169,1],[174,2],[174,2],[174,1],[174,1],[183,3],[185,1],[185,2],[185,3],[185,3],[185,2],[185,3],[185,4],[185,5],[185,1],[185,2],[185,3],[185,1],[185,2],[185,3],[184,1],[184,2],[189,1],[189,2],[189,2],[189,3],[189,2],[189,3],[189,2],[189,3],[189,2],[189,2],[189,2],[186,2],[186,2],[186,0],[76,0],[76,2],[77,0],[77,4],[201,1],[201,3],[203,5],[203,4],[203,4],[203,1],[202,0],[202,2],[80,0],[80,2],[80,3],[80,2],[80,2],[80,3],[80,4],[80,3],[80,3],[78,0],[78,3],[95,1],[95,3],[209,1],[209,2],[209,3],[209,4],[79,0],[79,3],[214,0],[214,2],[145,3],[145,1],[216,3],[216,2],[216,3],[216,2],[216,3],[216,2],[216,1],[217,5],[217,3],[217,1],[89,5],[89,3],[89,3],[89,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,3],[100,3],[100,3],[100,1],[100,1],[51,1],[224,2],[224,2],[223,6],[223,8],[223,6],[223,8],[232,1],[232,1],[232,1],[232,1],[232,1],[232,1],[232,1],[218,5],[218,6],[218,6],[234,0],[234,4],[234,4],[234,5],[236,3],[237,3],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[130,1],[170,5],[170,3],[170,1],[170,1],[233,1],[233,3],[166,1],[91,1],[91,1],[220,1],[172,2],[221,4],[171,2],[171,2],[171,1],[171,1],[222,5],[222,4],[256,2],[256,1],[259,4],[257,2],[257,0],[219,3],[219,3],[219,3],[219,3],[219,3],[219,3],[219,3],[219,3],[219,3],[219,3],[219,5],[219,3],[219,3],[219,3],[219,5],[219,3],[219,3],[219,3],[219,3],[219,3],[219,3],[219,3],[219,3],[219,3],[219,3],[219,3],[219,6],[219,6],[219,3],[219,3],[219,2],[219,2],[219,2],[219,2],[219,3],[219,5],[219,6],[219,5],[219,6],[219,4],[219,5],[219,3],[219,4],[219,3],[219,3],[219,3],[219,3],[275,1],[275,1],[275,4],[272,1],[272,1],[272,1],[272,1],[272,1],[272,1],[273,1],[273,1],[273,1],[49,6],[49,4],[122,1],[122,3],[282,3],[26,5],[26,3],[33,5],[33,5],[33,8],[33,4],[33,7],[285,0],[285,1],[286,3],[286,1],[286,1],[286,5],[286,3],[286,3],[288,1],[288,3],[289,1],[289,1],[289,1],[289,1],[289,1],[289,1],[199,1],[199,3],[21,9],[21,5],[293,1],[293,1],[296,0],[296,1],[298,2],[298,1],[299,1],[299,3],[299,3],[292,0],[292,1],[294,0],[294,3],[295,3],[295,1],[295,2],[303,1],[303,3],[304,2],[304,2],[304,2],[304,2],[304,2],[305,0],[305,2],[310,4],[306,6],[307,9],[321,3],[320,0],[320,2],[322,4],[323,4],[308,5],[309,5],[309,5],[316,1],[316,1],[316,3],[316,3],[302,1],[302,3],[327,3],[327,2],[327,1],[230,6],[230,4],[230,1],[230,4],[330,1],[330,1],[328,0],[328,1],[332,2],[332,1],[334,3],[333,2],[333,5],[333,3],[333,6],[333,1],[333,2],[333,4],[333,1],[333,2],[333,1],[333,1],[30,4],[339,0],[339,2],[16,6],[16,6],[16,6],[16,8],[16,6],[35,5],[17,4],[17,7],[17,6],[17,9],[27,3],[18,4],[18,6],[18,9],[18,6],[347,0],[347,2],[48,3],[48,2],[28,4],[28,5],[28,5],[19,8],[19,9],[29,3],[39,2],[39,4],[39,3],[39,5],[41,2],[41,4],[41,4],[41,6],[38,4],[38,6],[40,4],[40,6],[37,4],[37,6],[22,11],[22,8],[353,3],[353,3],[353,5],[31,4],[50,2],[50,1],[61,2],[52,2],[53,2],[53,2],[53,4],[118,4],[118,2],[118,2],[118,2],[118,2],[118,1],[118,2],[118,2],[363,1],[363,1],[364,1],[364,1],[364,1],[364,1],[364,1],[364,1],[364,1],[364,3],[360,3],[360,4],[360,2],[362,2],[362,3],[362,1],[366,3],[366,1],[370,3],[370,3],[370,3],[368,3],[368,1],[60,3],[60,5],[60,6],[372,1],[372,1],[373,3],[373,2],[374,1],[374,1],[374,3],[371,1],[371,1],[45,2],[46,2],[44,2],[32,4],[32,3],[380,2],[54,3],[55,1],[56,1],[57,3],[58,2],[58,2],[59,2],[59,2],[388,1],[388,1],[64,2],[386,3],[386,1],[387,3],[387,1],[25,2],[391,1],[391,3],[392,3],[392,4],[392,5],[392,6],[42,3],[34,6],[395,1],[395,2],[396,2],[397,2],[398,2],[398,2],[398,1],[398,1],[400,4],[400,6],[402,1],[402,3],[401,5],[401,7],[401,7],[401,9],[401,7],[401,9],[403,3],[403,6],[403,3],[403,6],[399,0],[399,2],[399,5],[399,4],[399,7],[24,6],[410,2],[409,0],[409,2],[409,2],[409,1],[23,8],[20,3],[20,4],[414,3],[414,1],[415,3],[415,7],[415,4],[423,2],[424,3],[425,2],[416,4],[430,2],[431,2],[431,2],[432,4],[434,6],[434,1],[434,4],[62,3],[62,2],[438,3],[438,1],[63,2],[9,1],[9,1],[73,0],[73,1],[82,0],[82,2],[83,0],[83,1],[86,0],[86,1],[96,0],[96,1],[101,1],[101,2],[102,1],[102,2],[103,0],[103,1],[127,0],[127,2],[129,0],[129,2],[131,0],[131,2],[132,1],[132,1],[133,0],[133,2],[137,0],[137,2],[138,0],[138,2],[146,0],[146,2],[147,0],[147,2],[157,0],[157,1],[167,0],[167,1],[180,0],[180,1],[181,0],[181,1],[187,0],[187,1],[188,0],[188,1],[225,1],[225,1],[455,1],[455,1],[248,0],[248,1],[254,1],[254,1],[315,0],[315,1],[319,0],[319,1],[326,0],[326,1],[335,0],[335,1],[336,0],[336,1],[338,1],[338,1],[351,0],[351,1],[352,0],[352,1],[406,0],[406,1],[407,0],[407,1],[408,0],[408,1],[412,0],[412,1],[417,0],[417,1],[418,0],[418,1],[419,1],[419,1],[420,0],[420,1],[421,0],[421,1],[422,1],[422,1],[426,0],[426,1],[427,0],[427,1],[428,0],[428,1],[429,0],[429,1],[433,0],[433,2],[435,0],[435,2],[436,0],[436,2],[437,0],[437,2]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n\r\n\t\t\tif (yy.casesensitive) this.$ = $$[$0];\r\n\t\t\telse this.$ = $$[$0].toLowerCase();\r\n\t\t\nbreak;\ncase 2:\n this.$ = doubleq($$[$0].substr(1,$$[$0].length-2)); \nbreak;\ncase 3:\n return new yy.Statements({statements:$$[$0-1]}); \nbreak;\ncase 4:\n this.$ = $$[$0-2]; if($$[$0]) $$[$0-2].push($$[$0]); \nbreak;\ncase 5: case 6: case 62: case 68: case 119: case 153: case 179: case 180: case 216: case 235: case 246: case 318: case 333: case 398: case 411: case 412: case 416: case 424: case 464: case 465: case 580: case 587: case 611: case 613: case 615: case 629: case 630: case 660: case 678:\n this.$ = [$$[$0]]; \nbreak;\ncase 7:\n this.$ = $$[$0]; $$[$0].explain = true; \nbreak;\ncase 8:\n this.$ = $$[$0];  $$[$0].explain = true;\nbreak;\ncase 9:\n \r\n\t\t\tthis.$ = $$[$0];\r\n\r\n\t\t\t// TODO combine exists and queries\r\n\t\t    if(yy.exists) this.$.exists = yy.exists;\r\n\t\t    delete yy.exists;\r\n\t\t    if(yy.queries) this.$.queries = yy.queries;\r\n\t\t\tdelete yy.queries;\r\n\t\t\nbreak;\ncase 10: case 128: case 138: case 148: case 211: case 212: case 214: case 222: case 224: case 233: case 241: case 243: case 336: case 428: case 437: case 439: case 451: case 457: case 458: case 496:\n this.$ = undefined; \nbreak;\ncase 60:\n this.$ = new yy.WithSelect({withs: $$[$0-1], select:$$[$0]}); \nbreak;\ncase 61:\n $$[$0-2].push($$[$0]); this.$=$$[$0-2]; \nbreak;\ncase 63:\n this.$ = {name:$$[$0-4], select:$$[$0-1]}; \nbreak;\ncase 64:\n   \r\n\t\t\tyy.extend(this.$,$$[$0-8]); yy.extend(this.$,$$[$0-7]); yy.extend(this.$,$$[$0-6]); yy.extend(this.$,$$[$0-5]); \r\n\t\t    yy.extend(this.$,$$[$0-4]); yy.extend(this.$,$$[$0-3]);yy.extend(this.$,$$[$0-2]); \r\n\t\t    yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]); \r\n\t\t    this.$ = $$[$0-8];\r\n/*\t\t    if(yy.exists) this.$.exists = yy.exists;\r\n\t\t    delete yy.exists;\r\n\t\t    if(yy.queries) this.$.queries = yy.queries;\r\n\t\t\tdelete yy.queries;\r\n*/\t\t\nbreak;\ncase 65:\n\r\n\t\t\tthis.$ = new yy.Search({selectors:$$[$0-2], from:$$[$0]});\r\n\t\t\tyy.extend(this.$,$$[$0-1]);\r\n\t\t\nbreak;\ncase 66:\n this.$ = {removecolumns:$$[$0]}; \nbreak;\ncase 67: case 659: case 677:\n this.$ = $$[$0-2]; this.$.push($$[$0]); \nbreak;\ncase 69: case 123: case 161: case 221: case 253: case 261: case 262: case 263: case 264: case 265: case 266: case 267: case 268: case 269: case 270: case 271: case 272: case 273: case 274: case 276: case 289: case 290: case 291: case 292: case 293: case 294: case 335: case 387: case 388: case 389: case 390: case 391: case 392: case 452: case 480: case 482: case 554: case 555: case 556: case 557: case 558: case 559: case 563: case 565: case 566: case 575: case 588: case 589: case 651: case 665: case 666: case 668: case 669:\n this.$ = $$[$0]; \nbreak;\ncase 70:\n this.$ = {like:$$[$0]}; \nbreak;\ncase 71: case 83:\n this.$ = {srchid:\"PROP\", args: [$$[$0]]}; \nbreak;\ncase 72:\n this.$ = {srchid:\"ORDERBY\", args: $$[$0-1]}; \nbreak;\ncase 73:\n\r\n\t\t\tvar dir = $$[$0-1];\r\n\t\t\tif(!dir) dir = 'ASC';\r\n\t\t\tthis.$ = {srchid:\"ORDERBY\", args: [{expression: new yy.Column({columnid:'_'}), direction:dir}]};\r\n\t\t\nbreak;\ncase 74:\n this.$ = {srchid:\"APROP\", args: [$$[$0]]}; \nbreak;\ncase 75:\n this.$ = {selid:\"ROOT\"};\nbreak;\ncase 76:\n this.$ = {srchid:\"EQ\", args: [$$[$0]]}; \nbreak;\ncase 77:\n this.$ = {srchid:\"LIKE\", args: [$$[$0]]}; \nbreak;\ncase 78: case 79:\n this.$ = {selid:\"WITH\", args: $$[$0-1]}; \nbreak;\ncase 80:\n this.$ = {srchid:$$[$0-3].toUpperCase(), args:$$[$0-1]}; \nbreak;\ncase 81:\n this.$ = {srchid:\"WHERE\", args:[$$[$0-1]]}; \nbreak;\ncase 82:\n this.$ = {srchid:\"CLASS\", args:[$$[$0-1]]}; \nbreak;\ncase 84:\n this.$ = {srchid:\"NAME\", args: [$$[$0].substr(1,$$[$0].length-2)]}; \nbreak;\ncase 85:\n this.$ = {srchid:\"CHILD\"}; \nbreak;\ncase 86:\n this.$ = {srchid:\"VERTEX\"}; \nbreak;\ncase 87:\n this.$ = {srchid:\"EDGE\"}; \nbreak;\ncase 88:\n this.$ = {srchid:\"REF\"}; \nbreak;\ncase 89:\n this.$ = {srchid:\"SHARP\", args:[$$[$0]]}; \nbreak;\ncase 90:\n this.$ = {srchid:\"ATTR\", args:((typeof $$[$0] == 'undefined')?undefined:[$$[$0]])}; \nbreak;\ncase 91:\n this.$ = {srchid:\"ATTR\"}; \nbreak;\ncase 92:\n this.$ = {srchid:\"OUT\"}; \nbreak;\ncase 93:\n this.$ = {srchid:\"IN\"}; \nbreak;\ncase 94:\n this.$ = {srchid:\"CONTENT\"}; \nbreak;\ncase 95:\n this.$ = {srchid:\"PARENT\"}; \nbreak;\ncase 96:\n this.$ = {srchid:\"EX\",args:[new yy.Json({value:$$[$0]})]}; \nbreak;\ncase 97:\n this.$ = {srchid:\"AT\", args:[$$[$0]]}; \nbreak;\ncase 98:\n this.$ = {srchid:\"AS\", args:[$$[$0]]}; \nbreak;\ncase 99:\n this.$ = {srchid:\"TO\", args:[$$[$0]]}; \nbreak;\ncase 100:\n this.$ = {srchid:\"SET\", args:$$[$0-1]}; \nbreak;\ncase 101:\n this.$ = {srchid:\"VALUE\"}; \nbreak;\ncase 102:\n this.$ = {srchid:\"CLASS\", args:[$$[$0]]}; \nbreak;\ncase 103:\n this.$ = {selid:$$[$0],args:[$$[$0-1]] }; \nbreak;\ncase 104:\n this.$ = {selid:\"NOT\",args:$$[$0-1] }; \nbreak;\ncase 105:\n this.$ = {selid:\"IF\",args:$$[$0-1] }; \nbreak;\ncase 106:\n this.$ = {selid:$$[$0-3],args:$$[$0-1] }; \nbreak;\ncase 107:\n this.$ = {selid:'DISTINCT',args:$$[$0-1] }; \nbreak;\ncase 108:\n this.$ = {selid:'UNION',args:$$[$0-1] }; \nbreak;\ncase 109:\n this.$ = {selid:'UNIONALL',args:$$[$0-1] }; \nbreak;\ncase 110:\n this.$ = {selid:'ALL',args:[$$[$0-1]] }; \nbreak;\ncase 111:\n this.$ = {selid:'ANY',args:[$$[$0-1]] }; \nbreak;\ncase 112:\n this.$ = {selid:'INTERSECT',args:$$[$0-1] }; \nbreak;\ncase 113:\n this.$ = {selid:'EXCEPT',args:$$[$0-1] }; \nbreak;\ncase 114:\n this.$ = {selid:'AND',args:$$[$0-1] }; \nbreak;\ncase 115:\n this.$ = {selid:'OR',args:$$[$0-1] }; \nbreak;\ncase 116:\n this.$ = {selid:'PATH',args:[$$[$0-1]] }; \nbreak;\ncase 117:\n this.$ = {srchid:'RETURNS',args:$$[$0-1] }; \nbreak;\ncase 118:\n this.$ = $$[$0-2]; this.$.push($$[$0]);\nbreak;\ncase 120:\n this.$ = \"PLUS\"; \nbreak;\ncase 121:\n this.$ = \"STAR\"; \nbreak;\ncase 122:\n this.$ = \"QUESTION\"; \nbreak;\ncase 124:\n this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy,extend(this.$, $$[$0-3]); yy.extend(this.$, $$[$0-1]); \nbreak;\ncase 125:\n this.$ = new yy.Select({ columns:$$[$0], distinct: true }); yy,extend(this.$, $$[$0-3]);yy.extend(this.$, $$[$0-1]); \nbreak;\ncase 126:\n this.$ = new yy.Select({ columns:$$[$0], all:true }); yy,extend(this.$, $$[$0-3]);yy.extend(this.$, $$[$0-1]); \nbreak;\ncase 127:\n \r\n\t\t\tif(!$$[$0]) {\r\n\t\t\t\tthis.$ = new yy.Select({columns:[new yy.Column({columnid:'_',})], modifier:'COLUMN'});\r\n\t\t\t} else {\r\n\t\t\t\tthis.$ = new yy.Select({ columns:$$[$0] }); yy,extend(this.$, $$[$0-2]);yy.extend(this.$, $$[$0-1]); \r\n\t\t\t}\r\n\t\t\nbreak;\ncase 129:\n this.$ = {modifier:'VALUE'}\nbreak;\ncase 130:\n this.$ = {modifier:'ROW'}\nbreak;\ncase 131:\n this.$ = {modifier:'COLUMN'}\nbreak;\ncase 132:\n this.$ = {modifier:'MATRIX'}\nbreak;\ncase 133:\n this.$ = {modifier:'TEXTSTRING'}\nbreak;\ncase 134:\n this.$ = {modifier:'INDEX'}\nbreak;\ncase 135:\n this.$ = {modifier:'RECORDSET'}\nbreak;\ncase 136:\n this.$ = {top: $$[$0-1], percent:(typeof $$[$0] != 'undefined'?true:undefined)}; \nbreak;\ncase 137:\n this.$ = {top: $$[$0-1]}; \nbreak;\ncase 139: case 299: case 459: case 460: case 652:\nthis.$ = undefined; \nbreak;\ncase 140: case 141: case 142: case 143:\nthis.$ = {into: $$[$0]} \nbreak;\ncase 144:\n \r\n\t\t\tvar s = $$[$0];\r\n\t\t\ts = s.substr(1,s.length-2);\r\n\t\t\tvar x3 = s.substr(-3).toUpperCase();\r\n\t\t\tvar x4 = s.substr(-4).toUpperCase();\r\n\t\t\tif(s[0] == '#') {\r\n\t\t\t\tthis.$ = {into: new yy.FuncValue({funcid: 'HTML', args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]})};\r\n\t\t\t} else if(x3=='XLS' || x3 == 'CSV' || x3=='TAB') {\r\n\t\t\t\tthis.$ = {into: new yy.FuncValue({funcid: x3, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]})};\r\n\t\t\t} else if(x4=='XLSX' || x4 == 'JSON') {\r\n\t\t\t\tthis.$ = {into: new yy.FuncValue({funcid: x4, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]})};\r\n\t\t\t}\r\n\t\t\nbreak;\ncase 145:\n this.$ = { from: $$[$0] }; \nbreak;\ncase 146:\n this.$ = { from: $$[$0-1], joins: $$[$0] }; \nbreak;\ncase 147:\n this.$ = { from: $$[$0-2], joins: $$[$0-1] }; \nbreak;\ncase 149:\n this.$ = new yy.Apply({select: $$[$0-2], applymode:'CROSS', as:$$[$0]}); \nbreak;\ncase 150:\n this.$ = new yy.Apply({select: $$[$0-3], applymode:'CROSS', as:$$[$0]}); \nbreak;\ncase 151:\n this.$ = new yy.Apply({select: $$[$0-2], applymode:'OUTER', as:$$[$0]}); \nbreak;\ncase 152:\n this.$ = new yy.Apply({select: $$[$0-3], applymode:'OUTER', as:$$[$0]}); \nbreak;\ncase 154: case 217: case 399: case 466: case 467:\n this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); \nbreak;\ncase 155:\n this.$ = $$[$0-2]; this.$.as = $$[$0] \nbreak;\ncase 156:\n this.$ = $$[$0-3]; this.$.as = $$[$0] \nbreak;\ncase 157:\n this.$ = $$[$0-1]; this.$.as = 'default' \nbreak;\ncase 158:\n this.$ = new yy.Json({value:$$[$0-2]}); $$[$0-2].as = $$[$0] \nbreak;\ncase 159:\n this.$ = $$[$0-1]; $$[$0-1].as = $$[$0] \nbreak;\ncase 160:\n this.$ = $$[$0-2]; $$[$0-2].as = $$[$0] \nbreak;\ncase 162: case 166: case 169: case 172:\n this.$ = $$[$0-1]; $$[$0-1].as = $$[$0]; \nbreak;\ncase 163: case 167: case 170: case 173:\n this.$ = $$[$0-2]; $$[$0-2].as = $$[$0]; \nbreak;\ncase 164: case 165: case 168: case 171:\n this.$ = $$[$0]; $$[$0].as = 'default'; \nbreak;\ncase 174:\n \r\n\t\t\tvar s = $$[$0];\r\n\t\t\ts = s.substr(1,s.length-2);\r\n\t\t\tvar x3 = s.substr(-3).toUpperCase();\r\n\t\t\tvar x4 = s.substr(-4).toUpperCase();\r\n\t\t\tvar r;\r\n\t\t\tif(s[0] == '#') {\r\n\t\t\t\tr = new yy.FuncValue({funcid: 'HTML', args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]});\r\n\t\t\t} else if(x3=='XLS' || x3 == 'CSV' || x3=='TAB') {\r\n\t\t\t\tr = new yy.FuncValue({funcid: x3, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]});\r\n\t\t\t} else if(x4=='XLSX' || x4 == 'JSON') {\r\n\t\t\t\tr = new yy.FuncValue({funcid: x4, args:[new yy.StringValue({value: s}), new yy.Json({value:{headers:true}})]});\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error('Unknown string in BL clause');\r\n\t\t\t};\r\n\t\t\tthis.$ = r;\r\n\t\t\nbreak;\ncase 175:\n \t\r\n\t\t\tif($$[$0-2] == 'INFORMATION_SCHEMA') {\r\n\t\t\t\tthis.$ = new yy.FuncValue({funcid: $$[$0-2], args:[new yy.StringValue({value:$$[$0]})]});\r\n\t\t\t} else {\r\n\t\t\t\tthis.$ = new yy.Table({databaseid: $$[$0-2], tableid:$$[$0]});\r\n\t\t\t}\r\n\t\t\nbreak;\ncase 176:\n this.$ = new yy.Table({tableid: $$[$0]});\nbreak;\ncase 177: case 178:\n this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); \nbreak;\ncase 181:\n this.$ = new yy.Join($$[$0-2]); yy.extend(this.$, $$[$0-1]); yy.extend(this.$, $$[$0]); \nbreak;\ncase 182:\n this.$ = {table: $$[$0]}; \nbreak;\ncase 183:\n this.$ = {table: $$[$0-1], as: $$[$0] } ; \nbreak;\ncase 184:\n this.$ = {table: $$[$0-2], as: $$[$0] } ; \nbreak;\ncase 185:\n this.$ = {json:new yy.Json({value:$$[$0-2],as:$$[$0]})}; \nbreak;\ncase 186:\n this.$ = {param: $$[$0-1], as: $$[$0] } ; \nbreak;\ncase 187:\n this.$ = {param: $$[$0-2], as: $$[$0] } ; \nbreak;\ncase 188:\n this.$ = {select: $$[$0-3], as: $$[$0]} ; \nbreak;\ncase 189:\n this.$ = {select: $$[$0-4], as: $$[$0] } ; \nbreak;\ncase 190:\n this.$ = {funcid:$$[$0], as:'default'}; \nbreak;\ncase 191:\n this.$ = {funcid:$$[$0-1], as: $$[$0]}; \nbreak;\ncase 192:\n this.$ = {funcid:$$[$0-2], as: $$[$0]}; \nbreak;\ncase 193:\n this.$ = {variable:$$[$0],as:'default'}; \nbreak;\ncase 194:\n this.$ = {variable:$$[$0-1],as:$$[$0]}; \nbreak;\ncase 195:\n this.$ = {variable:$$[$0-2],as:$$[$0]} \nbreak;\ncase 196:\n this.$ = { joinmode: $$[$0] } ; \nbreak;\ncase 197:\n this.$ = {joinmode: $$[$0-1], natural:true} ; \nbreak;\ncase 198: case 199:\n this.$ = \"INNER\"; \nbreak;\ncase 200: case 201:\n this.$ = \"LEFT\"; \nbreak;\ncase 202: case 203:\n this.$ = \"RIGHT\"; \nbreak;\ncase 204: case 205:\n this.$ = \"OUTER\"; \nbreak;\ncase 206:\n this.$ = \"SEMI\"; \nbreak;\ncase 207:\n this.$ = \"ANTI\"; \nbreak;\ncase 208:\n this.$ = \"CROSS\"; \nbreak;\ncase 209:\n this.$ = {on: $$[$0]}; \nbreak;\ncase 210: case 625:\n this.$ = {using: $$[$0]}; \nbreak;\ncase 213:\n this.$ = {where: new yy.Expression({expression:$$[$0]})}; \nbreak;\ncase 215:\n this.$ = {group:$$[$0-1]}; yy.extend(this.$,$$[$0]); \nbreak;\ncase 218:\n this.$ = new yy.GroupExpression({type:'GROUPING SETS', group: $$[$0-1]}); \nbreak;\ncase 219:\n this.$ = new yy.GroupExpression({type:'ROLLUP', group: $$[$0-1]}); \nbreak;\ncase 220:\n this.$ = new yy.GroupExpression({type:'CUBE', group: $$[$0-1]}); \nbreak;\ncase 223:\n this.$ = {having:$$[$0]}\nbreak;\ncase 225:\n this.$ = {union: $$[$0]} ; \nbreak;\ncase 226:\n this.$ = {unionall: $$[$0]} ; \nbreak;\ncase 227:\n this.$ = {except: $$[$0]} ; \nbreak;\ncase 228:\n this.$ = {intersect: $$[$0]} ; \nbreak;\ncase 229:\n this.$ = {union: $$[$0], corresponding:true} ; \nbreak;\ncase 230:\n this.$ = {unionall: $$[$0], corresponding:true} ; \nbreak;\ncase 231:\n this.$ = {except: $$[$0], corresponding:true} ; \nbreak;\ncase 232:\n this.$ = {intersect: $$[$0], corresponding:true} ; \nbreak;\ncase 234:\n this.$ = {order:$$[$0]}\nbreak;\ncase 236:\n this.$ = $$[$0-2]; $$[$0-2].push($$[$0])\nbreak;\ncase 237:\n this.$ = new yy.Expression({expression: $$[$0], direction:'ASC'}) \nbreak;\ncase 238:\n this.$ = new yy.Expression({expression: $$[$0-1], direction:$$[$0].toUpperCase()}) \nbreak;\ncase 239:\n this.$ = new yy.Expression({expression: $$[$0-2], direction:'ASC', nocase:true}) \nbreak;\ncase 240:\n this.$ = new yy.Expression({expression: $$[$0-3], direction:$$[$0].toUpperCase(), nocase:true}) \nbreak;\ncase 242:\n this.$ = {limit:$$[$0-1]}; yy.extend(this.$, $$[$0])\nbreak;\ncase 244:\n this.$ = {offset:$$[$0]}\nbreak;\ncase 245: case 445: case 469: case 579: case 586: case 610: case 612: case 616:\n $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; \nbreak;\ncase 247: case 249: case 251:\n $$[$0-2].as = $$[$0]; this.$ = $$[$0-2];\nbreak;\ncase 248: case 250: case 252:\n $$[$0-1].as = $$[$0]; this.$ = $$[$0-1];\nbreak;\ncase 254:\n this.$ = new yy.Column({columid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]}); \nbreak;\ncase 255:\n this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]}); \nbreak;\ncase 256:\n this.$ = new yy.Column({columnid:$$[$0]}); \nbreak;\ncase 257:\n this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2], databaseid:$$[$0-4]});\nbreak;\ncase 258: case 259:\n this.$ = new yy.Column({columnid: $$[$0], tableid: $$[$0-2]});\nbreak;\ncase 260:\n this.$ = new yy.Column({columnid: $$[$0]});\nbreak;\ncase 275:\n this.$ = new yy.Json({value:$$[$0]}); \nbreak;\ncase 277: case 278: case 279:\n\r\n\t\t\tif(!yy.queries) yy.queries = []; \r\n\t\t\tyy.queries.push($$[$0-1]);\r\n\t\t\t$$[$0-1].queriesidx = yy.queries.length;\r\n\t\t\tthis.$ = $$[$0-1];\r\n\t\t\nbreak;\ncase 280:\nthis.$ = $$[$0]\nbreak;\ncase 281:\n this.$ = new yy.FuncValue({funcid:'CURRENT_TIMESTAMP'});\nbreak;\ncase 282:\n this.$ = new yy.JavaScript({value:$$[$0].substr(2,$$[$0].length-4)}); \nbreak;\ncase 283:\n this.$ = new yy.FuncValue({funcid:$$[$0], newid:true}); \nbreak;\ncase 284:\n this.$ = $$[$0]; yy.extend(this.$,{newid:true}); \nbreak;\ncase 285:\n this.$ = new yy.Convert({expression:$$[$0-3]}) ; yy.extend(this.$,$$[$0-1]) ; \nbreak;\ncase 286:\n this.$ = new yy.Convert({expression:$$[$0-5], style:$$[$0-1]}) ; yy.extend(this.$,$$[$0-3]) ; \nbreak;\ncase 287:\n this.$ = new yy.Convert({expression:$$[$0-1]}) ; yy.extend(this.$,$$[$0-3]) ; \nbreak;\ncase 288:\n this.$ = new yy.Convert({expression:$$[$0-3], style:$$[$0-1]}) ; yy.extend(this.$,$$[$0-5]) ; \nbreak;\ncase 295:\n this.$ = new yy.FuncValue({funcid:'CURRENT_TIMESTAMP'}); \nbreak;\ncase 296:\n\r\n\t\t  if($$[$0-2].length > 1 && ($$[$0-4].toUpperCase() == 'MAX' || $$[$0-4].toUpperCase() == 'MIN')) {\r\n\t\t  \tthis.$ = new yy.FuncValue({funcid:$$[$0-4],args:$$[$0-2]});\r\n\t\t  } else {\r\n\t\t\tthis.$ = new yy.AggrValue({aggregatorid: $$[$0-4].toUpperCase(), expression: $$[$0-2].pop(), over:$$[$0]}); \r\n\t\t  } \r\n\t\t\nbreak;\ncase 297:\n this.$ = new yy.AggrValue({aggregatorid: $$[$0-5].toUpperCase(), expression: $$[$0-2], distinct:true, over:$$[$0]}); \nbreak;\ncase 298:\n this.$ = new yy.AggrValue({aggregatorid: $$[$0-5].toUpperCase(), expression: $$[$0-2],\r\n\t\t over:$$[$0]}); \nbreak;\ncase 300: case 301:\n this.$ = new yy.Over(); yy.extend(this.$,$$[$0-1]); \nbreak;\ncase 302:\n this.$ = new yy.Over(); yy.extend(this.$,$$[$0-2]); yy.extend(this.$,$$[$0-1]);\nbreak;\ncase 303:\n this.$ = {partition:$$[$0]}; \nbreak;\ncase 304:\n this.$ = {order:$$[$0]}; \nbreak;\ncase 305:\n this.$ = \"SUM\"; \nbreak;\ncase 306:\n this.$ = \"COUNT\"; \nbreak;\ncase 307:\n this.$ = \"MIN\"; \nbreak;\ncase 308: case 478:\n this.$ = \"MAX\"; \nbreak;\ncase 309:\n this.$ = \"AVG\"; \nbreak;\ncase 310:\n this.$ = \"FIRST\"; \nbreak;\ncase 311:\n this.$ = \"LAST\"; \nbreak;\ncase 312:\n this.$ = \"AGGR\"; \nbreak;\ncase 313:\n this.$ = \"ARRAY\"; \nbreak;\ncase 314:\n \r\n\t\t\tvar funcid = $$[$0-4];\r\n\t\t\tvar exprlist = $$[$0-1];\r\n\t\t\tif(exprlist.length > 1 && (funcid.toUpperCase() == 'MIN' || funcid.toUpperCase() == 'MAX')) {\r\n\t\t\t\t\tthis.$ = new yy.FuncValue({funcid: funcid, args: exprlist}); \r\n\t\t\t} else if(alasql.aggr[$$[$0-4]]) {\r\n\t\t    \tthis.$ = new yy.AggrValue({aggregatorid: 'REDUCE', \r\n                      funcid: funcid, expression: exprlist.pop(),distinct:($$[$0-2]=='DISTINCT') });\r\n\t\t    } else {\r\n\t\t\t    this.$ = new yy.FuncValue({funcid: funcid, args: exprlist}); \r\n\t\t\t};\r\n\t\t\nbreak;\ncase 315:\n this.$ = new yy.FuncValue({ funcid: $$[$0-2] }) \nbreak;\ncase 316:\n this.$ = new yy.LogicValue({value:true}); \nbreak;\ncase 317:\n this.$ = new yy.LogicValue({value:false}); \nbreak;\ncase 319:\n $$[$0-2].push($$[$0]); this.$ = $$[$0-2] \nbreak;\ncase 320:\n this.$ = new yy.NumValue({value:+$$[$0]}); \nbreak;\ncase 321:\n this.$ = new yy.StringValue({value: $$[$0].substr(1,$$[$0].length-2).replace(/(\\\\\\')/g,\"'\").replace(/(\\'\\')/g,\"'\")}); \nbreak;\ncase 322:\n this.$ = new yy.StringValue({value: $$[$0].substr(2,$$[$0].length-3).replace(/(\\\\\\')/g,\"'\").replace(/(\\'\\')/g,\"'\")}); \nbreak;\ncase 323:\n this.$ = new yy.NullValue({value:undefined}); \nbreak;\ncase 324:\n this.$ = new yy.VarValue({variable:$$[$0]}); \nbreak;\ncase 325:\n \r\n\t\t\tif(!yy.exists) yy.exists = [];\r\n\t\t\tthis.$ = new yy.ExistsValue({value:$$[$0-1], existsidx:yy.exists.length}); \r\n\t\t\tyy.exists.push($$[$0-1]);\r\n\t\t\nbreak;\ncase 326: case 327:\n this.$ = new yy.ParamValue({param: $$[$0]}); \nbreak;\ncase 328:\n \r\n\t\t\tif(typeof yy.question == 'undefined') yy.question = 0; \r\n\t\t\tthis.$ = new yy.ParamValue({param: yy.question++}); \r\n\t\t\nbreak;\ncase 329:\n \r\n\t\t\tif(typeof yy.question == 'undefined') yy.question = 0; \r\n\t\t\tthis.$ = new yy.ParamValue({param: yy.question++, array:true}); \r\n\t\t\nbreak;\ncase 330:\n this.$ = new yy.CaseValue({expression:$$[$0-3], whens: $$[$0-2], elses: $$[$0-1]}); \nbreak;\ncase 331:\n this.$ = new yy.CaseValue({whens: $$[$0-2], elses: $$[$0-1]}); \nbreak;\ncase 332: case 627: case 628:\n this.$ = $$[$0-1]; this.$.push($$[$0]); \nbreak;\ncase 334:\n this.$ = {when: $$[$0-2], then: $$[$0] }; \nbreak;\ncase 337:\n this.$ = new yy.Op({left:$$[$0-2], op:'LIKE', right:$$[$0]}); \nbreak;\ncase 338:\n this.$ = new yy.Op({left:$$[$0-2], op:'NOT LIKE', right:$$[$0] }); \nbreak;\ncase 339:\n this.$ = new yy.Op({left:$$[$0-2], op:'+', right:$$[$0]}); \nbreak;\ncase 340:\n this.$ = new yy.Op({left:$$[$0-2], op:'-', right:$$[$0]}); \nbreak;\ncase 341:\n this.$ = new yy.Op({left:$$[$0-2], op:'*', right:$$[$0]}); \nbreak;\ncase 342:\n this.$ = new yy.Op({left:$$[$0-2], op:'/', right:$$[$0]}); \nbreak;\ncase 343:\n this.$ = new yy.Op({left:$$[$0-2], op:'%', right:$$[$0]}); \nbreak;\ncase 344:\n this.$ = new yy.Op({left:$$[$0-2], op:'^', right:$$[$0]}); \nbreak;\ncase 345: case 346: case 348:\n this.$ = new yy.Op({left:$$[$0-2], op:'->' , right:$$[$0]}); \nbreak;\ncase 347:\n this.$ = new yy.Op({left:$$[$0-4], op:'->' , right:$$[$0-1]}); \nbreak;\ncase 349: case 350: case 352:\n this.$ = new yy.Op({left:$$[$0-2], op:'!' , right:$$[$0]}); \nbreak;\ncase 351:\n this.$ = new yy.Op({left:$$[$0-4], op:'!' , right:$$[$0-1]}); \nbreak;\ncase 353:\n this.$ = new yy.Op({left:$$[$0-2], op:'>' , right:$$[$0]}); \nbreak;\ncase 354:\n this.$ = new yy.Op({left:$$[$0-2], op:'>=' , right:$$[$0]}); \nbreak;\ncase 355:\n this.$ = new yy.Op({left:$$[$0-2], op:'<' , right:$$[$0]}); \nbreak;\ncase 356:\n this.$ = new yy.Op({left:$$[$0-2], op:'<=' , right:$$[$0]}); \nbreak;\ncase 357:\n this.$ = new yy.Op({left:$$[$0-2], op:'=' , right:$$[$0]}); \nbreak;\ncase 358:\n this.$ = new yy.Op({left:$$[$0-2], op:'==' , right:$$[$0]}); \nbreak;\ncase 359:\n this.$ = new yy.Op({left:$$[$0-2], op:'===' , right:$$[$0]}); \nbreak;\ncase 360:\n this.$ = new yy.Op({left:$$[$0-2], op:'!=' , right:$$[$0]}); \nbreak;\ncase 361:\n this.$ = new yy.Op({left:$$[$0-2], op:'!==' , right:$$[$0]}); \nbreak;\ncase 362:\n this.$ = new yy.Op({left:$$[$0-2], op:'!===' , right:$$[$0]}); \nbreak;\ncase 363:\n \r\n\t\t\tif(!yy.queries) yy.queries = []; \r\n\t\t\tthis.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1], queriesidx: yy.queries.length}); \r\n\t\t\tyy.queries.push($$[$0-1]);  \r\n\t\t\nbreak;\ncase 364:\n \r\n\t\t\tthis.$ = new yy.Op({left:$$[$0-5], op:$$[$0-4] , allsome:$$[$0-3], right:$$[$0-1]}); \r\n\t\t\nbreak;\ncase 365:\n \r\n\t\t\tif($$[$0-2].op == 'BETWEEN1') {\r\n\r\n\t\t\t\tif($$[$0-2].left.op == 'AND') {\r\n\t\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2].left.left,op:'AND',right:\r\n\t\t\t\t\t\tnew yy.Op({left:$$[$0-2].left.right, op:'BETWEEN', \r\n\t\t\t\t\t\t\tright1:$$[$0-2].right, right2:$$[$0]})\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2].left, op:'BETWEEN', \r\n\t\t\t\t\t\tright1:$$[$0-2].right, right2:$$[$0]});\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if($$[$0-2].op == 'NOT BETWEEN1') {\r\n\t\t\t\tif($$[$0-2].left.op == 'AND') {\r\n\t\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2].left.left,op:'AND',right:\r\n\t\t\t\t\t\tnew yy.Op({left:$$[$0-2].left.right, op:'NOT BETWEEN', \r\n\t\t\t\t\t\t\tright1:$$[$0-2].right, right2:$$[$0]})\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2].left, op:'NOT BETWEEN', \r\n\t\t\t\t\t\tright1:$$[$0-2].right, right2:$$[$0]});\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2], op:'AND', right:$$[$0]});\r\n\t\t\t}\r\n\r\n\r\n\t\t\nbreak;\ncase 366:\n this.$ = new yy.Op({left:$$[$0-2], op:'OR' , right:$$[$0]}); \nbreak;\ncase 367:\n this.$ = new yy.UniOp({op:'NOT' , right:$$[$0]}); \nbreak;\ncase 368:\n this.$ = new yy.UniOp({op:'-' , right:$$[$0]}); \nbreak;\ncase 369:\n this.$ = new yy.UniOp({op:'+' , right:$$[$0]}); \nbreak;\ncase 370:\n this.$ = new yy.UniOp({op:'#' , right:$$[$0]}); \nbreak;\ncase 371:\n this.$ = new yy.UniOp({right: $$[$0-1]}); \nbreak;\ncase 372:\n \r\n\t\t\tif(!yy.queries) yy.queries = []; \r\n\t\t\tthis.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1], queriesidx: yy.queries.length});\r\n\t\t\tyy.queries.push($$[$0-1]);  \r\n\t\t\nbreak;\ncase 373:\n \r\n\t\t\tif(!yy.queries) yy.queries = []; \r\n\t\t\tthis.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1], queriesidx: yy.queries.length});\r\n\t\t\tyy.queries.push($$[$0-1]);  \r\n\t\t\nbreak;\ncase 374:\n this.$ = new yy.Op({left: $$[$0-4], op:'IN', right:$$[$0-1]}); \nbreak;\ncase 375:\n this.$ = new yy.Op({left: $$[$0-5], op:'NOT IN', right:$$[$0-1]}); \nbreak;\ncase 376:\n this.$ = new yy.Op({left: $$[$0-3], op:'IN', right:[]}); \nbreak;\ncase 377:\n this.$ = new yy.Op({left: $$[$0-4], op:'NOT IN', right:[]}); \nbreak;\ncase 378:\n this.$ = new yy.Op({left: $$[$0-2], op:'IN', right:$$[$0]}); \nbreak;\ncase 379:\n this.$ = new yy.Op({left: $$[$0-3], op:'NOT IN', right:$$[$0]}); \nbreak;\ncase 380:\n \t\r\n/*\t\t\tvar expr = $$[$0];\r\n\t\t\tif(expr.left && expr.left.op == 'AND') {\r\n\t\t\t\tthis.$ = new yy.Op({left:new yy.Op({left:$$[$0-2], op:'BETWEEN', right:expr.left}), op:'AND', right:expr.right }); \r\n\t\t\t} else {\r\n*/\r\n\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2], op:'BETWEEN1', right:$$[$0] }); \r\n//\t\t\t}\r\n\t\t\nbreak;\ncase 381:\n\r\n//\t\t\tvar expr = $$[$0];\r\n//\t\t\tif(expr.left && expr.left.op == 'AND') {\r\n//\t\t\t\tthis.$ = new yy.Op({left:new yy.Op({left:$$[$0-2], op:'NOT BETWEEN', right:expr.left}), op:'AND', right:expr.right }); \r\n//\t\t\t} else {\r\n\t\t\t\tthis.$ = new yy.Op({left:$$[$0-2], op:'NOT BETWEEN1', right:$$[$0] }); \r\n//\t\t\t}\r\n\t\t\nbreak;\ncase 382:\n this.$ = new yy.Op({op:'IS' , left:$$[$0-2], right:$$[$0]}); \nbreak;\ncase 383:\n this.$ = new yy.Convert({expression:$$[$0-2]}) ; yy.extend(this.$,$$[$0]) ; \nbreak;\ncase 384: case 385:\n this.$ = $$[$0];\nbreak;\ncase 386:\n this.$ = $$[$0-1];\nbreak;\ncase 393:\n this.$ = 'ALL'; \nbreak;\ncase 394:\n this.$ = 'SOME'; \nbreak;\ncase 395:\n this.$ = 'ANY'; \nbreak;\ncase 396:\n this.$ = new yy.Update({table:$$[$0-4], columns:$$[$0-2], where:$$[$0]}); \nbreak;\ncase 397:\n this.$ = new yy.Update({table:$$[$0-2], columns:$$[$0]}); \nbreak;\ncase 400:\n this.$ = new yy.SetColumn({column:$$[$0-2], expression:$$[$0]})\nbreak;\ncase 401:\n this.$ = new yy.Delete({table:$$[$0-2], where:$$[$0]});\nbreak;\ncase 402:\n this.$ = new yy.Delete({table:$$[$0]});\nbreak;\ncase 403:\n this.$ = new yy.Insert({into:$$[$0-2], values: $$[$0]}); \nbreak;\ncase 404:\n this.$ = new yy.Insert({into:$$[$0-2], default: true}) ; \nbreak;\ncase 405:\n this.$ = new yy.Insert({into:$$[$0-5], columns: $$[$0-3], values: $$[$0]}); \nbreak;\ncase 406:\n this.$ = new yy.Insert({into:$$[$0-1], select: $$[$0]}); \nbreak;\ncase 407:\n this.$ = new yy.Insert({into:$$[$0-4], columns: $$[$0-2], select: $$[$0]}); \nbreak;\ncase 410:\n this.$ = [$$[$0-1]]; \nbreak;\ncase 413:\nthis.$ = $$[$0-4]; $$[$0-4].push($$[$0-1])\nbreak;\ncase 414: case 415: case 417: case 425:\nthis.$ = $$[$0-2]; $$[$0-2].push($$[$0])\nbreak;\ncase 426:\n \r\n\t\t\tthis.$ = new yy.CreateTable({table:$$[$0-4]}); \r\n\t\t\tyy.extend(this.$,$$[$0-7]); \r\n\t\t\tyy.extend(this.$,$$[$0-6]); \r\n\t\t\tyy.extend(this.$,$$[$0-5]); \r\n\t\t\tyy.extend(this.$,$$[$0-2]); \r\n\t\t\tyy.extend(this.$,$$[$0]); \r\n\t\t\nbreak;\ncase 427:\n \r\n\t\t\tthis.$ = new yy.CreateTable({table:$$[$0]}); \r\n\t\t\tyy.extend(this.$,$$[$0-3]); \r\n\t\t\tyy.extend(this.$,$$[$0-2]); \r\n\t\t\tyy.extend(this.$,$$[$0-1]); \r\n\t\t\nbreak;\ncase 429:\n this.$ = {class:true}; \nbreak;\ncase 438:\n this.$ = {temporary:true}; \nbreak;\ncase 440:\n this.$ = {ifnotexists: true}; \nbreak;\ncase 441:\n this.$ = {columns: $$[$0-2], constraints: $$[$0]}; \nbreak;\ncase 442:\n this.$ = {columns: $$[$0]}; \nbreak;\ncase 443:\n this.$ = {as: $$[$0]} \nbreak;\ncase 444: case 468:\n this.$ = [$$[$0]];\nbreak;\ncase 446: case 447: case 448: case 449: case 450:\n $$[$0].constraintid = $$[$0-1]; this.$ = $$[$0]; \nbreak;\ncase 453:\n this.$ = {type: 'CHECK', expression: $$[$0-1]}; \nbreak;\ncase 454:\n this.$ = {type: 'PRIMARY KEY', columns: $$[$0-1], clustered:($$[$0-3]+'').toUpperCase()}; \nbreak;\ncase 455:\n this.$ = {type: 'FOREIGN KEY', columns: $$[$0-5], fktable: $$[$0-2], fkcolumns: $$[$0-1]}; \nbreak;\ncase 456: case 483: case 514: case 550: case 568: case 571: case 590:\n this.$ = $$[$0-1]; \nbreak;\ncase 461:\n \r\n\t\t\tthis.$ = {type: 'UNIQUE', columns: $$[$0-1], clustered:($$[$0-3]+'').toUpperCase()};\r\n\t\t\nbreak;\ncase 470:\n this.$ = new yy.ColumnDef({columnid:$$[$0-2]}); yy.extend(this.$,$$[$0-1]); yy.extend(this.$,$$[$0]);\nbreak;\ncase 471:\n this.$ = new yy.ColumnDef({columnid:$$[$0-1]}); yy.extend(this.$,$$[$0]); \nbreak;\ncase 472:\n this.$ = new yy.ColumnDef({columnid:$$[$0], dbtypeid: ''}); \nbreak;\ncase 473:\n this.$ = {dbtypeid: $$[$0-5], dbsize: $$[$0-3], dbprecision: +$$[$0-1]} \nbreak;\ncase 474:\n this.$ = {dbtypeid: $$[$0-3], dbsize: $$[$0-1]} \nbreak;\ncase 475:\n this.$ = {dbtypeid: $$[$0]} \nbreak;\ncase 476:\n this.$ = {dbtypeid: 'ENUM', enumvalues: $$[$0-1]} \nbreak;\ncase 477: case 670:\n this.$ = +$$[$0]; \nbreak;\ncase 479:\nthis.$ = undefined\nbreak;\ncase 481:\n \r\n\t\t\tyy.extend($$[$0-1],$$[$0]); this.$ = $$[$0-1];\r\n\t\t\nbreak;\ncase 484:\nthis.$ = {primarykey:true};\nbreak;\ncase 485: case 486:\nthis.$ = {foreignkey:{table:$$[$0-1], columnid: $$[$0]}};\nbreak;\ncase 487:\n this.$ = {identity: {value:$$[$0-3],step:$$[$0-1]}} \nbreak;\ncase 488:\n this.$ = {identity: {value:1,step:1}} \nbreak;\ncase 489:\nthis.$ = {default:$$[$0]};\nbreak;\ncase 490:\nthis.$ = {default:$$[$0-1]};\nbreak;\ncase 491:\nthis.$ = {null:true}; \nbreak;\ncase 492:\nthis.$ = {notnull:true}; \nbreak;\ncase 493:\nthis.$ = {check:$$[$0]}; \nbreak;\ncase 494:\nthis.$ = {unique:true}; \nbreak;\ncase 495:\n this.$ = new yy.DropTable({table:$$[$0],type:$$[$0-2]}); yy.extend(this.$, $$[$0-1]); \nbreak;\ncase 497:\n this.$ = {ifexists: true};\nbreak;\ncase 498:\n this.$ = new yy.AlterTable({table:$$[$0-3], renameto: $$[$0]});\nbreak;\ncase 499:\n this.$ = new yy.AlterTable({table:$$[$0-3], addcolumn: $$[$0]});\nbreak;\ncase 500:\n this.$ = new yy.AlterTable({table:$$[$0-3], modifycolumn: $$[$0]});\nbreak;\ncase 501:\n this.$ = new yy.AlterTable({table:$$[$0-5], renamecolumn: $$[$0-2], to: $$[$0]});\nbreak;\ncase 502:\n this.$ = new yy.AlterTable({table:$$[$0-3], dropcolumn: $$[$0]});\nbreak;\ncase 503:\n this.$ = new yy.AlterTable({table:$$[$0-2], renameto: $$[$0]});\nbreak;\ncase 504:\n this.$ = new yy.AttachDatabase({databaseid:$$[$0], engineid:$$[$0-2].toUpperCase() });\nbreak;\ncase 505:\n this.$ = new yy.AttachDatabase({databaseid:$$[$0-3], engineid:$$[$0-5].toUpperCase(), args:$$[$0-1] });\nbreak;\ncase 506:\n this.$ = new yy.AttachDatabase({databaseid:$$[$0-2], engineid:$$[$0-4].toUpperCase(), as:$$[$0] });\nbreak;\ncase 507:\n this.$ = new yy.AttachDatabase({databaseid:$$[$0-5], engineid:$$[$0-7].toUpperCase(), as:$$[$0], args:$$[$0-3]});\nbreak;\ncase 508:\n this.$ = new yy.DetachDatabase({databaseid:$$[$0]});\nbreak;\ncase 509:\n this.$ = new yy.CreateDatabase({databaseid:$$[$0] }); yy.extend(this.$,$$[$0]); \nbreak;\ncase 510:\n this.$ = new yy.CreateDatabase({engineid:$$[$0-4].toUpperCase(), databaseid:$$[$0-1], as:$$[$0] }); yy.extend(this.$,$$[$0-2]); \nbreak;\ncase 511:\n this.$ = new yy.CreateDatabase({engineid:$$[$0-7].toUpperCase(), databaseid:$$[$0-4], args:$$[$0-2], as:$$[$0] }); yy.extend(this.$,$$[$0-5]); \nbreak;\ncase 512:\n this.$ = new yy.CreateDatabase({engineid:$$[$0-4].toUpperCase(), \r\n\t\t    as:$$[$0], args:[$$[$0-1]] }); yy.extend(this.$,$$[$0-2]); \nbreak;\ncase 513:\nthis.$ = undefined;\nbreak;\ncase 515: case 516:\n this.$ = new yy.UseDatabase({databaseid: $$[$0] });\nbreak;\ncase 517:\n this.$ = new yy.DropDatabase({databaseid: $$[$0] }); yy.extend(this.$,$$[$0-1]); \nbreak;\ncase 518: case 519:\n this.$ = new yy.DropDatabase({databaseid: $$[$0], engineid:$$[$0-3].toUpperCase() }); yy.extend(this.$,$$[$0-1]); \nbreak;\ncase 520:\n this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1]})\nbreak;\ncase 521:\n this.$ = new yy.CreateIndex({indexid:$$[$0-5], table:$$[$0-3], columns:$$[$0-1], unique:true})\nbreak;\ncase 522:\n this.$ = new yy.DropIndex({indexid:$$[$0]});\nbreak;\ncase 523:\n this.$ = new yy.ShowDatabases();\nbreak;\ncase 524:\n this.$ = new yy.ShowDatabases({like:$$[$0]});\nbreak;\ncase 525:\n this.$ = new yy.ShowDatabases({engineid:$$[$0-1].toUpperCase() });\nbreak;\ncase 526:\n this.$ = new yy.ShowDatabases({engineid:$$[$0-3].toUpperCase() , like:$$[$0]});\nbreak;\ncase 527:\n this.$ = new yy.ShowTables();\nbreak;\ncase 528:\n this.$ = new yy.ShowTables({like:$$[$0]});\nbreak;\ncase 529:\n this.$ = new yy.ShowTables({databaseid: $$[$0]});\nbreak;\ncase 530:\n this.$ = new yy.ShowTables({like:$$[$0], databaseid: $$[$0-2]});\nbreak;\ncase 531:\n this.$ = new yy.ShowColumns({table: $$[$0]});\nbreak;\ncase 532:\n this.$ = new yy.ShowColumns({table: $$[$0-2], databaseid:$$[$0]});\nbreak;\ncase 533:\n this.$ = new yy.ShowIndex({table: $$[$0]});\nbreak;\ncase 534:\n this.$ = new yy.ShowIndex({table: $$[$0-2], databaseid: $$[$0]});\nbreak;\ncase 535:\n this.$ = new yy.ShowCreateTable({table: $$[$0]});\nbreak;\ncase 536:\n this.$ = new yy.ShowCreateTable({table: $$[$0-2], databaseid:$$[$0]});\nbreak;\ncase 537:\n\r\n\t\t\tthis.$ = new yy.CreateTable({table:$$[$0-6],view:true,select:$$[$0-1],viewcolumns:$$[$0-4]}); \r\n\t\t\tyy.extend(this.$,$$[$0-9]); \r\n\t\t\tyy.extend(this.$,$$[$0-7]); \r\n\t\t\nbreak;\ncase 538:\n \r\n\t\t\tthis.$ = new yy.CreateTable({table:$$[$0-3],view:true,select:$$[$0-1]}); \r\n\t\t\tyy.extend(this.$,$$[$0-6]); \r\n\t\t\tyy.extend(this.$,$$[$0-4]); \r\n\t\t\nbreak;\ncase 542:\n this.$ = new yy.DropTable({table:$$[$0], view:true}); yy.extend(this.$, $$[$0-1]); \nbreak;\ncase 543:\n this.$ = new yy.Help({subject:$$[$0].value.toUpperCase()} ) ; \nbreak;\ncase 544:\n this.$ = new yy.Help() ; \nbreak;\ncase 545:\n this.$ = new yy.ExpressionStatement({expression:$$[$0]}); \nbreak;\ncase 546:\n this.$ = new yy.Source({url:$$[$0].value}); \nbreak;\ncase 547:\n this.$ = new yy.Assert({value:$$[$0]}); \nbreak;\ncase 548:\n this.$ = new yy.Assert({value:$$[$0].value}); \nbreak;\ncase 549:\n this.$ = new yy.Assert({value:$$[$0], message:$$[$0-2]}); \nbreak;\ncase 551: case 562: case 564:\n this.$ = $$[$0].value; \nbreak;\ncase 552: case 560:\n this.$ = +$$[$0].value; \nbreak;\ncase 553:\n this.$ = (!!$$[$0].value); \nbreak;\ncase 561:\n this.$ = \"\"+$$[$0].value; \nbreak;\ncase 567:\n this.$ = $$[$0-1]\nbreak;\ncase 569: case 572:\n this.$ = $$[$0-2]; \nbreak;\ncase 570:\n this.$ = {}; \nbreak;\ncase 573:\n this.$ = []; \nbreak;\ncase 574:\n yy.extend($$[$0-2],$$[$0]); this.$ = $$[$0-2]; \nbreak;\ncase 576:\n this.$ = {}; this.$[$$[$0-2].substr(1,$$[$0-2].length-2)] = $$[$0]; \nbreak;\ncase 577: case 578:\n this.$ = {}; this.$[$$[$0-2]] = $$[$0]; \nbreak;\ncase 581:\n this.$ = new yy.SetVariable({variable:$$[$0-1].toLowerCase(), value:$$[$0]});\nbreak;\ncase 582:\n this.$ = new yy.SetVariable({variable:$$[$0-2], expression:$$[$0], method:$$[$0-3]});\nbreak;\ncase 583:\n this.$ = new yy.SetVariable({variable:$$[$0-3], props: $$[$0-2], expression:$$[$0], method:$$[$0-4]});\nbreak;\ncase 584:\nthis.$ = '@'; \nbreak;\ncase 585:\nthis.$ = '$'; \nbreak;\ncase 591:\n this.$ = true; \nbreak;\ncase 592:\n this.$ = false; \nbreak;\ncase 593:\n this.$ = new yy.CommitTransaction(); \nbreak;\ncase 594:\n this.$ = new yy.RollbackTransaction(); \nbreak;\ncase 595:\n this.$ = new yy.BeginTransaction(); \nbreak;\ncase 596:\n this.$ = new yy.If({expression:$$[$0-2],thenstat:$$[$0-1], elsestat:$$[$0]}); \r\n\t\t\tif($$[$0-1].exists) this.$.exists = $$[$0-1].exists;\r\n\t\t\tif($$[$0-1].queries) this.$.queries = $$[$0-1].queries;\r\n\t\t\nbreak;\ncase 597:\n \r\n\t\t\tthis.$ = new yy.If({expression:$$[$0-1],thenstat:$$[$0]}); \r\n\t\t\tif($$[$0].exists) this.$.exists = $$[$0].exists;\r\n\t\t\tif($$[$0].queries) this.$.queries = $$[$0].queries;\r\n\t\t\nbreak;\ncase 598:\nthis.$ = $$[$0];\nbreak;\ncase 599:\n this.$ = new yy.While({expression:$$[$0-1],loopstat:$$[$0]}); \r\n\t\t\tif($$[$0].exists) this.$.exists = $$[$0].exists;\r\n\t\t\tif($$[$0].queries) this.$.queries = $$[$0].queries;\r\n\t\t\nbreak;\ncase 600:\n this.$ = new yy.Continue(); \nbreak;\ncase 601:\n this.$ = new yy.Break(); \nbreak;\ncase 602:\n this.$ = new yy.BeginEnd({statements:$$[$0-1]}); \nbreak;\ncase 603:\n this.$ = new yy.Print({exprs:$$[$0]});\nbreak;\ncase 604:\n this.$ = new yy.Print({select:$$[$0]});\nbreak;\ncase 605:\n this.$ = new yy.Require({paths:$$[$0]}); \nbreak;\ncase 606:\n this.$ = new yy.Require({plugins:$$[$0]}); \nbreak;\ncase 607: case 608:\nthis.$ = $$[$0].toUpperCase(); \nbreak;\ncase 609:\n this.$ = new yy.Echo({expr:$$[$0]}); \nbreak;\ncase 614:\n this.$ = new yy.Declare({declares:$$[$0]}); \nbreak;\ncase 617:\n this.$ = {variable: $$[$0-1]}; yy.extend(this.$,$$[$0]); \nbreak;\ncase 618:\n this.$ = {variable: $$[$0-2]}; yy.extend(this.$,$$[$0]); \nbreak;\ncase 619:\n this.$ = {variable: $$[$0-3], expression:$$[$0]}; yy.extend(this.$,$$[$0-2]);\nbreak;\ncase 620:\n this.$ = {variable: $$[$0-4], expression:$$[$0]}; yy.extend(this.$,$$[$0-2]);\nbreak;\ncase 621:\n this.$ = new yy.TruncateTable({table:$$[$0]});\nbreak;\ncase 622:\n \r\n\t\t\tthis.$ = new yy.Merge(); yy.extend(this.$,$$[$0-4]); yy.extend(this.$,$$[$0-3]); \r\n\t\t\tyy.extend(this.$,$$[$0-2]);\r\n\t\t\tyy.extend(this.$,{matches:$$[$0-1]});yy.extend(this.$,$$[$0]);\r\n\t\t\nbreak;\ncase 623: case 624:\n this.$ = {into: $$[$0]}; \nbreak;\ncase 626:\n this.$ = {on:$$[$0]}; \nbreak;\ncase 631:\n this.$ = {matched:true, action:$$[$0]} \nbreak;\ncase 632:\n this.$ = {matched:true, expr: $$[$0-2], action:$$[$0]} \nbreak;\ncase 633:\n this.$ = {delete:true}; \nbreak;\ncase 634:\n this.$ = {update:$$[$0]}; \nbreak;\ncase 635: case 636:\n this.$ = {matched:false, bytarget: true, action:$$[$0]} \nbreak;\ncase 637: case 638:\n this.$ = {matched:false, bytarget: true, expr:$$[$0-2], action:$$[$0]} \nbreak;\ncase 639:\n this.$ = {matched:false, bysource: true, action:$$[$0]} \nbreak;\ncase 640:\n this.$ = {matched:false, bysource: true, expr:$$[$0-2], action:$$[$0]} \nbreak;\ncase 641:\n this.$ = {insert:true, values:$$[$0]}; \nbreak;\ncase 642:\n this.$ = {insert:true, values:$$[$0], columns:$$[$0-3]}; \nbreak;\ncase 643:\n this.$ = {insert:true, defaultvalues:true}; \nbreak;\ncase 644:\n this.$ = {insert:true, defaultvalues:true, columns:$$[$0-3]}; \nbreak;\ncase 646:\n this.$ = {output:{columns:$$[$0]}} \nbreak;\ncase 647:\n this.$ = {output:{columns:$$[$0-3], intovar: $$[$0], method:$$[$0-1]}} \nbreak;\ncase 648:\n this.$ = {output:{columns:$$[$0-2], intotable: $$[$0]}} \nbreak;\ncase 649:\n this.$ = {output:{columns:$$[$0-5], intotable: $$[$0-3], intocolumns:$$[$0-1]}} \nbreak;\ncase 650:\n\r\n\t\t\tthis.$ = new yy.CreateVertex({class:$$[$0-3],sharp:$$[$0-2], name:$$[$0-1]}); \r\n\t\t\tyy.extend(this.$,$$[$0]); \r\n\t\t\nbreak;\ncase 653:\n this.$ = {sets:$$[$0]}; \nbreak;\ncase 654:\n this.$ = {content:$$[$0]}; \nbreak;\ncase 655:\n this.$ = {select:$$[$0]}; \nbreak;\ncase 656:\n\r\n\t\t\tthis.$ = new yy.CreateEdge({from:$$[$0-3],to:$$[$0-1],name:$$[$0-5]});\r\n\t\t\tyy.extend(this.$,$$[$0]); \r\n\t\t\nbreak;\ncase 657:\n this.$ = new yy.CreateGraph({graph:$$[$0]}); \nbreak;\ncase 658:\n this.$ = new yy.CreateGraph({from:$$[$0]}); \nbreak;\ncase 661:\n \r\n\t\t\tthis.$ = $$[$0-2]; \r\n\t\t\tif($$[$0-1]) this.$.json = new yy.Json({value:$$[$0-1]});\r\n\t\t\tif($$[$0]) this.$.as = $$[$0];\r\n\t\t\nbreak;\ncase 662:\n \r\n\t\t\tthis.$ = {source:$$[$0-6], target: $$[$0]};\r\n\t\t\tif($$[$0-3]) this.$.json = new yy.Json({value:$$[$0-3]});\r\n\t\t\tif($$[$0-2]) this.$.as = $$[$0-2];\r\n\t\t\tyy.extend(this.$,$$[$0-4]);\r\n\t\t\t;\r\n\t\t\nbreak;\ncase 664:\n this.$ = {vars:$$[$0], method:$$[$0-1]}; \nbreak;\ncase 667:\n \r\n\t\t\tvar s3 = $$[$0-1];\r\n\t\t\tthis.$ = {prop:$$[$0-3], sharp:$$[$0-2], name:(typeof s3 == 'undefined')?undefined:s3.substr(1,s3.length-2), class:$$[$0]}; \r\n\t\t\nbreak;\ncase 673:\n this.$ = new yy.Term({termid:$$[$0]}); \nbreak;\ncase 674:\n this.$ = new yy.Term({termid:$$[$0-3],args:$$[$0-1]}); \nbreak;\ncase 675:\n this.$ = new yy.AddRule({left:$$[$0-2], right:$$[$0]}); \nbreak;\ncase 676:\n this.$ = new yy.AddRule({right:$$[$0]}); \nbreak;\ncase 684: case 698: case 700: case 702: case 706: case 708: case 710: case 712: case 714:\nthis.$ = [];\nbreak;\ncase 685: case 693: case 695: case 699: case 701: case 703: case 707: case 709: case 711: case 713: case 715:\n$$[$0-1].push($$[$0]);\nbreak;\ncase 692: case 694:\nthis.$ = [$$[$0]];\nbreak;\n}\n},\ntable: [o([8,260,441],$V0,{6:1,7:2,10:3,11:4,15:5,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,38:29,39:30,40:31,41:32,42:33,43:34,44:35,45:36,46:37,48:39,49:40,50:41,51:42,52:43,53:44,54:45,55:46,56:47,57:48,58:49,59:50,60:51,61:52,62:53,63:54,64:55,72:67,434:88,153:92,3:93,4:$V1,5:$V2,12:$V3,47:$V4,65:$V5,81:$V6,99:$V7,121:$V8,128:$V9,158:$Va,227:$Vb,281:$Vc,283:$Vd,284:$Ve,291:$Vf,337:$Vg,340:$Vh,341:$Vi,344:$Vj,346:$Vk,348:$Vl,349:$Vm,357:$Vn,358:$Vo,359:$Vp,376:$Vq,378:$Vr,379:$Vs,381:$Vt,382:$Vu,383:$Vv,384:$Vw,385:$Vx,389:$Vy,390:$Vz,393:$VA,394:$VB,439:$VC,440:$VD}),{1:[3]},{8:[1,97],9:98,260:$VE,398:100,400:101,401:102,441:$VF},o($VG,[2,5]),o($VG,[2,6]),o($VH,[2,9]),o($VG,$V0,{15:5,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,38:29,39:30,40:31,41:32,42:33,43:34,44:35,45:36,46:37,48:39,49:40,50:41,51:42,52:43,53:44,54:45,55:46,56:47,57:48,58:49,59:50,60:51,61:52,62:53,63:54,64:55,72:67,434:88,153:92,3:93,10:104,4:$V1,5:$V2,13:[1,105],47:$V4,65:$V5,81:$V6,99:$V7,121:$V8,128:$V9,158:$Va,227:$Vb,281:$Vc,283:$Vd,284:$Ve,291:$Vf,337:$Vg,340:$Vh,341:$Vi,344:$Vj,346:$Vk,348:$Vl,349:$Vm,357:$Vn,358:$Vo,359:$Vp,376:$Vq,378:$Vr,379:$Vs,381:$Vt,382:$Vu,383:$Vv,384:$Vw,385:$Vx,389:$Vy,390:$Vz,393:$VA,394:$VB,439:$VC,440:$VD}),o($VH,[2,11]),o($VH,[2,12]),o($VH,[2,13]),o($VH,[2,14]),o($VH,[2,15]),o($VH,[2,16]),o($VH,[2,17]),o($VH,[2,18]),o($VH,[2,19]),o($VH,[2,20]),o($VH,[2,21]),o($VH,[2,22]),o($VH,[2,23]),o($VH,[2,24]),o($VH,[2,25]),o($VH,[2,26]),o($VH,[2,27]),o($VH,[2,28]),o($VH,[2,29]),o($VH,[2,30]),o($VH,[2,31]),o($VH,[2,32]),o($VH,[2,33]),o($VH,[2,34]),o($VH,[2,35]),o($VH,[2,36]),o($VH,[2,37]),o($VH,[2,38]),o($VH,[2,39]),o($VH,[2,40]),o($VH,[2,41]),o($VH,[2,42]),o($VH,[2,43]),o($VH,[2,44]),o($VH,[2,45]),o($VH,[2,46]),o($VH,[2,47]),o($VH,[2,48]),o($VH,[2,49]),o($VH,[2,50]),o($VH,[2,51]),o($VH,[2,52]),o($VH,[2,53]),o($VH,[2,54]),o($VH,[2,55]),o($VH,[2,56]),o($VH,[2,57]),o($VH,[2,58]),o($VH,[2,59]),{297:[1,106]},{3:107,4:$V1,5:$V2},o($VI,[2,437],{3:109,292:113,4:$V1,5:$V2,109:$VJ,110:[1,114],156:[1,111],163:[1,110],301:[1,116],345:[1,108],413:[1,112]}),{119:$VK,391:117,392:118},{110:$VL,152:[1,120]},{345:[1,122]},{3:124,4:$V1,5:$V2,163:[1,125],338:126,345:[1,123],350:[1,127],460:[1,128],461:[1,129]},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:130,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vi1,[2,408],{285:184,168:[1,185]}),{3:196,4:$V1,5:$V2,70:$Vj1,107:$Vk1,115:$VR,118:190,119:$VS,124:$VT,150:$VX,168:[1,188],169:191,170:193,171:192,172:194,179:187,182:195,249:$V91,250:$Va1,255:$Ve1,360:171,361:$Vg1,365:$Vh1,395:186},{297:[1,198]},o($Vl1,[2,682],{73:199,442:[1,200]}),o($Vm1,[2,684],{82:201}),{3:205,4:$V1,5:$V2,160:[1,203],163:[1,206],291:[1,202],297:[1,207],345:[1,204]},{297:[1,208]},{3:211,4:$V1,5:$V2,66:209,68:210},o([258,260,441],$V0,{10:3,11:4,15:5,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,38:29,39:30,40:31,41:32,42:33,43:34,44:35,45:36,46:37,48:39,49:40,50:41,51:42,52:43,53:44,54:45,55:46,56:47,57:48,58:49,59:50,60:51,61:52,62:53,63:54,64:55,72:67,434:88,153:92,3:93,7:213,4:$V1,5:$V2,12:$V3,47:$V4,65:$V5,81:$V6,99:$V7,121:$V8,128:$V9,158:$Va,227:$Vb,281:$Vc,283:$Vd,284:$Ve,291:$Vf,337:$Vg,340:$Vh,341:$Vi,344:$Vj,346:$Vk,348:$Vl,349:$Vm,357:$Vn,358:$Vo,359:$Vp,376:$Vq,377:[1,212],378:$Vr,379:$Vs,381:$Vt,382:$Vu,383:$Vv,384:$Vw,385:$Vx,389:$Vy,390:$Vz,393:$VA,394:$VB,439:$VC,440:$VD}),{377:[1,214]},{377:[1,215]},{3:217,4:$V1,5:$V2,345:[1,216]},{3:219,4:$V1,5:$V2,169:218},o($VH,[2,544],{91:220,107:$VP,251:$Vb1}),o($Vn1,[2,282]),{91:221,107:$VP,251:$Vb1},{3:232,4:$V1,5:$V2,91:227,106:$VO,107:[1,224],115:$VR,118:222,119:$Vo1,124:$VT,150:$VX,166:226,170:228,171:230,220:229,226:$Vp1,232:223,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,255:$Ve1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:233,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($VH,[2,600]),o($VH,[2,601]),{3:150,4:$V1,5:$V2,36:235,51:147,70:$VM,72:67,81:$V6,89:134,91:137,100:236,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,153:92,158:$Va,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,233:234,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:242,4:$V1,5:$V2,91:239,107:$VP,251:$Vb1,386:237,387:238,388:240,389:$Vq1},{3:243,4:$V1,5:$V2,115:$Vr1,119:$Vs1,372:244},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:247,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{439:[1,248]},{3:93,4:$V1,5:$V2,283:$Vt1,434:250,438:249},{3:232,4:$V1,5:$V2,170:252,249:$V91,250:$Va1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:253,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o([8,71,93,104,134,139,140,152,168,200,213,258,260,262,441,442,450,462],$Vu1,{155:257,136:[1,256],154:[1,254],156:[1,255],165:$Vv1}),o($Vw1,[2,673],{70:[1,259]}),o($Vx1,[2,128],{123:[1,260],159:[1,261],160:[1,262],161:[1,263],162:[1,264],163:[1,265],164:[1,266]}),o($Vy1,[2,1]),o($Vy1,[2,2]),{1:[2,3]},o($VG,$V0,{15:5,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,38:29,39:30,40:31,41:32,42:33,43:34,44:35,45:36,46:37,48:39,49:40,50:41,51:42,52:43,53:44,54:45,55:46,56:47,57:48,58:49,59:50,60:51,61:52,62:53,63:54,64:55,72:67,434:88,153:92,3:93,10:267,4:$V1,5:$V2,47:$V4,65:$V5,81:$V6,99:$V7,121:$V8,128:$V9,158:$Va,227:$Vb,281:$Vc,283:$Vd,284:$Ve,291:$Vf,337:$Vg,340:$Vh,341:$Vi,344:$Vj,346:$Vk,348:$Vl,349:$Vm,357:$Vn,358:$Vo,359:$Vp,376:$Vq,378:$Vr,379:$Vs,381:$Vt,382:$Vu,383:$Vv,384:$Vw,385:$Vx,389:$Vy,390:$Vz,393:$VA,394:$VB,439:$VC,440:$VD}),o([4,5,8,47,65,81,99,121,128,158,227,258,260,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,439,440,441],[2,680]),o([4,5,8,47,65,81,99,121,128,158,227,258,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,439,440,441],[2,681],{400:268,401:269,260:$VE}),o($Vz1,[2,629]),o($Vz1,[2,630]),{126:[1,271],193:[1,270]},o($VG,[2,7]),{14:[1,272]},{3:219,4:$V1,5:$V2,169:273},{345:[1,274]},o($Vi1,$VA1,{294:275,128:$VB1}),{345:[1,277]},{3:278,4:$V1,5:$V2},{163:[1,279]},o([8,67,258,260,262,441,465,466,469,470,471],$VC1,{414:280,415:282,416:283,419:284,3:285,426:286,4:$V1,5:$V2,152:[1,281],453:$VD1,467:$VE1,468:$VF1}),{105:[1,293],293:290,297:[1,292],350:[1,291]},{152:[2,758],412:294,464:[1,295]},o($VG1,[2,752],{406:296,453:[1,297]}),o($VI,[2,438]),o($VH,[2,614],{67:[1,298]}),o($VH1,[2,615]),{3:299,4:$V1,5:$V2},{3:219,4:$V1,5:$V2,169:300},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:301,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:302,4:$V1,5:$V2},o($Vi1,$VI1,{339:303,128:$VJ1}),{345:[1,305]},{3:306,4:$V1,5:$V2},o($Vi1,$VI1,{339:307,128:$VJ1}),o($Vi1,$VI1,{339:308,128:$VJ1}),o($VK1,[2,746]),o($VK1,[2,747]),o($VL1,$V0,{15:5,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,38:29,39:30,40:31,41:32,42:33,43:34,44:35,45:36,46:37,48:39,49:40,50:41,51:42,52:43,53:44,54:45,55:46,56:47,57:48,58:49,59:50,60:51,61:52,62:53,63:54,64:55,72:67,434:88,153:92,3:93,10:309,272:330,4:$V1,5:$V2,8:$VM1,47:$V4,65:$V5,81:$V6,90:$VN1,97:$VO1,98:$VP1,99:$VQ1,108:$VR1,112:$VS1,113:$VT1,114:$VU1,121:$V8,126:$VV1,128:$V9,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,158:$Va,227:$Vb,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2,281:$Vc,283:$Vd,284:$Ve,291:$Vf,337:$Vg,340:$Vh,341:$Vi,344:$Vj,346:$Vk,348:$Vl,349:$Vm,357:$Vn,358:$Vo,359:$Vp,376:$Vq,378:$Vr,379:$Vs,381:$Vt,382:$Vu,383:$Vv,384:$Vw,385:$Vx,389:$Vy,390:$Vz,393:$VA,394:$VB,439:$VC,440:$VD}),o($Vn1,[2,261]),o($Vn1,[2,262]),o($Vn1,[2,263]),o($Vn1,[2,264]),o($Vn1,[2,265]),o($Vn1,[2,266]),o($Vn1,[2,268]),o($Vn1,[2,269]),o($Vn1,[2,270]),o($Vn1,[2,271]),o($Vn1,[2,272]),o($Vn1,[2,273]),o($Vn1,[2,274]),o($Vn1,[2,275]),o($Vn1,[2,276]),{3:150,4:$V1,5:$V2,24:343,33:340,36:339,51:147,70:$VM,72:67,81:$V6,89:134,91:137,100:342,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,153:92,158:$Va,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,225:341,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,284:$Ve,291:[1,345],360:171,361:$Vg1,365:$Vh1,454:[1,344]},o($Vn1,[2,280]),o($Vn1,[2,281]),{70:[1,346]},o($Vn1,$Vc2,{70:$Vd2,116:[1,348]}),o($Ve2,[2,316]),o($Ve2,[2,317]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:349,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:350,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:351,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:352,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vn1,[2,256]),o([4,5,8,47,65,67,69,70,71,81,90,93,97,98,99,104,105,106,107,108,111,112,113,114,115,119,120,121,124,126,128,134,139,140,141,142,148,149,150,152,156,158,168,176,178,190,191,192,193,194,195,196,197,198,200,207,210,211,213,215,226,227,228,229,231,239,240,241,242,243,244,245,246,247,249,250,251,252,253,255,258,260,261,262,263,264,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,287,291,300,312,313,317,318,337,340,341,344,346,348,349,357,358,359,361,365,367,369,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,450,451,452,453,462,472,474,475],[2,320]),o($Vf2,$Vg2),o($Vf2,[2,322]),o([4,5,8,47,65,67,69,71,81,90,93,97,98,99,104,106,107,108,112,113,114,120,121,126,128,134,139,140,141,142,148,149,152,156,158,168,176,178,190,191,192,193,194,195,196,200,207,210,211,213,227,251,252,258,260,261,262,263,264,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,287,291,300,312,313,317,318,337,340,341,344,346,348,349,357,358,359,367,369,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],[2,323]),{254:353,453:[1,354],457:[1,355]},{3:356,4:$V1,5:$V2},o($Ve2,[2,328]),o($Ve2,[2,329]),{3:357,4:$V1,5:$V2,70:$Vh2,91:359,106:$VO,107:$VP,115:$VR,124:$VT,150:$VX,166:360,170:361,171:362,249:$V91,250:$Va1,251:$Vb1,255:$Ve1,360:363,365:$Vh1},{70:[1,364]},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:365,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,256:366,259:367,260:$Vi2,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{70:[1,369]},{70:[1,370]},o($Vj2,[2,555]),{3:384,4:$V1,5:$V2,70:$Vk2,89:380,91:378,106:$VO,107:$VP,115:$VR,118:375,119:$Vo1,124:$VT,150:$VX,166:377,170:379,171:382,220:381,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,255:$Ve1,360:171,361:$Vg1,362:371,363:374,364:376,365:$Vh1,368:372,369:[1,373]},{3:385,4:$V1,5:$V2,170:386,249:$V91,250:$Va1},{70:[2,305]},{70:[2,306]},{70:[2,307]},{70:[2,308]},{70:[2,309]},{70:[2,310]},{70:[2,311]},{70:[2,312]},{70:[2,313]},{3:392,4:$V1,5:$V2,106:$Vl2,107:$Vm2,366:387,367:[1,388],370:389},{3:219,4:$V1,5:$V2,169:393},o($Vi1,[2,409]),{198:[1,395],396:394},{198:[2,623]},{3:196,4:$V1,5:$V2,70:$Vj1,107:$Vk1,115:$VR,118:190,119:$VS,124:$VT,150:$VX,169:191,170:193,171:192,172:194,179:396,182:195,249:$V91,250:$Va1,255:$Ve1,360:171,361:$Vg1,365:$Vh1},{36:397,72:67,81:$V6,153:92,158:$Va},o($Vn2,[2,720],{180:398,452:[1,399]}),o($Vo2,[2,161],{3:400,4:$V1,5:$V2,69:[1,401]}),o($Vo2,[2,164],{3:402,4:$V1,5:$V2,69:[1,403]}),o($Vo2,[2,165],{3:404,4:$V1,5:$V2,69:[1,405]}),o($Vo2,[2,168],{3:406,4:$V1,5:$V2,69:[1,407]}),o($Vo2,[2,171],{3:408,4:$V1,5:$V2,69:[1,409]}),o([4,5,8,67,69,71,93,104,134,139,140,152,176,178,190,191,192,193,194,195,196,197,198,200,213,258,260,262,441,444,462],$Vp2,{70:$Vd2,116:$Vq2}),o([4,5,8,67,69,71,93,104,134,139,140,176,178,190,191,192,193,194,195,196,197,198,200,213,258,260,262,441,462],[2,174]),{3:219,4:$V1,5:$V2,169:411},o([8,71,93,104,134,139,140,152,200,213,258,260,262,441,462],$Vr2,{74:412,168:$Vs2}),o($Vl1,[2,683]),o([8,71,258,260,262,441,444,462],$Vr2,{74:414,168:$Vs2,443:[1,415]}),{297:[1,416]},{152:[1,417]},o($VH,[2,523],{90:[1,418]}),{345:[1,419]},{152:[1,420]},o($VH,[2,527],{90:[1,421],152:[1,422]}),{3:219,4:$V1,5:$V2,169:423},{36:424,67:[1,425],72:67,81:$V6,153:92,158:$Va},o($Vt2,[2,62]),{69:[1,426]},o($VH,[2,595]),{9:98,258:[1,427],260:$VE,398:100,400:101,401:102,441:$VF},o($VH,[2,593]),o($VH,[2,594]),{3:428,4:$V1,5:$V2},o($VH,[2,516]),{121:[1,429]},o([8,67,69,70,71,81,104,120,121,123,126,152,156,158,197,252,258,260,262,287,300,312,313,317,318,337,341,342,343,441,458,459],$Vp2,{116:$Vq2}),o($VH,[2,543]),o($VH,[2,546]),o($VH,[2,547]),o($VH,[2,548]),o($VH,$Vg2,{67:[1,430]}),{3:232,4:$V1,5:$V2,70:$Vh2,91:359,106:$VO,107:$VP,115:$VR,124:$VT,150:$VX,166:360,170:361,171:362,249:$V91,250:$Va1,251:$Vb1,255:$Ve1,360:363,365:$Vh1},o($Vu2,[2,289]),o($Vu2,[2,290]),o($Vu2,[2,291]),o($Vu2,[2,292]),o($Vu2,[2,293]),o($Vu2,[2,295]),{70:$Vd2},o($VL1,$V0,{15:5,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,38:29,39:30,40:31,41:32,42:33,43:34,44:35,45:36,46:37,48:39,49:40,50:41,51:42,52:43,53:44,54:45,55:46,56:47,57:48,58:49,59:50,60:51,61:52,62:53,63:54,64:55,72:67,434:88,153:92,3:93,272:330,10:431,4:$V1,5:$V2,8:$VM1,47:$V4,65:$V5,81:$V6,90:$VN1,97:$VO1,98:$VP1,99:$VQ1,108:$VR1,112:$VS1,113:$VT1,114:$VU1,121:$V8,126:$VV1,128:$V9,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,158:$Va,227:$Vb,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2,281:$Vc,283:$Vd,284:$Ve,291:$Vf,337:$Vg,340:$Vh,341:$Vi,344:$Vj,346:$Vk,348:$Vl,349:$Vm,357:$Vn,358:$Vo,359:$Vp,376:$Vq,378:$Vr,379:$Vs,381:$Vt,382:$Vu,383:$Vv,384:$Vw,385:$Vx,389:$Vy,390:$Vz,393:$VA,394:$VB,439:$VC,440:$VD}),o($VH,[2,603],{67:$Vv2}),o($VH,[2,604]),o($Vw2,[2,318],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),o($VH,[2,605],{67:[1,434]}),o($VH,[2,606],{67:[1,435]}),o($VH1,[2,611]),o($VH1,[2,613]),o($VH1,[2,607]),o($VH1,[2,608]),{197:[1,437],371:436,375:[1,438]},{3:439,4:$V1,5:$V2},o($Vi1,[2,584]),o($Vi1,[2,585]),o($VL1,[2,545],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),{3:93,4:$V1,5:$V2,283:$Vt1,434:250,438:440},o($VH,[2,676],{67:$Vy2}),o($Vz2,[2,678]),{110:$VL},o($VH,[2,679]),o($VL1,[2,609],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),o($VA2,$Vu1,{155:442,165:$Vv1}),o($VA2,$Vu1,{155:443,165:$Vv1}),o($VA2,$Vu1,{155:444,165:$Vv1}),o($VB2,[2,716],{157:445,450:[1,446]}),{70:[1,448],106:$VO,166:447},{3:93,4:$V1,5:$V2,283:$Vt1,434:250,438:449},o($Vx1,[2,129]),o($Vx1,[2,130]),o($Vx1,[2,131]),o($Vx1,[2,132]),o($Vx1,[2,133]),o($Vx1,[2,134]),o($Vx1,[2,135]),o($VG,[2,4]),o($Vz1,[2,627]),o($Vz1,[2,628]),{141:[1,451],261:[1,450]},{193:[1,452]},o($VG,$V0,{15:5,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,38:29,39:30,40:31,41:32,42:33,43:34,44:35,45:36,46:37,48:39,49:40,50:41,51:42,52:43,53:44,54:45,55:46,56:47,57:48,58:49,59:50,60:51,61:52,62:53,63:54,64:55,72:67,434:88,153:92,3:93,10:453,4:$V1,5:$V2,47:$V4,65:$V5,81:$V6,99:$V7,121:$V8,128:$V9,158:$Va,227:$Vb,281:$Vc,283:$Vd,284:$Ve,291:$Vf,337:$Vg,340:$Vh,341:$Vi,344:$Vj,346:$Vk,348:$Vl,349:$Vm,357:$Vn,358:$Vo,359:$Vp,376:$Vq,378:$Vr,379:$Vs,381:$Vt,382:$Vu,383:$Vv,384:$Vw,385:$Vx,389:$Vy,390:$Vz,393:$VA,394:$VB,439:$VC,440:$VD}),{337:[1,457],341:[1,454],342:[1,455],343:[1,456]},{3:458,4:$V1,5:$V2},{3:459,4:$V1,5:$V2},{126:[1,460]},o($VC2,$VA1,{294:461,128:$VB1}),{197:[1,462]},{3:463,4:$V1,5:$V2},o($VH,[2,657],{67:$VD2}),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:465,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vz2,[2,660]),o($VE2,[2,760],{417:466,465:[1,467]}),{113:[1,468]},{70:[1,469]},o($VF2,[2,774],{427:470,469:[1,471]}),{113:[2,764]},{113:[2,765]},o([8,67,71,113,258,260,262,441,465,466,469,470,471],[2,773]),o($Vi1,$VA1,{294:472,128:$VB1}),o($Vi1,$VA1,{294:473,128:$VB1}),o($VK1,[2,428]),o($VK1,[2,429]),{152:[1,474]},{152:[2,759]},o($VG2,[2,754],{407:475,463:[1,476]}),o($VG1,[2,753]),{119:$VK,392:477},{4:$VH2,69:[1,479],230:478,331:$VI2},o($VH,[2,402],{104:[1,482]}),o([67,71,258,260,262,439,441,472,475],[2,782],{272:330,435:483,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2,474:[1,484]}),o($VH,[2,508]),{3:485,4:$V1,5:$V2},{253:[1,486]},o($VC2,$VI1,{339:487,128:$VJ1}),o($VH,[2,522]),{3:219,4:$V1,5:$V2,169:488},{3:219,4:$V1,5:$V2,169:489},o($VG,[2,597],{380:490,262:[1,491]}),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:492,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:493,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:494,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:495,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:496,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:497,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:498,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:499,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:500,4:$V1,5:$V2,70:[1,502],106:$VO,166:501,170:503,249:$V91,250:$Va1},{3:504,4:$V1,5:$V2,70:[1,506],106:$VO,166:505,170:507,249:$V91,250:$Va1},o($VJ2,[2,387],{218:131,170:132,219:133,89:134,217:135,166:136,91:137,220:138,171:139,172:140,221:141,222:142,223:143,118:144,224:145,51:147,130:149,3:150,360:171,100:508,4:$V1,5:$V2,70:$VM,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,119:$VS,124:$VT,126:$VU,148:$VV,149:$VW,150:$VX,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,361:$Vg1,365:$Vh1}),o($VJ2,[2,388],{218:131,170:132,219:133,89:134,217:135,166:136,91:137,220:138,171:139,172:140,221:141,222:142,223:143,118:144,224:145,51:147,130:149,3:150,360:171,100:509,4:$V1,5:$V2,70:$VM,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,119:$VS,124:$VT,126:$VU,148:$VV,149:$VW,150:$VX,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,361:$Vg1,365:$Vh1}),o($VJ2,[2,389],{218:131,170:132,219:133,89:134,217:135,166:136,91:137,220:138,171:139,172:140,221:141,222:142,223:143,118:144,224:145,51:147,130:149,3:150,360:171,100:510,4:$V1,5:$V2,70:$VM,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,119:$VS,124:$VT,126:$VU,148:$VV,149:$VW,150:$VX,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,361:$Vg1,365:$Vh1}),o($VJ2,[2,390],{218:131,170:132,219:133,89:134,217:135,166:136,91:137,220:138,171:139,172:140,221:141,222:142,223:143,118:144,224:145,51:147,130:149,3:150,360:171,100:511,4:$V1,5:$V2,70:$VM,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,119:$VS,124:$VT,126:$VU,148:$VV,149:$VW,150:$VX,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,361:$Vg1,365:$Vh1}),o($VJ2,$VK2,{218:131,170:132,219:133,89:134,217:135,166:136,91:137,220:138,171:139,172:140,221:141,222:142,223:143,118:144,224:145,51:147,130:149,3:150,360:171,100:512,4:$V1,5:$V2,70:$VM,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,119:$VS,124:$VT,126:$VU,148:$VV,149:$VW,150:$VX,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,361:$Vg1,365:$Vh1}),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:513,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:514,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($VJ2,[2,392],{218:131,170:132,219:133,89:134,217:135,166:136,91:137,220:138,171:139,172:140,221:141,222:142,223:143,118:144,224:145,51:147,130:149,3:150,360:171,100:515,4:$V1,5:$V2,70:$VM,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,119:$VS,124:$VT,126:$VU,148:$VV,149:$VW,150:$VX,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,361:$Vg1,365:$Vh1}),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:516,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:517,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{119:[1,521],136:[1,519],273:518,280:[1,520]},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:522,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:523,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:384,4:$V1,5:$V2,70:[1,524],89:526,119:$VL2,170:527,249:$V91,250:$Va1,275:525},{274:[1,529]},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:530,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:531,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:532,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{4:$VH2,230:533,331:$VI2},{71:[1,534]},{71:[1,535]},{71:[1,536]},{8:$VM1,71:[1,537],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{71:[2,728]},{71:[2,729]},{109:$VJ},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:236,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,136:[1,540],148:$VV,149:$VW,150:$VX,154:[1,539],166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,233:538,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($VA2,[2,732],{248:541,455:543,71:[1,542],448:[1,544],456:[1,545]}),{3:546,4:$V1,5:$V2,123:$VM2,149:[1,548]},o([4,5,47,65,67,69,71,81,93,99,104,106,107,113,114,120,121,126,128,134,139,140,141,142,152,158,168,176,178,190,191,192,193,194,195,196,200,207,210,211,213,227,251,258,260,261,262,265,266,267,268,269,270,271,274,276,277,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],[2,367],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,278:$Va2}),o($VN2,[2,368],{272:330,8:$VM1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,149:$VZ1}),o($VN2,[2,369],{272:330,8:$VM1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,149:$VZ1}),o($Vn1,[2,370],{272:330}),o($Ve2,[2,326]),o($Ve2,[2,734]),o($Ve2,[2,735]),o($Ve2,[2,327]),o([4,5,8,47,65,67,69,71,81,90,93,97,98,99,104,106,107,108,112,113,114,120,121,126,128,134,139,140,141,142,148,149,152,158,168,176,178,190,191,192,193,194,195,196,197,198,200,207,210,211,213,227,251,258,260,261,262,263,264,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],$VO2,{70:$Vd2}),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:549,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vj2,[2,551]),o($Vj2,[2,552]),o($Vj2,[2,553]),o($Vj2,[2,554]),o($Vj2,[2,556]),{36:550,72:67,81:$V6,153:92,158:$Va},{8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,256:551,259:367,260:$Vi2,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{257:552,258:$VP2,259:553,260:$Vi2,262:$VQ2},o($VR2,[2,333]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:555,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:556,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{4:$VH2,230:557,331:$VI2},o($Vj2,[2,557]),{67:[1,559],369:[1,558]},o($Vj2,[2,573]),o($VS2,[2,580]),o($VT2,[2,558]),o($VT2,[2,559]),o($VT2,[2,560]),o($VT2,[2,561]),o($VT2,[2,562]),o($VT2,[2,563]),o($VT2,[2,564]),o($VT2,[2,565]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:560,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($VU2,$Vc2,{70:$Vd2,116:$VV2}),o($Vn1,[2,283],{70:$Vd2}),o($Vn1,[2,284]),{67:[1,563],367:[1,562]},o($Vj2,[2,570]),o($VW2,[2,575]),{124:[1,564]},{124:[1,565]},{124:[1,566]},{36:570,70:[1,569],72:67,81:$V6,123:[1,567],153:92,158:$Va,287:[1,568]},{197:[1,572],397:571},{3:196,4:$V1,5:$V2,70:$Vj1,107:$Vk1,115:$VR,118:190,119:$VS,124:$VT,150:$VX,169:191,170:193,171:192,172:194,179:573,182:195,249:$V91,250:$Va1,255:$Ve1,360:171,361:$Vg1,365:$Vh1},{198:[2,624]},{71:[1,574]},o($VX2,[2,722],{181:575,453:[1,576]}),o($Vn2,[2,721]),o($VX2,[2,159]),{3:577,4:$V1,5:$V2},o($VX2,[2,162]),{3:578,4:$V1,5:$V2},o($VX2,[2,166]),{3:579,4:$V1,5:$V2},o($VX2,[2,169]),{3:580,4:$V1,5:$V2},o($VX2,[2,172]),{3:581,4:$V1,5:$V2},{3:582,4:$V1,5:$V2},{120:[1,583]},o($VY2,[2,148],{75:584,152:[1,585]}),{3:196,4:$V1,5:$V2,107:[1,590],115:$VR,119:[1,591],124:$VT,150:$VX,169:586,170:587,171:588,172:589,249:$V91,250:$Va1,255:$Ve1},o($VZ2,[2,686],{83:592,444:[1,593]}),o($Vm1,[2,685]),{3:219,4:$V1,5:$V2,169:594},{3:219,4:$V1,5:$V2,169:595},{91:596,107:$VP,251:$Vb1},o($VH,[2,525],{90:[1,597]}),{3:219,4:$V1,5:$V2,169:598},{91:599,107:$VP,251:$Vb1},{3:600,4:$V1,5:$V2},o($VH,[2,621]),o($VH,[2,60]),{3:211,4:$V1,5:$V2,68:601},{70:[1,602]},o($VH,[2,602]),o($VH,[2,515]),{3:606,4:$V1,5:$V2,89:605,122:603,282:604},{118:607,119:$Vo1,360:171,361:$Vg1,365:$Vh1},o($VH,[2,599]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:608,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($VJ2,$VK2,{218:131,170:132,219:133,89:134,217:135,166:136,91:137,220:138,171:139,172:140,221:141,222:142,223:143,118:144,224:145,51:147,130:149,3:150,360:171,100:609,4:$V1,5:$V2,70:$VM,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,119:$VS,124:$VT,126:$VU,148:$VV,149:$VW,150:$VX,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,361:$Vg1,365:$Vh1}),{91:610,107:$VP,251:$Vb1},{3:242,4:$V1,5:$V2,388:611,389:$Vq1},o($VH,[2,581]),o($VH,[2,591]),o($VH,[2,592]),{97:[1,614],99:[1,612],373:613},o($VH,[2,675],{67:$Vy2}),{3:93,4:$V1,5:$V2,283:$Vt1,434:615},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:618,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,145:616,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,216:617,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:618,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,145:619,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,216:617,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:618,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,145:620,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,216:617,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($VB2,[2,127]),o($VB2,[2,717]),o($V_2,[2,718],{167:621,451:[1,622]}),{106:$VO,166:623},{67:$Vy2,71:[1,624]},{281:$V$2,283:$V03,402:625},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:628,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{94:[1,630],141:[1,631],261:[1,629]},o($VG,[2,8]),{120:[1,632],160:[1,633]},{160:[1,634]},{160:[1,635]},{160:[1,636]},o($VH,[2,504],{69:[1,638],70:[1,637]}),o($VH,[2,509]),{253:[1,639]},{3:640,4:$V1,5:$V2,91:641,107:$VP,251:$Vb1},{3:219,4:$V1,5:$V2,169:642},{197:[1,643]},o([8,67,71,258,260,262,441,465,466,469,470,471],$VC1,{416:283,419:284,3:285,426:286,415:644,4:$V1,5:$V2,453:$VD1,467:$VE1,468:$VF1}),o($VL1,[2,658],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),o($Vz2,[2,762],{418:645,466:[1,646]}),o($VE2,[2,761]),o([113,465,466,469,470,471],$VC1,{426:286,416:647,453:$VD1}),o([67,71,465,466,469,470,471],$VC1,{415:282,416:283,419:284,3:285,426:286,414:648,4:$V1,5:$V2,453:$VD1,467:$VE1,468:$VF1}),o($V13,[2,776],{428:649,470:[1,650]}),o($VF2,[2,775]),{3:219,4:$V1,5:$V2,169:651},{3:219,4:$V1,5:$V2,169:652},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:653,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($V23,[2,756],{408:654,464:[1,655]}),o($VG2,[2,755]),o($VH1,[2,616]),o($VH1,[2,617],{99:[1,656]}),{4:$VH2,230:657,331:$VI2},o($V33,[2,475],{70:[1,658]}),{70:[1,659]},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:660,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($V43,[2,784],{436:661,475:[1,662]}),{473:[1,663]},o($VH,[2,517]),o($VC2,[2,497]),{3:664,4:$V1,5:$V2,91:665,107:$VP,251:$Vb1},o($VH,[2,495]),o($VH,[2,542]),o($VH,[2,596]),o($VH,$V0,{15:5,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:14,24:15,25:16,26:17,27:18,28:19,29:20,30:21,31:22,32:23,33:24,34:25,35:26,36:27,37:28,38:29,39:30,40:31,41:32,42:33,43:34,44:35,45:36,46:37,48:39,49:40,50:41,51:42,52:43,53:44,54:45,55:46,56:47,57:48,58:49,59:50,60:51,61:52,62:53,63:54,64:55,72:67,434:88,153:92,3:93,10:666,4:$V1,5:$V2,47:$V4,65:$V5,81:$V6,99:$V7,121:$V8,128:$V9,158:$Va,227:$Vb,281:$Vc,283:$Vd,284:$Ve,291:$Vf,337:$Vg,340:$Vh,341:$Vi,344:$Vj,346:$Vk,348:$Vl,349:$Vm,357:$Vn,358:$Vo,359:$Vp,376:$Vq,378:$Vr,379:$Vs,381:$Vt,382:$Vu,383:$Vv,384:$Vw,385:$Vx,389:$Vy,390:$Vz,393:$VA,394:$VB,439:$VC,440:$VD}),o($V53,[2,337],{272:330,8:$VM1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,148:$VY1,149:$VZ1,264:$V$1}),o($V53,[2,338],{272:330,8:$VM1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,148:$VY1,149:$VZ1,264:$V$1}),o($VN2,[2,339],{272:330,8:$VM1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,149:$VZ1}),o($VN2,[2,340],{272:330,8:$VM1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,149:$VZ1}),o($V63,[2,341],{272:330,8:$VM1,97:$VO1,98:$VP1}),o($V63,[2,342],{272:330,8:$VM1,97:$VO1,98:$VP1}),o($V63,[2,343],{272:330,8:$VM1,97:$VO1,98:$VP1}),o([4,5,47,65,67,69,71,81,90,93,98,99,104,106,107,108,112,113,114,120,121,126,128,134,139,140,141,142,148,149,152,158,168,176,178,190,191,192,193,194,195,196,200,207,210,211,213,227,251,258,260,261,262,263,264,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],[2,344],{272:330,8:$VM1,97:$VO1}),o($Vn1,[2,345],{70:$Vd2}),o($Vn1,[2,346]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:667,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vn1,[2,348]),o($Vn1,[2,349],{70:$Vd2}),o($Vn1,[2,350]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:668,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vn1,[2,352]),o($V73,[2,353],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,274:$V72,278:$Va2}),o($V73,[2,354],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,274:$V72,278:$Va2}),o($V73,[2,355],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,274:$V72,278:$Va2}),o($V73,[2,356],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,274:$V72,278:$Va2}),o([4,5,47,65,81,99,113,114,121,128,141,142,158,227,258,260,262,265,266,267,268,269,270,271,276,277,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,439,440,441],$V83,{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,274:$V72,278:$Va2}),o($V73,[2,358],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,274:$V72,278:$Va2}),o($V73,[2,359],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,274:$V72,278:$Va2}),o($V73,[2,360],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,274:$V72,278:$Va2}),o($V73,[2,361],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,274:$V72,278:$Va2}),o($V73,[2,362],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,274:$V72,278:$Va2}),{70:[1,669]},{70:[2,393]},{70:[2,394]},{70:[2,395]},o($V93,[2,365],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,278:$Va2}),o([4,5,47,65,67,69,71,81,93,104,106,107,120,121,128,134,139,140,142,152,158,168,176,178,190,191,192,193,194,195,196,200,207,210,211,213,227,251,258,260,261,262,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],[2,366],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2}),{3:150,4:$V1,5:$V2,36:670,51:147,70:$VM,71:[1,672],72:67,81:$V6,89:134,91:137,100:236,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,153:92,158:$Va,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,233:671,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vn1,[2,378]),o($Vn1,[2,384]),o($Vn1,[2,385]),{70:[1,673]},{3:384,4:$V1,5:$V2,70:[1,674],89:526,119:$VL2,170:527,249:$V91,250:$Va1,275:675},o($V93,[2,380],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,278:$Va2}),o($V93,[2,381],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,278:$Va2}),o([4,5,47,65,67,69,71,81,93,99,104,106,107,113,114,120,121,126,128,134,139,140,141,142,152,158,168,176,178,190,191,192,193,194,195,196,200,207,210,211,213,227,251,258,260,261,262,265,266,267,268,269,270,271,274,276,277,278,279,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,411,439,440,441,442,462,472,474,475],[2,382],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1}),o($Vn1,[2,383]),o($Vn1,[2,277]),o($Vn1,[2,278]),o($Vn1,[2,279]),o($Vn1,[2,371]),{67:$Vv2,71:[1,676]},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:677,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:678,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:236,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,233:679,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Ve2,[2,315]),o($VA2,[2,733]),o($VA2,[2,730]),o($VA2,[2,731]),o($Vn1,$Va3,{116:[1,680]}),o($VU2,[2,259]),o($Vn1,[2,255]),{8:$VM1,71:[1,681],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{71:[1,682]},{257:683,258:$VP2,259:553,260:$Vi2,262:$VQ2},{258:[1,684]},o($VR2,[2,332]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:685,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,261:[1,686],263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{8:$VM1,69:[1,687],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{67:[1,688]},o($Vj2,[2,571]),{3:384,4:$V1,5:$V2,70:$Vk2,89:380,91:378,106:$VO,107:$VP,115:$VR,118:375,119:$Vo1,124:$VT,150:$VX,166:377,170:379,171:382,220:381,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,255:$Ve1,360:171,361:$Vg1,363:690,364:376,365:$Vh1,369:[1,689]},{8:$VM1,71:[1,691],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{3:692,4:$V1,5:$V2,123:$VM2},o($Vj2,[2,568]),{3:392,4:$V1,5:$V2,106:$Vl2,107:$Vm2,367:[1,693],370:694},{3:384,4:$V1,5:$V2,70:$Vk2,89:380,91:378,106:$VO,107:$VP,115:$VR,118:375,119:$Vo1,124:$VT,150:$VX,166:377,170:379,171:382,220:381,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,255:$Ve1,360:171,361:$Vg1,363:695,364:376,365:$Vh1},{3:384,4:$V1,5:$V2,70:$Vk2,89:380,91:378,106:$VO,107:$VP,115:$VR,118:375,119:$Vo1,124:$VT,150:$VX,166:377,170:379,171:382,220:381,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,255:$Ve1,360:171,361:$Vg1,363:696,364:376,365:$Vh1},{3:384,4:$V1,5:$V2,70:$Vk2,89:380,91:378,106:$VO,107:$VP,115:$VR,118:375,119:$Vo1,124:$VT,150:$VX,166:377,170:379,171:382,220:381,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,255:$Ve1,360:171,361:$Vg1,363:697,364:376,365:$Vh1},{70:$Vb3,115:$VR,118:700,119:$Vo1,124:$VT,150:$VX,171:701,255:$Ve1,286:698,360:171,361:$Vg1,365:$Vh1},{123:[1,702]},{3:606,4:$V1,5:$V2,89:704,199:703},o($Vc3,[2,406]),{260:$VE,398:705,400:101,401:102},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:706,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{197:[2,625]},o($Vo2,[2,157],{3:707,4:$V1,5:$V2,69:[1,708]}),o($VX2,[2,158]),o($VX2,[2,723]),o($VX2,[2,160]),o($VX2,[2,163]),o($VX2,[2,167]),o($VX2,[2,170]),o($VX2,[2,173]),o([4,5,8,67,69,70,71,81,93,104,120,121,123,126,134,139,140,152,156,158,176,178,190,191,192,193,194,195,196,197,198,200,213,252,258,260,262,287,300,312,313,317,318,337,341,342,343,441,444,458,459,462],[2,175]),{3:709,4:$V1,5:$V2},o([8,71,93,134,139,140,200,213,258,260,262,441,462],[2,212],{76:710,104:[1,711]}),{3:196,4:$V1,5:$V2,70:[1,713],107:$Vk1,115:$VR,118:190,119:$VS,124:$VT,150:$VX,169:191,170:193,171:192,172:194,173:712,179:714,182:195,249:$V91,250:$Va1,255:$Ve1,360:171,361:$Vg1,365:$Vh1},o($Vd3,[2,140]),o($Vd3,[2,141]),o($Vd3,[2,142]),o($Vd3,[2,143]),o($Vd3,[2,144]),{3:715,4:$V1,5:$V2},o($VZ2,[2,65]),o($VZ2,[2,687]),o($VH,[2,535],{152:[1,716]}),o($VH,[2,531],{152:[1,717]}),o($VH,[2,524]),{91:718,107:$VP,251:$Vb1},o($VH,[2,533],{152:[1,719]}),o($VH,[2,528]),o($VH,[2,529],{90:[1,720]}),o($Vt2,[2,61]),{36:721,72:67,81:$V6,153:92,158:$Va},o($VH,[2,397],{67:$Ve3,104:[1,722]}),o($Vf3,[2,398]),{99:[1,724]},o([8,67,69,71,93,99,104,134,139,140,176,178,190,191,192,193,194,195,196,200,213,258,260,262,441,462],$Vc2,{116:$VV2}),o($VH,[2,549]),o($Vw2,[2,319],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),o($V73,$V83,{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,126:$VV1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,274:$V72,278:$Va2}),o($VH1,[2,610]),o($VH1,[2,612]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:725,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{97:[1,727],99:[1,726]},{3:729,4:$V1,5:$V2,70:$Vg3,106:$Vh3,374:728},o($Vz2,[2,677]),o($VB2,[2,124],{67:$Vi3}),o($Vj3,[2,246]),o([67,71,93,104,134,139,140,152,168,200,213,258,260,262,441,442,462],[2,253],{272:330,3:734,91:736,4:$V1,5:$V2,8:$VM1,69:[1,733],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,106:[1,735],107:$VP,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,251:$Vb1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),o($VB2,[2,125],{67:$Vi3}),o($VB2,[2,126],{67:$Vi3}),o($V_2,[2,136]),o($V_2,[2,719]),{71:[1,737]},o($Vw1,[2,674]),o($Vz1,[2,631]),o($Vz1,[2,633]),{121:[1,738]},{8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,261:[1,739],263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{284:$Vk3,403:740},{358:[1,743],404:[1,742]},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:744,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:745,4:$V1,5:$V2},{3:746,4:$V1,5:$V2},{3:748,4:$V1,5:$V2,327:747},{3:748,4:$V1,5:$V2,327:749},{3:750,4:$V1,5:$V2},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:236,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,233:751,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:752,4:$V1,5:$V2},o($VC2,[2,440]),o($VH,$Vl3,{347:753,69:$Vm3,70:[1,754]}),o($VH,$Vl3,{347:756,69:$Vm3}),{70:[1,757]},{3:219,4:$V1,5:$V2,169:758},o($Vz2,[2,659]),o($Vz2,[2,661]),o($Vz2,[2,763]),o($Vn3,[2,766],{420:759,465:[1,760]}),{67:$VD2,71:[1,761]},o($Vo3,[2,778],{429:762,471:[1,763]}),o($V13,[2,777]),o($VH,[2,427],{70:[1,764]}),{69:[1,766],70:[1,765]},{8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,120:[1,767],126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},o($Vc3,$Vp3,{72:67,153:92,409:768,36:771,81:$V6,121:$Vq3,158:$Va,411:$Vr3}),o($V23,[2,757]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:772,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($VH1,[2,618],{99:[1,773]}),{106:[1,775],242:[1,776],330:774},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:778,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,288:777,360:171,361:$Vg1,365:$Vh1},o($VL1,[2,401],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),o($Vw1,[2,786],{437:779,472:[1,780]}),{473:[1,781]},o([8,67,71,258,260,262,439,441,472,475],[2,783]),o($VH,[2,518]),o($VH,[2,519]),o($VH,[2,598]),{8:$VM1,71:[1,782],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{8:$VM1,71:[1,783],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{3:150,4:$V1,5:$V2,36:784,51:147,70:$VM,72:67,81:$V6,89:134,91:137,100:236,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,153:92,158:$Va,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,233:785,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{71:[1,786]},{67:$Vv2,71:[1,787]},o($Vn1,[2,376]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:788,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,36:789,51:147,70:$VM,71:[1,791],72:67,81:$V6,89:134,91:137,100:236,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,153:92,158:$Va,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,233:790,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vn1,[2,379]),o($Vn1,$Vs3,{234:792,235:$Vt3}),{8:$VM1,71:[1,794],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{8:$VM1,71:[1,795],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{67:$Vv2,71:[1,796]},{3:797,4:$V1,5:$V2,149:[1,798]},o($Vj2,[2,550]),o($Vn1,[2,325]),{258:[1,799]},o($Vn1,[2,331]),{8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,258:[2,335],263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:800,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{4:$VH2,230:801,331:$VI2},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:802,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vj2,[2,572]),o($VS2,[2,579]),o($VT2,[2,567]),o($VU2,$Va3,{116:[1,803]}),o($Vj2,[2,569]),o($VW2,[2,574]),o($VW2,[2,576]),o($VW2,[2,577]),o($VW2,[2,578]),o($Vc3,[2,403],{67:$Vu3}),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:778,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,288:805,360:171,361:$Vg1,365:$Vh1},o($Vv3,[2,411]),o($Vv3,[2,412]),o($Vc3,[2,404]),{67:$Vw3,71:[1,806]},o($Vx3,[2,424]),o([8,258,262,441],[2,645],{400:268,401:269,399:808,260:$VE,405:[1,809]}),{8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,260:[2,626],263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},o($VX2,[2,155]),{3:810,4:$V1,5:$V2},o($VH,[2,503]),o($Vy3,[2,214],{77:811,200:[1,812]}),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:813,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($VY2,[2,145],{174:814,183:816,175:817,184:818,189:821,67:$Vz3,69:$VA3,176:$VB3,178:$VC3,190:$VD3,191:$VE3,192:$VF3,193:$VG3,194:$VH3,195:$VI3,196:$VJ3}),{3:196,4:$V1,5:$V2,36:397,70:$Vj1,72:67,81:$V6,107:$Vk1,115:$VR,118:190,119:$VS,124:$VT,150:$VX,153:92,158:$Va,169:191,170:193,171:192,172:194,173:830,179:714,182:195,249:$V91,250:$Va1,255:$Ve1,360:171,361:$Vg1,365:$Vh1},o($Vx3,[2,153]),o($Vd3,$VO2),{3:831,4:$V1,5:$V2},{3:832,4:$V1,5:$V2},o($VH,[2,526]),{3:833,4:$V1,5:$V2},{91:834,107:$VP,251:$Vb1},{71:[1,835]},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:836,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:606,4:$V1,5:$V2,89:605,282:837},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:838,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($VL1,[2,582],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:839,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:729,4:$V1,5:$V2,70:$Vg3,106:$Vh3,374:840},o($VK3,[2,587]),o($VK3,[2,588]),o($VK3,[2,589]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:841,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:618,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,216:842,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:843,4:$V1,5:$V2,91:845,106:[1,844],107:$VP,251:$Vb1},o($Vj3,[2,248]),o($Vj3,[2,250]),o($Vj3,[2,252]),o($V_2,[2,137]),{3:606,4:$V1,5:$V2,89:605,122:846,282:604},{281:$V$2,283:$V03,402:847},o($Vz1,[2,635]),{70:[1,849],123:[1,848],287:[1,850]},{141:[1,852],261:[1,851]},{141:[1,854],261:[1,853]},{8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,261:[1,855],263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},o($VH,[2,498]),{120:[1,856]},o($VH,[2,499]),o($Vz2,[2,472],{230:857,4:$VH2,329:[1,858],331:$VI2}),o($VH,[2,500]),o($VH,[2,502]),{67:$Vv2,71:[1,859]},o($VH,[2,506]),o($VH,[2,510]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:236,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,233:860,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:861,4:$V1,5:$V2},o($VH,[2,512]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,95:862,100:864,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,209:863,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{70:[1,865]},{113:[2,768],421:866,466:[1,867]},o($Vn3,[2,767]),o($Vz2,[2,663]),o($Vo3,[2,667]),o($Vo3,[2,779]),{3:748,4:$V1,5:$V2,69:[1,870],295:868,302:869,327:871},{3:606,4:$V1,5:$V2,89:704,199:872},{36:873,72:67,81:$V6,153:92,158:$Va},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:874,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vc3,[2,650]),{3:606,4:$V1,5:$V2,89:605,122:875,282:604},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:236,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,233:876,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vc3,[2,655]),o($VL3,[2,619],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:877,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{67:[1,878],71:[1,879]},o($VM3,[2,477]),o($VM3,[2,478]),{67:$VN3,71:[1,880]},o($VM3,[2,416],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),o($Vw1,[2,672]),{473:[1,882]},o($V43,[2,785]),o($Vn1,[2,347]),o($Vn1,[2,351]),{71:[1,883]},{67:$Vv2,71:[1,884]},o($Vn1,[2,372]),o($Vn1,[2,374]),{8:$VM1,71:[1,885],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{71:[1,886]},{67:$Vv2,71:[1,887]},o($Vn1,[2,377]),o($Vn1,[2,296]),{70:[1,888]},o($Vn1,$Vs3,{234:889,235:$Vt3}),o($Vn1,$Vs3,{234:890,235:$Vt3}),o($Ve2,[2,314]),o($VU2,[2,257]),o($Vn1,[2,254]),o($Vn1,[2,330]),o($VR2,[2,334],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),{67:[1,892],71:[1,891]},{8:$VM1,67:[1,894],71:[1,893],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{3:797,4:$V1,5:$V2},{70:[1,895],115:$VR,118:896,119:$Vo1,124:$VT,150:$VX,171:897,255:$Ve1,360:171,361:$Vg1,365:$Vh1},{67:$VN3,71:[1,898]},{36:900,72:67,81:$V6,123:[1,899],153:92,158:$Va},{3:606,4:$V1,5:$V2,89:901},o($VH,[2,622]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:618,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,145:902,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,216:617,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($VX2,[2,156]),o($VO3,[2,233],{78:903,93:[1,904]}),{94:[1,905]},o([71,93,134,139,140,200,213,258,260,262,441,462],[2,213],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),o($VY2,[2,146],{184:818,189:821,183:906,175:907,69:$VA3,176:$VB3,178:$VC3,190:$VD3,191:$VE3,192:$VF3,193:$VG3,194:$VH3,195:$VI3,196:$VJ3}),{3:196,4:$V1,5:$V2,70:$Vj1,107:$Vk1,115:$VR,118:190,119:$VS,124:$VT,150:$VX,169:191,170:193,171:192,172:194,179:908,182:195,249:$V91,250:$Va1,255:$Ve1,360:171,361:$Vg1,365:$Vh1},o($VP3,[2,179]),o($VP3,[2,180]),{3:196,4:$V1,5:$V2,70:[1,913],115:$VR,118:911,119:$VS,124:$VT,150:$VX,169:910,170:914,171:912,172:915,185:909,249:$V91,250:$Va1,255:$Ve1,360:171,361:$Vg1,365:$Vh1},{177:[1,916],191:$VQ3},{177:[1,918],191:$VR3},o($VS3,[2,196]),{69:$VA3,176:[1,922],178:[1,921],189:920,191:$VE3,192:$VF3,193:$VG3,194:$VH3,195:$VI3,196:$VJ3},o($VS3,[2,198]),{191:[1,923]},{178:[1,925],191:[1,924]},{178:[1,927],191:[1,926]},{178:[1,928]},{191:[1,929]},{191:[1,930]},{67:$Vz3,69:$VA3,174:931,175:817,176:$VB3,178:$VC3,183:816,184:818,189:821,190:$VD3,191:$VE3,192:$VF3,193:$VG3,194:$VH3,195:$VI3,196:$VJ3},o($VH,[2,536]),o($VH,[2,532]),o($VH,[2,534]),o($VH,[2,530]),o($Vt2,[2,63]),o($VL1,[2,396],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),o($Vf3,[2,399]),o([4,5,47,65,67,71,81,99,104,121,128,158,227,258,260,262,281,283,284,291,337,340,341,344,346,348,349,357,358,359,376,378,379,381,382,383,384,385,389,390,393,394,405,439,440,441],[2,400],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),o($VL1,[2,583],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),o($VK3,[2,586]),{8:$VM1,71:[1,932],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},o($Vj3,[2,245]),o($Vj3,[2,247]),o($Vj3,[2,249]),o($Vj3,[2,251]),o($Vz1,[2,634],{67:$Ve3}),o($Vz1,[2,632]),{70:$Vb3,115:$VR,118:700,119:$Vo1,124:$VT,150:$VX,171:701,255:$Ve1,286:933,360:171,361:$Vg1,365:$Vh1},{3:606,4:$V1,5:$V2,89:704,199:934},{123:[1,935]},{284:$Vk3,403:936},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:937,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{284:$Vk3,403:938},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:939,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{284:$Vk3,403:940},{3:941,4:$V1,5:$V2},o($Vz2,[2,479],{328:942,332:943,333:944,310:952,126:$VT3,156:$VU3,252:$VV3,287:$VW3,300:$VX3,312:$VY3,313:$VZ3,317:$V_3,318:$V$3}),o($Vz2,[2,471]),o($VH,[2,505],{69:[1,955]}),{67:$Vv2,71:[1,956]},o($VH,[2,514]),{67:$V04,71:[1,957]},o($V14,[2,235]),o([67,71,134,139,140,213,258,260,262,441,462],[2,237],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,210:[1,959],211:[1,960],263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,95:961,100:864,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,209:863,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{113:[1,962]},{113:[2,769]},{71:[1,963]},{67:[1,964],71:[2,442]},{36:965,72:67,81:$V6,153:92,158:$Va},o($VM3,[2,468]),{67:$Vw3,71:[1,966]},o($VH,[2,750],{352:967,462:[1,968]}),o($VL1,$Vp3,{72:67,153:92,272:330,36:771,409:969,8:$VM1,81:$V6,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,121:$Vq3,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,158:$Va,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2,411:$Vr3}),o($Vc3,[2,653],{67:$Ve3}),o($Vc3,[2,654],{67:$Vv2}),o($VL3,[2,620],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),{106:[1,970]},o($V33,[2,474]),o($V33,[2,476]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:971,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vw1,[2,787]),o($Vn1,[2,363]),o($Vn1,[2,364]),o($Vn1,[2,386]),o($Vn1,[2,373]),o($Vn1,[2,375]),{93:$V24,236:972,237:973,238:[1,974]},o($Vn1,[2,297]),o($Vn1,[2,298]),o($Vn1,[2,285]),{106:[1,976]},o($Vn1,[2,287]),{106:[1,977]},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:778,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,288:978,360:171,361:$Vg1,365:$Vh1},o($Vv3,[2,414]),o($Vv3,[2,415]),o($Vv3,[2,410]),{70:$Vb3,115:$VR,118:700,119:$Vo1,124:$VT,150:$VX,171:701,255:$Ve1,286:979,360:171,361:$Vg1,365:$Vh1},o($Vc3,[2,407]),o($Vx3,[2,425]),o($VH,[2,646],{67:$Vi3,168:[1,980]}),o($V34,[2,241],{79:981,213:[1,982]}),{94:[1,983]},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:989,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,201:984,203:985,204:$V44,205:$V54,206:$V64,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($VP3,[2,177]),o($VP3,[2,178]),o($Vx3,[2,154]),o($VP3,[2,211],{186:990,197:[1,991],198:[1,992]}),o($V74,[2,182],{3:993,4:$V1,5:$V2,69:[1,994]}),o($V84,[2,724],{187:995,452:[1,996]}),{3:997,4:$V1,5:$V2,69:[1,998]},{36:999,72:67,81:$V6,153:92,158:$Va},o($V74,[2,190],{3:1000,4:$V1,5:$V2,69:[1,1001]}),o($V74,[2,193],{3:1002,4:$V1,5:$V2,69:[1,1003]}),{70:[1,1004]},o($VS3,[2,208]),{70:[1,1005]},o($VS3,[2,204]),o($VS3,[2,197]),{191:$VR3},{191:$VQ3},o($VS3,[2,199]),o($VS3,[2,200]),{191:[1,1006]},o($VS3,[2,202]),{191:[1,1007]},{191:[1,1008]},o($VS3,[2,206]),o($VS3,[2,207]),{69:$VA3,71:[1,1009],175:907,176:$VB3,178:$VC3,183:906,184:818,189:821,190:$VD3,191:$VE3,192:$VF3,193:$VG3,194:$VH3,195:$VI3,196:$VJ3},o($VK3,[2,590]),o($Vz1,[2,641],{67:$Vu3}),{67:$Vw3,71:[1,1010]},o($Vz1,[2,643]),o($Vz1,[2,636]),{8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,261:[1,1011],263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},o($Vz1,[2,639]),{8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,261:[1,1012],263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},o($Vz1,[2,637]),o($VH,[2,501]),o($Vz2,[2,470]),o($Vz2,[2,480],{310:952,333:1013,126:$VT3,156:$VU3,252:$VV3,287:$VW3,300:$VX3,312:$VY3,313:$VZ3,317:$V_3,318:$V$3}),o($Vu2,[2,482]),{314:[1,1014]},{314:[1,1015]},{3:219,4:$V1,5:$V2,169:1016},o($Vu2,[2,488],{70:[1,1017]}),{3:232,4:$V1,5:$V2,70:[1,1019],91:227,106:$VO,107:$VP,115:$VR,124:$VT,150:$VX,166:226,170:228,171:230,220:229,226:$Vp1,232:1018,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,255:$Ve1},o($Vu2,[2,491]),{252:[1,1020]},o($Vu2,[2,493]),o($Vu2,[2,494]),{70:[1,1021]},{3:1022,4:$V1,5:$V2},o($VH,$Vl3,{347:1023,69:$Vm3}),o($VH,[2,520]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:864,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,209:1024,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($V14,[2,238]),{212:[1,1025]},{67:$V04,71:[1,1026]},{422:1027,467:[1,1028],468:[1,1029]},o($VH,[2,430],{296:1030,298:1031,299:1032,4:$V94,287:$Va4,300:$Vb4}),o($Vc4,$Vd4,{3:748,303:1036,327:1037,304:1038,305:1039,4:$V1,5:$V2,311:$Ve4}),{71:[2,443]},{69:[1,1041]},o($VH,[2,538]),o($VH,[2,751]),o($VH,[2,656]),{71:[1,1042]},o($VM3,[2,417],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),{71:[1,1043],93:$V24,237:1044},{71:[1,1045]},{94:[1,1046]},{94:[1,1047]},{71:[1,1048]},{71:[1,1049]},{67:$VN3,71:[1,1050]},o($Vc3,[2,405],{67:$Vu3}),{3:219,4:$V1,5:$V2,115:$Vr1,119:$Vs1,169:1052,372:1051},o($VZ2,[2,224],{80:1053,134:[1,1054],139:[1,1056],140:[1,1055]}),{106:$VO,166:1057},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,95:1058,100:864,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,209:863,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vy3,[2,222],{202:1059,67:$Vf4,207:[1,1061]}),o($Vg4,[2,216]),{121:[1,1062]},{70:[1,1063]},{70:[1,1064]},o([67,71,93,134,139,140,207,213,258,260,262,441,462],[2,221],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),o($VP3,[2,181]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:1065,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:606,4:$V1,5:$V2,89:704,199:1066},o($Vh4,[2,183]),{3:1067,4:$V1,5:$V2},o($Vh4,[2,726],{188:1068,453:[1,1069]}),o($V84,[2,725]),o($Vh4,[2,186]),{3:1070,4:$V1,5:$V2},{71:[1,1071]},o($Vh4,[2,191]),{3:1072,4:$V1,5:$V2},o($Vh4,[2,194]),{3:1073,4:$V1,5:$V2},{36:1074,72:67,81:$V6,153:92,158:$Va},{36:1075,72:67,81:$V6,153:92,158:$Va},o($VS3,[2,201]),o($VS3,[2,203]),o($VS3,[2,205]),o($VY2,[2,147]),{123:[1,1076],287:[1,1077]},{284:$Vk3,403:1078},{281:$V$2,283:$V03,402:1079},o($Vu2,[2,481]),o($Vu2,[2,484]),{318:[1,1080]},o($Vu2,[2,744],{336:1081,459:[1,1082]}),{106:$VO,166:1083},o($Vu2,[2,489]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:1084,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vu2,[2,492]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:1085,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($VH,[2,507]),o($VH,[2,511]),o($V14,[2,236]),o($V14,[2,239],{210:[1,1086]}),o($VH,[2,521]),o($Vz2,[2,662]),o($Vz2,[2,770]),o($Vz2,[2,771]),o($VH,[2,426]),o($VH,[2,431],{299:1087,4:$V94,287:$Va4,300:$Vb4}),o($Vi4,[2,433]),o($Vi4,[2,434]),{99:[1,1088]},{99:[1,1089]},{67:[1,1090],71:[2,441]},o($VM3,[2,469]),o($VM3,[2,444]),{156:[1,1098],163:[1,1099],306:1091,307:1092,308:1093,309:1094,310:1095,312:$VY3,313:[1,1096],314:[1,1100],317:[1,1097]},{3:1101,4:$V1,5:$V2},{36:1102,72:67,81:$V6,153:92,158:$Va},o($V33,[2,473]),o($Vn1,[2,300]),{71:[1,1103]},o($Vn1,[2,301]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:989,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,201:1104,203:985,204:$V44,205:$V54,206:$V64,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,95:1105,100:864,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,209:863,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o($Vn1,[2,286]),o($Vn1,[2,288]),o($Vv3,[2,413]),{3:1106,4:$V1,5:$V2},o($VH,[2,648],{70:[1,1107]}),o($VZ2,[2,64]),{36:1108,72:67,81:$V6,136:[1,1109],153:92,158:$Va,208:[1,1110]},{36:1111,72:67,81:$V6,153:92,158:$Va,208:[1,1112]},{36:1113,72:67,81:$V6,153:92,158:$Va,208:[1,1114]},o($V34,[2,243],{214:1115,215:[1,1116]}),o($VO3,[2,234],{67:$V04}),o($Vy3,[2,215]),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:989,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,203:1117,204:$V44,205:$V54,206:$V64,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:1118,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{70:[1,1119]},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:989,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,201:1120,203:985,204:$V44,205:$V54,206:$V64,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:989,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,201:1121,203:985,204:$V44,205:$V54,206:$V64,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},o([69,71,93,104,134,139,140,176,178,190,191,192,193,194,195,196,200,213,258,260,262,441,462],[2,209],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),o($VP3,[2,210],{67:$Vw3}),o($Vh4,[2,184]),o($Vh4,[2,185]),o($Vh4,[2,727]),o($Vh4,[2,187]),{3:1122,4:$V1,5:$V2,69:[1,1123]},o($Vh4,[2,192]),o($Vh4,[2,195]),{71:[1,1124]},{71:[1,1125]},{70:$Vb3,115:$VR,118:700,119:$Vo1,124:$VT,150:$VX,171:701,255:$Ve1,286:1126,360:171,361:$Vg1,365:$Vh1},{123:[1,1127]},o($Vz1,[2,638]),o($Vz1,[2,640]),{3:219,4:$V1,5:$V2,169:1128},o($Vu2,[2,486]),o($Vu2,[2,745]),{67:[1,1129]},{8:$VM1,71:[1,1130],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},{8:$VM1,71:[1,1131],90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,272:330,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2},o($V14,[2,240]),o($Vi4,[2,432]),{3:1132,4:$V1,5:$V2},{106:$VO,166:1133},o($Vc4,$Vd4,{305:1039,304:1134,311:$Ve4}),o($VM3,[2,446]),o($VM3,[2,447]),o($VM3,[2,448]),o($VM3,[2,449]),o($VM3,[2,450]),{314:[1,1135]},{314:[1,1136]},{70:[2,740],326:1137,453:[1,1138]},{3:1139,4:$V1,5:$V2},{3:1140,4:$V1,5:$V2},o($Vc4,[2,452]),o($VH,[2,748],{351:1141,462:[1,1142]}),o($Vn1,[2,302]),o([71,93],[2,303],{67:$Vf4}),{67:$V04,71:[2,304]},o($VH,[2,647]),{3:606,4:$V1,5:$V2,89:704,199:1143},o($VZ2,[2,225]),{36:1144,72:67,81:$V6,153:92,158:$Va,208:[1,1145]},{36:1146,72:67,81:$V6,153:92,158:$Va},o($VZ2,[2,227]),{36:1147,72:67,81:$V6,153:92,158:$Va},o($VZ2,[2,228]),{36:1148,72:67,81:$V6,153:92,158:$Va},o($V34,[2,242]),{106:$VO,166:1149},o($Vg4,[2,217]),o([71,93,134,139,140,213,258,260,262,441,462],[2,223],{272:330,8:$VM1,90:$VN1,97:$VO1,98:$VP1,99:$Vx2,108:$VR1,112:$VS1,113:$VT1,114:$VU1,126:$VV1,141:$VW1,142:$VX1,148:$VY1,149:$VZ1,263:$V_1,264:$V$1,265:$V02,266:$V12,267:$V22,268:$V32,269:$V42,270:$V52,271:$V62,274:$V72,276:$V82,277:$V92,278:$Va2,279:$Vb2}),{3:150,4:$V1,5:$V2,51:147,70:$VM,89:134,91:137,100:989,105:$VN,106:$VO,107:$VP,111:$VQ,115:$VR,118:144,119:$VS,124:$VT,126:$VU,130:149,148:$VV,149:$VW,150:$VX,166:136,170:132,171:139,172:140,201:1150,203:985,204:$V44,205:$V54,206:$V64,217:135,218:131,219:133,220:138,221:141,222:142,223:143,224:145,226:$VY,227:$Vb,228:$VZ,229:$V_,231:$V$,239:$V01,240:$V11,241:$V21,242:$V31,243:$V41,244:$V51,245:$V61,246:$V71,247:$V81,249:$V91,250:$Va1,251:$Vb1,252:$Vc1,253:$Vd1,255:$Ve1,264:$Vf1,360:171,361:$Vg1,365:$Vh1},{67:$Vf4,71:[1,1151]},{67:$Vf4,71:[1,1152]},o($Vh4,[2,188]),{3:1153,4:$V1,5:$V2},{3:1154,4:$V1,5:$V2,69:[1,1155]},{3:1156,4:$V1,5:$V2,69:[1,1157]},o($Vz1,[2,642],{67:$Vu3}),o($Vz1,[2,644]),o($Vu2,[2,742],{335:1158,459:[1,1159]}),{106:$VO,166:1160},o($Vu2,[2,490]),o($Vu2,[2,453]),o($Vi4,[2,435]),o($Vi4,[2,436]),o($VM3,[2,445]),{70:[2,736],315:1161,453:[1,1162]},{70:[1,1163]},{70:[1,1164]},{70:[2,741]},{70:[1,1165]},{70:[1,1166]},o($VH,[2,537]),o($VH,[2,749]),{67:$Vw3,71:[1,1167]},o($VZ2,[2,226]),{36:1168,72:67,81:$V6,153:92,158:$Va},o($VZ2,[2,229]),o($VZ2,[2,231]),o($VZ2,[2,232]),o($V34,[2,244]),{67:$Vf4,71:[1,1169]},o($Vg4,[2,219]),o($Vg4,[2,220]),o($Vh4,[2,189]),o($VP3,[2,149]),{3:1170,4:$V1,5:$V2},o($VP3,[2,151]),{3:1171,4:$V1,5:$V2},o($Vu2,[2,485]),o($Vu2,[2,743]),{71:[1,1172]},{70:[1,1173]},{70:[2,737]},{3:1175,4:$V1,5:$V2,107:$Vj4,316:1174},{3:606,4:$V1,5:$V2,89:704,199:1177},{3:606,4:$V1,5:$V2,89:704,199:1178},{3:606,4:$V1,5:$V2,89:704,199:1179},o($VH,[2,649]),o($VZ2,[2,230]),o($Vg4,[2,218]),o($VP3,[2,150]),o($VP3,[2,152]),o($Vu2,[2,487]),{3:1175,4:$V1,5:$V2,107:$Vj4,316:1180},{67:$Vk4,71:[1,1181]},o($VM3,[2,464]),o($VM3,[2,465]),{67:$Vw3,71:[1,1183]},{67:$Vw3,71:[1,1184]},{67:$Vw3,71:[1,1185]},{67:$Vk4,71:[1,1186]},{318:[1,1187]},{3:1188,4:$V1,5:$V2,107:[1,1189]},o($VM3,[2,461]),o($VM3,[2,462]),o($VM3,[2,463]),o($VM3,[2,454]),{3:219,4:$V1,5:$V2,169:1190},o($VM3,[2,466]),o($VM3,[2,467]),o($Vl4,[2,738],{319:1191,458:[1,1192]}),o($VM3,[2,457],{320:1193,322:1194,197:[1,1195]}),o($Vl4,[2,739]),o($VM3,[2,455]),{197:[1,1197],323:1196},{283:[1,1198]},o($VM3,[2,458]),{281:[1,1199]},{324:[1,1200]},{324:[1,1201]},{325:[1,1202]},{325:[1,1203]},{197:[2,459]},o($VM3,[2,460])],\ndefaultActions: {97:[2,3],174:[2,305],175:[2,306],176:[2,307],177:[2,308],178:[2,309],179:[2,310],180:[2,311],181:[2,312],182:[2,313],187:[2,623],287:[2,764],288:[2,765],295:[2,759],343:[2,728],344:[2,729],396:[2,624],519:[2,393],520:[2,394],521:[2,395],573:[2,625],867:[2,769],965:[2,443],1138:[2,741],1162:[2,737],1202:[2,459]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        function lex() {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"case-insensitive\":true},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return 227\nbreak;\ncase 1:return 255\nbreak;\ncase 2:return 361\nbreak;\ncase 3:return 5\nbreak;\ncase 4:return 5\nbreak;\ncase 5:return 251\nbreak;\ncase 6:return 251\nbreak;\ncase 7:return 107\nbreak;\ncase 8:return 107\nbreak;\ncase 9:return /* return COMMENT */\nbreak;\ncase 10:/* skip whitespace */\nbreak;\ncase 11:return 142\nbreak;\ncase 12:return 141\nbreak;\ncase 13:return 'AL'\nbreak;\ncase 14:return 325\nbreak;\ncase 15:return 342\nbreak;\ncase 16:return 246\nbreak;\ncase 17:return 136\nbreak;\ncase 18:return 340\nbreak;\ncase 19:return 141\nbreak;\ncase 20:return 69\nbreak;\ncase 21:return 119\nbreak;\ncase 22:return 177\nbreak;\ncase 23:return 247\nbreak;\ncase 24:return 69\nbreak;\ncase 25:return 359\nbreak;\ncase 26:return 210\nbreak;\ncase 27:return 344\nbreak;\ncase 28:return 300\nbreak;\ncase 29:return 243\nbreak;\ncase 30:return 379\nbreak;\ncase 31:return 276\nbreak;\ncase 32:return 383\nbreak;\ncase 33:return 277\nbreak;\ncase 34:return 263\nbreak;\ncase 35:return 94\nbreak;\ncase 36:return 105\nbreak;\ncase 37:return 229\nbreak;\ncase 38:return 312\nbreak;\ncase 39:return 105\nbreak;\ncase 40:return 'Ak'\nbreak;\ncase 41:return 211\nbreak;\ncase 42:return 160\nbreak;\ncase 43:return 160\nbreak;\ncase 44:return 376\nbreak;\ncase 45:return 311\nbreak;\ncase 46:return 411\nbreak;\ncase 47:return 382\nbreak;\ncase 48:return 231\nbreak;\ncase 49:return 208\nbreak;\ncase 50:return 240\nbreak;\ncase 51:return 291\nbreak;\ncase 52:return 176\nbreak;\ncase 53:return 206\nbreak;\ncase 54:return 226\nbreak;\ncase 55:return 'Ay'\nbreak;\ncase 56:return 345\nbreak;\ncase 57:return 390\nbreak;\ncase 58:return 287\nbreak;\ncase 59:return 283\nbreak;\ncase 60:return 'A3'\nbreak;\ncase 61:return 210\nbreak;\ncase 62:return 346\nbreak;\ncase 63:return 154\nbreak;\ncase 64:return 4\nbreak;\ncase 65:return 337\nbreak;\ncase 66:return 389\nbreak;\ncase 67:return 110\nbreak;\ncase 68:return 258\nbreak;\ncase 69:return 331\nbreak;\ncase 70:return 262\nbreak;\ncase 71:return 140\nbreak;\ncase 72:return 253\nbreak;\ncase 73:return 12\nbreak;\ncase 74:return 250\nbreak;\ncase 75:return 'BI'\nbreak;\ncase 76:return 244\nbreak;\ncase 77:return 317\nbreak;\ncase 78:return 152\nbreak;\ncase 79:return 'BM'\nbreak;\ncase 80:return 413\nbreak;\ncase 81:return 200\nbreak;\ncase 82:return 204\nbreak;\ncase 83:return 207\nbreak;\ncase 84:return 357\nbreak;\ncase 85:return 128\nbreak;\ncase 86:return 300\nbreak;\ncase 87:return 278\nbreak;\ncase 88:return 274\nbreak;\ncase 89:return 163\nbreak;\ncase 90:return 192\nbreak;\ncase 91:return 284\nbreak;\ncase 92:return 'BZ'\nbreak;\ncase 93:return 139\nbreak;\ncase 94:return 168\nbreak;\ncase 95:return 191\nbreak;\ncase 96:return 314\nbreak;\ncase 97:return 245\nbreak;\ncase 98:return 'Bf'\nbreak;\ncase 99:return 193\nbreak;\ncase 100:return 90\nbreak;\ncase 101:return 213\nbreak;\ncase 102:return 193\nbreak;\ncase 103:return 161\t\nbreak;\ncase 104:return 242\nbreak;\ncase 105:return 394\nbreak;\ncase 106:return 241\nbreak;\ncase 107:return 140\nbreak;\ncase 108:return 343\nbreak;\ncase 109:return 190\nbreak;\ncase 110:return 'Br'\nbreak;\ncase 111:return 228\nbreak;\ncase 112:return 212\nbreak;\ncase 113:return 324\nbreak;\ncase 114:return 126\nbreak;\ncase 115:return 252\nbreak;\ncase 116:return 375\nbreak;\ncase 117:return 197\nbreak;\ncase 118:return 355\nbreak;\ncase 119:return 215\nbreak;\ncase 120:return 'B1'\nbreak;\ncase 121:return 356\nbreak;\ncase 122:return 142\nbreak;\ncase 123:return 93\nbreak;\ncase 124:return 178\nbreak;\ncase 125:return 235\nbreak;\ncase 126:return 143\nbreak;\ncase 127:return 238\nbreak;\ncase 128:return 'B9'\nbreak;\ncase 129:return 14\nbreak;\ncase 130:return 313\nbreak;\ncase 131:return 384\nbreak;\ncase 132:return 'CD'\nbreak;\ncase 133:return 13\nbreak;\ncase 134:return 354\nbreak;\ncase 135:return 164\nbreak;\ncase 136:return 'CH'\nbreak;\ncase 137:return 318\nbreak;\ncase 138:return 'CJ'\nbreak;\ncase 139:return 85\nbreak;\ncase 140:return 341\nbreak;\ncase 141:return 385\nbreak;\ncase 142:return 'CN'\nbreak;\ncase 143:return 144\nbreak;\ncase 144:return 194\nbreak;\ncase 145:return 378\nbreak;\ncase 146:return 205\nbreak;\ncase 147:return 159\nbreak;\ncase 148:return 345\nbreak;\ncase 149:return 81\nbreak;\ncase 150:return 158\nbreak;\ncase 151:return 196\nbreak;\ncase 152:return 121\nbreak;\ncase 153:return 121\nbreak;\ncase 154:return 349\nbreak;\ncase 155:return 280\nbreak;\ncase 156:return 358\nbreak;\ncase 157:return 'Cc'\nbreak;\ncase 158:return 'Cd'\nbreak;\ncase 159:return 239\nbreak;\ncase 160:return 297\nbreak;\ncase 161:return 297\nbreak;\ncase 162:return 404\nbreak;\ncase 163:return 301\nbreak;\ncase 164:return 301\nbreak;\ncase 165:return 162\nbreak;\ncase 166:return 261\nbreak;\ncase 167:return 'Cm'\nbreak;\ncase 168:return 120\nbreak;\ncase 169:return 165\nbreak;\ncase 170:return 377\nbreak;\ncase 171:return 377\nbreak;\ncase 172:return 249\nbreak;\ncase 173:return 393\nbreak;\ncase 174:return 134\nbreak;\ncase 175:return 156\nbreak;\ncase 176:return 281\nbreak;\ncase 177:return 348\nbreak;\ncase 178:return 198\nbreak;\ncase 179:return 123\nbreak;\ncase 180:return 109\nbreak;\ncase 181:return 350\nbreak;\ncase 182:return 260\nbreak;\ncase 183:return 104\nbreak;\ncase 184:return 381\nbreak;\ncase 185:return 65\nbreak;\ncase 186:return 377  /* Is this keyword required? */\nbreak;\ncase 187:return 106\nbreak;\ncase 188:return 106\nbreak;\ncase 189:return 97\nbreak;\ncase 190:return 111\nbreak;\ncase 191:return 148\nbreak;\ncase 192:return 264\nbreak;\ncase 193:return 149\nbreak;\ncase 194:return 108\nbreak;\ncase 195:return 112\nbreak;\ncase 196:return 271\nbreak;\ncase 197:return 268\nbreak;\ncase 198:return 270\nbreak;\ncase 199:return 267\nbreak;\ncase 200:return 265\nbreak;\ncase 201:return 113\nbreak;\ncase 202:return 266\nbreak;\ncase 203:return 269\nbreak;\ncase 204:return 114\nbreak;\ncase 205:return 99\nbreak;\ncase 206:return 269\nbreak;\ncase 207:return 70\nbreak;\ncase 208:return 71\nbreak;\ncase 209:return 119\nbreak;\ncase 210:return 365\nbreak;\ncase 211:return 367\nbreak;\ncase 212:return 369\nbreak;\ncase 213:return 439\nbreak;\ncase 214:return 440\nbreak;\ncase 215:return 116\nbreak;\ncase 216:return 67\nbreak;\ncase 217:return 279\nbreak;\ncase 218:return 124\nbreak;\ncase 219:return 'Dd'\nbreak;\ncase 220:return 115\nbreak;\ncase 221:return 150\nbreak;\ncase 222:return 8\nbreak;\ncase 223:return 98\nbreak;\ncase 224:return 4\nbreak;\ncase 225:return 8\nbreak;\ncase 226:return 'Dk'\nbreak;\n}\n},\nrules: [/^(?:``([^\\`])+``)/i,/^(?:\\[\\?\\])/i,/^(?:@\\[)/i,/^(?:\\[([^\\]])*?\\])/i,/^(?:`([^\\`])*?`)/i,/^(?:N(['](\\\\.|[^']|\\\\')*?['])+)/i,/^(?:X(['](\\\\.|[^']|\\\\')*?['])+)/i,/^(?:(['](\\\\.|[^']|\\\\')*?['])+)/i,/^(?:([\"](\\\\.|[^\"]|\\\\\")*?[\"])+)/i,/^(?:--(.*?)($|\\r\\n|\\r|\\n))/i,/^(?:\\s+)/i,/^(?:\\|\\|)/i,/^(?:&&)/i,/^(?:ABSOLUTE\\b)/i,/^(?:ACTION\\b)/i,/^(?:ADD\\b)/i,/^(?:AGGR\\b)/i,/^(?:ALL\\b)/i,/^(?:ALTER\\b)/i,/^(?:AND\\b)/i,/^(?:ANTI\\b)/i,/^(?:ANY\\b)/i,/^(?:APPLY\\b)/i,/^(?:ARRAY\\b)/i,/^(?:AS\\b)/i,/^(?:ASSERT\\b)/i,/^(?:ASC\\b)/i,/^(?:ATTACH\\b)/i,/^(?:AUTO(_)?INCREMENT\\b)/i,/^(?:AVG\\b)/i,/^(?:BEGIN\\b)/i,/^(?:BETWEEN\\b)/i,/^(?:BREAK\\b)/i,/^(?:NOT\\s+BETWEEN\\b)/i,/^(?:NOT\\s+LIKE\\b)/i,/^(?:BY\\b)/i,/^(?:CASE\\b)/i,/^(?:CAST\\b)/i,/^(?:CHECK\\b)/i,/^(?:CLASS\\b)/i,/^(?:CLOSE\\b)/i,/^(?:COLLATE\\b)/i,/^(?:COLUMN\\b)/i,/^(?:COLUMNS\\b)/i,/^(?:COMMIT\\b)/i,/^(?:CONSTRAINT\\b)/i,/^(?:CONTENT\\b)/i,/^(?:CONTINUE\\b)/i,/^(?:CONVERT\\b)/i,/^(?:CORRESPONDING\\b)/i,/^(?:COUNT\\b)/i,/^(?:CREATE\\b)/i,/^(?:CROSS\\b)/i,/^(?:CUBE\\b)/i,/^(?:CURRENT_TIMESTAMP\\b)/i,/^(?:CURSOR\\b)/i,/^(?:DATABASE(S)?)/i,/^(?:DECLARE\\b)/i,/^(?:DEFAULT\\b)/i,/^(?:DELETE\\b)/i,/^(?:DELETED\\b)/i,/^(?:DESC\\b)/i,/^(?:DETACH\\b)/i,/^(?:DISTINCT\\b)/i,/^(?:DOUBLE\\s+PRECISION\\b)/i,/^(?:DROP\\b)/i,/^(?:ECHO\\b)/i,/^(?:EDGE\\b)/i,/^(?:END\\b)/i,/^(?:ENUM\\b)/i,/^(?:ELSE\\b)/i,/^(?:EXCEPT\\b)/i,/^(?:EXISTS\\b)/i,/^(?:EXPLAIN\\b)/i,/^(?:FALSE\\b)/i,/^(?:FETCH\\b)/i,/^(?:FIRST\\b)/i,/^(?:FOREIGN\\b)/i,/^(?:FROM\\b)/i,/^(?:GO\\b)/i,/^(?:GRAPH\\b)/i,/^(?:GROUP\\b)/i,/^(?:GROUPING\\b)/i,/^(?:HAVING\\b)/i,/^(?:HELP\\b)/i,/^(?:IF\\b)/i,/^(?:IDENTITY\\b)/i,/^(?:IS\\b)/i,/^(?:IN\\b)/i,/^(?:INDEX\\b)/i,/^(?:INNER\\b)/i,/^(?:INSERT\\b)/i,/^(?:INSERTED\\b)/i,/^(?:INTERSECT\\b)/i,/^(?:INTO\\b)/i,/^(?:JOIN\\b)/i,/^(?:KEY\\b)/i,/^(?:LAST\\b)/i,/^(?:LET\\b)/i,/^(?:LEFT\\b)/i,/^(?:LIKE\\b)/i,/^(?:LIMIT\\b)/i,/^(?:MATCHED\\b)/i,/^(?:MATRIX\\b)/i,/^(?:MAX\\b)/i,/^(?:MERGE\\b)/i,/^(?:MIN\\b)/i,/^(?:MINUS\\b)/i,/^(?:MODIFY\\b)/i,/^(?:NATURAL\\b)/i,/^(?:NEXT\\b)/i,/^(?:NEW\\b)/i,/^(?:NOCASE\\b)/i,/^(?:NO\\b)/i,/^(?:NOT\\b)/i,/^(?:NULL\\b)/i,/^(?:OFF\\b)/i,/^(?:ON\\b)/i,/^(?:ONLY\\b)/i,/^(?:OFFSET\\b)/i,/^(?:OPEN\\b)/i,/^(?:OPTION\\b)/i,/^(?:OR\\b)/i,/^(?:ORDER\\b)/i,/^(?:OUTER\\b)/i,/^(?:OVER\\b)/i,/^(?:PATH\\b)/i,/^(?:PARTITION\\b)/i,/^(?:PERCENT\\b)/i,/^(?:PLAN\\b)/i,/^(?:PRIMARY\\b)/i,/^(?:PRINT\\b)/i,/^(?:PRIOR\\b)/i,/^(?:QUERY\\b)/i,/^(?:READ\\b)/i,/^(?:RECORDSET\\b)/i,/^(?:REDUCE\\b)/i,/^(?:REFERENCES\\b)/i,/^(?:RELATIVE\\b)/i,/^(?:REMOVE\\b)/i,/^(?:RENAME\\b)/i,/^(?:REQUIRE\\b)/i,/^(?:RESTORE\\b)/i,/^(?:RETURNS\\b)/i,/^(?:RIGHT\\b)/i,/^(?:ROLLBACK\\b)/i,/^(?:ROLLUP\\b)/i,/^(?:ROW\\b)/i,/^(?:SCHEMA(S)?)/i,/^(?:SEARCH\\b)/i,/^(?:SELECT\\b)/i,/^(?:SEMI\\b)/i,/^(?:SET\\b)/i,/^(?:SETS\\b)/i,/^(?:SHOW\\b)/i,/^(?:SOME\\b)/i,/^(?:SOURCE\\b)/i,/^(?:STRATEGY\\b)/i,/^(?:STORE\\b)/i,/^(?:SUM\\b)/i,/^(?:TABLE\\b)/i,/^(?:TABLES\\b)/i,/^(?:TARGET\\b)/i,/^(?:TEMP\\b)/i,/^(?:TEMPORARY\\b)/i,/^(?:TEXTSTRING\\b)/i,/^(?:THEN\\b)/i,/^(?:TIMEOUT\\b)/i,/^(?:TO\\b)/i,/^(?:TOP\\b)/i,/^(?:TRAN\\b)/i,/^(?:TRANSACTION\\b)/i,/^(?:TRUE\\b)/i,/^(?:TRUNCATE\\b)/i,/^(?:UNION\\b)/i,/^(?:UNIQUE\\b)/i,/^(?:UPDATE\\b)/i,/^(?:USE\\b)/i,/^(?:USING\\b)/i,/^(?:VALUE(S)?)/i,/^(?:VERTEX\\b)/i,/^(?:VIEW\\b)/i,/^(?:WHEN\\b)/i,/^(?:WHERE\\b)/i,/^(?:WHILE\\b)/i,/^(?:WITH\\b)/i,/^(?:WORK\\b)/i,/^(?:(\\d*[.])?\\d+[eE]\\d+)/i,/^(?:(\\d*[.])?\\d+)/i,/^(?:->)/i,/^(?:#)/i,/^(?:\\+)/i,/^(?:-)/i,/^(?:\\*)/i,/^(?:\\/)/i,/^(?:%)/i,/^(?:!===)/i,/^(?:===)/i,/^(?:!==)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\\()/i,/^(?:\\))/i,/^(?:@)/i,/^(?:\\{)/i,/^(?:\\})/i,/^(?:\\])/i,/^(?::-)/i,/^(?:\\?-)/i,/^(?:\\.)/i,/^(?:,)/i,/^(?:::)/i,/^(?::)/i,/^(?:;)/i,/^(?:\\$)/i,/^(?:\\?)/i,/^(?:!)/i,/^(?:\\^)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = parser;\nexports.Parser = parser.Parser;\nexports.parse = function () { return parser.parse.apply(parser, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","/home/travis/build/npmtest/node-npmtest-alasql/node_modules/alasql/utils/2ch/2ch.js":"var fs = require('fs');\nvar alasql = require('..');\nvar s = fs.readFileSync('../dist/alasql.min.js').toString();\n\nvar state = \"ANY\";\nvar idx = 0;\nvar ilen = s.length;\nvar w = '';\nvar dict = {};\nvar dotdict = {};\n\nfor(var i=0; i<ilen;i++) {\n\tvar ch = s[i];\n\tvar a = ch.toUpperCase();\n\tif(state == \"ANY\") {\n\t\tif(ch == '.') {\n\t\t\tstate=\"DOTLITERAL\";\n\t\t\tw += '.';\n\t\t\tcontinue;\n\t\t} else if((a >= 'A' && a <= 'Z') || (a == '_')) {\n\t\t\tstate=\"LITERAL\";\n\t\t\tw += ch;\n\t\t\tcontinue;\n\t\t} else {\n\t\t\tstate = 'ANY';\n\t\t\tw = '';\n\t\t\tcontinue;\n\t\t}\n\t} else if(state == \"LITERAL\") {\n\t\tif(ch == '.') {\n\t\t\tstate=\"DOTLITERAL\";\n\t\t\tw = '.';\n\t\t\tcontinue;\n\t\t} else if((a >= 'A' && a <= 'Z') || (a >= '0' && a <= '9') || (a == '_')) {\n\t\t\tstate=\"LITERAL\";\n\t\t\tw += ch;\n\t\t\tcontinue;\n\t\t} else {\n\t\t\tstate = 'ANY';\n\t\t\tif(w.length > 1) {\n\t\t\tdict[\"_\"+w] = (dict[\"_\"+w]||0)+1;\n\t\t\t}\n\t\t\tw = '';\n\t\t\tcontinue;\t\t\t\n\t\t}\n\t} else if(state == \"DOTLITERAL\") {\n\t\tif((a >= 'A' && a <= 'Z') || (a >= '0' && a <= '9') || (a == '_')) {\n\t\t\tstate=\"DOTLITERAL\";\n\t\t\tw += ch;\n\t\t\tcontinue;\n\t\t} else {\n\t\t\tstate = 'ANY';\n\t\t\tdotdict[\"_\"+w] = (dotdict[\"_\"+w]||0)+1;\n\t\t\tw = '';\n\t\t\tcontinue;\t\t\t\n\t\t}\n\t}\n};\n\nconsole.log(alasql('SELECT TOP 20 [0] AS w, [1] as q, \\\n\t(LEN([0])-2)*[1] as e FROM ? WHERE LEN([0])>5 ORDER BY e DESC',[dict]));\n\nconsole.log(alasql('SELECT TOP 20 [0] AS w, [1] as q, \\\n\t(LEN([0])-3)*[1] as e FROM ? \\\n\tWHERE LEN([0])>3 ORDER BY e DESC',[dotdict]));\n\nconsole.log(alasql('SELECT SUM((LEN([0])-2)*[1]) as e FROM ? WHERE LEN([0])>5 ',[dict]));\nconsole.log(alasql('SELECT SUM((LEN([0])-3)*[1]) as e FROM ? WHERE LEN([0])>5 ',[dotdict]));\n\n","/home/travis/build/npmtest/node-npmtest-alasql/node_modules/alasql/utils/callback/cb1.js":"\nfunction get1(n,index, cb) {\n\tvar nn = n;\n\tif(n<0) return;\n\tif(n>=10) return; \n\tsetTimeout(function(){cb('get1',{a:nn, b:nn*2})},200);\n}\n\nfunction get2(n,index, cb) {\n\tvar nn = n;\t\n\tif(n<0) return;\n\tif(n>=10) return; \n\tsetTimeout(function(){cb('get2',{a:nn, b:nn*3})},100);\n}\n\nvar times = 0;\nvar buff = [];\n\nfunction after(key, data) {\n\tbuff[key] = data;\n\tconsole.log(times);\n\ttimes++;\n\tif(times<6) return;\n\tsetTimeout(function(){process(buff)},0);\n\tconsole.log('before process');\n}\n\nfunction process(data){\n\tconsole.log('process',data);\n\tconsole.log('after process');\n};\n\nconsole.log(\"start\");\nget1(1,null,after);\nget1(1,null,after);\nget2(3,null,after);\nget2(4,null,after);\nget2(5,null,after);\nget2(2,null,after);\nconsole.log(\"finish\");\n\n\nvar k = 5;\nvar data = [];\n\nvar next = function(){\n\tconsole.log('next',k)\n\tdata.push(k);\n\tk--;\n\tif(k>0) setTimeout(next,0);\n\telse setTimeout(onfinish,0);\n};\n\nvar onfinish = function(){\n\tconsole.log(data);\n}\n\nsetTimeout(next,0);\n\n","/home/travis/build/npmtest/node-npmtest-alasql/node_modules/alasql/utils/callback/cb2.js":"\n\nvar async = false;\n\nfunction alasql(sql, params, cb) {\n\tvar res;\n\tif(arguments.length < 3) {\n\t\tprocess(sql, params, function(data){\n\t\t\tres = data;\n\t\t});\n\t\tif(async) {\n\t\t\tthrow Error('Use sync version');\n\t\t}\n\t\treturn res;\n\t} else {\n\t\tprocess(sql, params, function(data) {\n\t\t\tcb(data);\n\t\t\tasync = false;\n\t\t});\n\t};\n};\n\nfunction process(sql, params, cb) {\n\tif(sql == \"sync\") {\n\t\tcb(100);\n\t} else {\n\t\tasync = true;\n\t\tsetTimeout(function(){\n\t\t\tcb(200);\n\t\t},100);\n\t}\n};\n\nvar res = alasql('async',[],function(data){\n\tconsole.log(1,data);\n});\nconsole.log(2,res);\n\n\nvar res = alasql('sync',[]);\nconsole.log(3,res);\n\n/*\nvar res = alasql('async',[]);\n*/","/home/travis/build/npmtest/node-npmtest-alasql/node_modules/alasql/utils/cordova/alasql-cordova.js":"var gv = undefined;\n\nfunction cordovaReadFile(path) {\n  return gv;\n}\n\ncordovaWriteFile(\n      path\n    , value\n    , utf8\n    , callback) {\n      gv = value;\n      callback();\n}\n  function CordovaStorage(path, opts) {\n    opts = opts || {};\n    var db\n      ;\n\n    Object.defineProperty(this, '___priv_bk___', {\n      value: {\n        path: path\n      }\n    , writable: false\n    , enumerable: false\n    });\n\n    Object.defineProperty(this, '___priv_strict___', {\n      value: !!opts.strict\n    , writable: false\n    , enumerable: false\n    });\n\n    Object.defineProperty(this, '___priv_ws___', {\n      value: opts.ws || '  '\n    , writable: false\n    , enumerable: false\n    });\n\n    try {\n      db = JSON.parse(cordovaReadFile(path));\n    } catch(e) {\n      db = {};\n    }\n\n    Object.keys(db).forEach(function (key) {\n      this[key] = db[key];\n    }, this);\n  }\n\n  CordovaStorage.prototype.getItem = function (key) {\n    if (this.hasOwnProperty(key)) {\n      if (this.___priv_strict___) {\n        return String(this[key]);\n      } else {\n        return this[key];\n      }\n    }\n    return null;\n  };\n\n  CordovaStorage.prototype.setItem = function (key, val) {\n    if (val === undefined) {\n      this[key] = null;\n    } else if (this.___priv_strict___) {\n      this[key] = String(val);\n    } else {\n      this[key] = val;\n    }\n    this.___save___();\n  };\n\n  CordovaStorage.prototype.removeItem = function (key) {\n    delete this[key];\n    this.___save___();\n  };\n\n  CordovaStorage.prototype.clear = function () {\n    var self = this;\n    // filters out prototype keys\n    Object.keys(self).forEach(function (key) {\n      self[key] = undefined;\n      delete self[key];\n    });\n  };\n\n  CordovaStorage.prototype.key = function (i) {\n    i = i || 0;\n    return Object.keys(this)[i];\n  };\n\n  CordovaStorage.prototype.__defineGetter__('length', function () {\n    return Object.keys(this).length;\n  });\n\n  CordovaStorage.prototype.___save___ = function () {\n    var self = this\n      ;\n\n    if (!this.___priv_bk___.path) {\n      return;\n    }\n\n    if (this.___priv_bk___.lock) {\n      this.___priv_bk___.wait = true;\n      return;\n    }\n\n    this.___priv_bk___.lock = true;\n    cordovaWriteFile(\n      this.___priv_bk___.path\n    , JSON.stringify(this, null, this.___priv_ws___)\n    , 'utf8'\n    , function (e) {\n      self.___priv_bk___.lock = false;\n      if (e) {\n        return;\n      }\n      if (self.___priv_bk___.wait) {\n        self.___priv_bk___.wait = false;\n        self.___save___();\n      }\n    });\n  };\n\n  Object.defineProperty(CordovaStorage, 'create', {\n    value: function (path, opts) {\n      return new CordovaStorage(path, opts);\n    }\n  , writable: false\n  , enumerable: false\n  });\n\n  global.localStorage = new Storage(\"./test149.json\", { strict: false, ws: '' });\n","/home/travis/build/npmtest/node-npmtest-alasql/node_modules/alasql/utils/cordova/filestorage.js":"var gv = undefined;\n\nfunction loadFile(path,asy,success,error) {\n  return gv;\n}\n\nfunction saveFile(path,data,callback) {\n      gv = data;\n      console.log(gv);\n      callback();\n};\n\n  function FileStorage(path, opts) {\n    var self = this;\n    opts = opts || {};\n    var db\n      ;\n\n    Object.defineProperty(this, '___priv_bk___', {\n      value: {\n        path: path\n      }\n    , writable: false\n    , enumerable: false\n    });\n\n    Object.defineProperty(this, '___priv_strict___', {\n      value: !!opts.strict\n    , writable: false\n    , enumerable: false\n    });\n\n    Object.defineProperty(this, '___priv_ws___', {\n      value: opts.ws || '  '\n    , writable: false\n    , enumerable: false\n    });\n\n    loadFile(path,true,function(data){\n      try {\n        db = JSON.parse(data);\n      } catch(e) {\n        db = {};\n      }\n\n      Object.keys(db).forEach(function (key) {\n        self[key] = db[key];\n      }, self);\n    });\n  }\n\n  FileStorage.prototype.getItem = function (key) {\n    if (this.hasOwnProperty(key)) {\n      if (this.___priv_strict___) {\n        return String(this[key]);\n      } else {\n        return this[key];\n      }\n    }\n    return null;\n  };\n\n  FileStorage.prototype.setItem = function (key, val) {\n    if (val === undefined) {\n      this[key] = null;\n    } else if (this.___priv_strict___) {\n      this[key] = String(val);\n    } else {\n      this[key] = val;\n    }\n    this.___save___();\n  };\n\n  FileStorage.prototype.removeItem = function (key) {\n    delete this[key];\n    this.___save___();\n  };\n\n  FileStorage.prototype.clear = function () {\n    var self = this;\n    // filters out prototype keys\n    Object.keys(self).forEach(function (key) {\n      self[key] = undefined;\n      delete self[key];\n    });\n  };\n\n  FileStorage.prototype.key = function (i) {\n    i = i || 0;\n    return Object.keys(this)[i];\n  };\n\n  FileStorage.prototype.__defineGetter__('length', function () {\n    return Object.keys(this).length;\n  });\n\n  FileStorage.prototype.___save___ = function () {\n    var self = this\n      ;\n\n    if (!this.___priv_bk___.path) {\n      return;\n    }\n\n    if (this.___priv_bk___.lock) {\n      this.___priv_bk___.wait = true;\n      return;\n    }\n\n    this.___priv_bk___.lock = true;\n    saveFile(\n      this.___priv_bk___.path\n    , JSON.stringify(this, null, this.___priv_ws___)\n    , function (e) {\n      self.___priv_bk___.lock = false;\n      if (e) {\n        return;\n      }\n      if (self.___priv_bk___.wait) {\n        self.___priv_bk___.wait = false;\n        self.___save___();\n      }\n    });\n  };\n\n  Object.defineProperty(FileStorage, 'create', {\n    value: function (path, opts) {\n      return new FileStorage(path, opts);\n    }\n  , writable: false\n  , enumerable: false\n  });\n\n\nexports.FileStorage = FileStorage;\n// Start to use\n\n//  fileStorage = new FileStorage(\"./fstest.json\", { strict: false, ws: '' });\n","/home/travis/build/npmtest/node-npmtest-alasql/node_modules/alasql/utils/cordova/test1.js":"var alasql = require('../alasql.js');\n\nvar filename = './test1.json';\n\n// Check if database exists\nalasql.utils.fileExists(filename,function(res){\n//\tconsole.log('res',res);\n\tif(!res) {\n\t\t// Create database\n\t\talasql('CREATE FILESTORAGE DATABASE test1(\"./test1.json\")');\n\t\talasql('ATTACH FILESTORAGE DATABASE test1(\"./test1.json\")');\n\t\talasql('USE test1');\n\t\talasql('CREATE TABLE one(a int, b string);');\n\t\talasql('INSERT INTO one VALUES (10,\"alala\")');\n\t\talasql('DETACH DATABASE test1');\n\t}\n\t// Use database\n\n\talasql('ATTACH FILESTORAGE DATABASE test1(\"./test1.json\")');\n\talasql('USE test1');\n\talasql('INSERT INTO one VALUES (20,\"alala\")');\n\tvar res = alasql('SELECT VALUE COUNT(*) FROM one');\n\tconsole.log(res);\n\t//console.log(alasql.databases.test1);\n});\n\n\n","/home/travis/build/npmtest/node-npmtest-alasql/node_modules/alasql/utils/minisql/minisql.js":"miniSQL = function(Collection){\n\n  Collection = Collection || Object.create(miniSQL.prototype);\n  Collection.table = Collection.tableName;\n\n  // inputString used by queries, overrides other strings\n  // includes: create table, create relationship, drop table, insert\n  Collection.inputString = '';\n  Collection.inputString2 = '';\n  Collection.autoSelectData = '';\n  Collection.autoSelectInput = '';\n  Collection.tableElements = {};\n\n  // statement starters\n  Collection.selectString = '';\n  Collection.updateString = '';\n  Collection.deleteString = '';\n\n  // chaining statements\n  Collection.joinString = '';\n  Collection.whereString = '';\n  Collection.clientWhereString = '';\n  Collection.serverWhereString = '';\n\n  // caboose statements\n  Collection.orderString = '';\n  Collection.limitString = '';\n  Collection.offsetString = '';\n  Collection.groupString = '';\n  Collection.havingString = '';\n\n  Collection.dataArray = [];\n  Collection.dataArray2 = [];\n  Collection.server = null;\n\n  // error logging\n  Collection.prevFunc = '';\n  return Collection;\n};\n\nminiSQL.prototype.createTable = function(tableObj) {\n  var _DataTypes = {\n    $number: 'integer',\n    $string: 'varchar(255)',\n    $json: 'json',\n    $datetime: 'date',\n    $float: 'decimal',\n    $seq: 'serial',\n    $bool: 'boolean'\n  };\n\n  var _TableConstraints = {\n    $unique: 'unique',\n    $check: 'check ', // value\n    $exclude: 'exclude',\n    $notnull: 'not null',\n    $default: 'default ', // value\n    $primary: 'primary key'\n  };\n\n  alasql.fn.Date = Date;\n\n  var startString = 'CREATE TABLE ' + this.table + ' (';\n  var item, subKey, valOperator, inputString = '';\n\n  for (var key in tableObj) {\n    this.tableElements[key] = key;\n    inputString += key + ' ';\n    inputString += _DataTypes[tableObj[key][0]];\n    if (Array.isArray(tableObj[key]) && tableObj[key].length > 1) {\n      for (var i = 1, count = tableObj[key].length; i < count; i++) {\n        item = tableObj[key][i];\n        if (typeof item === 'object') {\n          subKey = Object.keys(item);\n          valOperator = _TableConstraints[subKey];\n          inputString += ' ' + valOperator + item[subKey];\n        } else {\n          inputString += ' ' + _TableConstraints[item];\n        }\n      }\n    }\n    inputString += ', ';\n  }\n  // check to see if id already provided\n  if (inputString.indexOf('id') === -1) {\n    startString += 'id serial primary key,';\n  }\n\n  this.inputString = startString + inputString + \" createdat Date); \";\n  this.prevFunc = 'CREATE TABLE';\n  alasql(this.inputString);\n  this.clearAll();\n  return this;\n};\n\nminiSQL.prototype.dropTable = function() {\n  this.inputString = 'DROP TABLE IF EXISTS ' + this.table + ' CASCADE;';\n  this.prevFunc = 'DROP TABLE';\n  return this;\n};\n\nminiSQL.prototype.insert = function(serverInserts, clientInserts) {\n  // server\n  if(serverInserts['id'] === undefined){\n    serverInserts['id'] = -1;\n  }\n  // client\n  this.dataArray2 = [];\n  var insertString2 = 'INSERT INTO ' + this.table + ' (';\n  var valueString2 = ') VALUES (';\n  for (var key2 in clientInserts) {\n    insertString2 += key2 + ', ';\n    this.dataArray2.push(clientInserts[key2]);\n    valueString2 += '?, ';\n  }\n  for (var key3 in serverInserts) {\n    insertString2 += key3 + ', ';\n    this.dataArray2.push(serverInserts[key3]);\n    valueString2 += '?, ';\n  }\n  this.server = true;\n  this.inputString2 = insertString2.substring(0, insertString2.length - 2) + valueString2.substring(0, valueString2.length - 2) + ');';\n\n\n  this.dataArray = [];\n  if (serverInserts['id'] === -1){\n    delete serverInserts['id'];\n  }\n  var insertString = 'INSERT INTO ' + this.table + ' (';\n  var valueString = ') VALUES (', j = 1;\n  for (var key in serverInserts) {\n    insertString += key + ', ';     // field\n    this.dataArray.push(serverInserts[key]); // data\n    valueString += '$' + j++ + ', ';   // $1, $2, etc\n  }\n\n  this.inputString = insertString.substring(0, insertString.length - 2) + valueString.substring(0, valueString.length - 2) + ');';\n\n\n\n  this.prevFunc = 'INSERT';\n  return this;\n};\n\nminiSQL.prototype.update = function(updates) {\n  this.updateString = 'UPDATE ' + this.table + ' SET ';\n  for (var key in updates) {\n    if (typeof updates[key] === 'number' && !isNaN(updates[key]) || typeof(updates[key]) === \"boolean\"){\n      this.updateString += key + ' = ' + updates[key] + ', ';\n    }\n    else {\n      this.updateString += key + ' = \"' + updates[key] + '\", ';\n    }\n  }\n  this.updateString = this.updateString.substring(0,this.updateString.length-2);\n  this.prevFunc = 'UPDATE';\n  return this;\n};\n\nminiSQL.prototype.remove = function() {\n  this.deleteString = 'DELETE FROM ' + this.table;\n  this.prevFunc = 'DELETE';\n  return this;\n};\n\nminiSQL.prototype.select = function(/*arguments*/) {\n  var args = '';\n  if (arguments.length >= 1) {\n    for (var i = 0; i < arguments.length; i++) {\n      if (arguments[i] === 'distinct') {\n        args += 'DISTINCT ';\n      } else {\n        args += arguments[i] + ', ';\n      }\n    }\n    args = args.substring(0, args.length - 2);\n  } else {\n    args += '*';\n  }\n  this.selectString = 'SELECT ' + args + ' FROM ' + this.table + \" \";\n  this.prevFunc = 'SELECT';\n  return this;\n};\n\nminiSQL.prototype.findOne = function(/*arguments*/) {\n  if (arguments.length === 2) {\n    this.inputString = 'SELECT * FROM ' + this.table + ' WHERE ' + this.table + '.id = ' + args + ' LIMIT 1;';\n  } else {\n    this.inputString = 'SELECT * FROM ' + this.table + ' LIMIT 1';\n  }\n  this.prevFunc = 'FIND ONE';\n  return this;\n};\n\nminiSQL.prototype.join = function(joinType, fields, joinTable) {\n  if (Array.isArray(joinType)) {\n    for (var x = 0, count = fields.length; x < count; x++) {\n      this.joinString = \" \" + joinType[x] + \" \" + joinTable[x][0] + \" ON \" + this.table + \".\" + fields[x] + \" = \" + joinTable[x][0] + \".\" + joinTable[x][1];\n    }\n  } else {\n    this.joinString = \" \" + joinType + \" \" + joinTable + \" ON \" + this.table + \".\" + fields + \" = \" + joinTable + \".\" + joinTable;\n  }\n  this.prevFunc = \"JOIN\";\n  return this;\n};\n\nminiSQL.prototype.where = function(/*Arguments*/) {\n\n  this.dataArray = [];\n  this.dataArray2 = [];\n  var where = '', redux, substring1, substring2;\n\n  where += arguments[0];\n  // replace ? with rest of array\n  for (var i = 1, count = arguments.length; i < count; i++) {\n    if (Array.isArray(arguments[i])) {\n      if (arguments[i].length === 0) {\n        throw new Error('Invalid input: array is empty');\n      }\n      redux = where.indexOf('?');\n      substring1 = where.substring(0, redux);\n      substring2 = where.substring(redux + 1, where.length);\n      where = substring1 + 'ANY($' + i + ')'+ substring2;\n      this.dataArray.push(arguments[i]);\n    } else {\n      redux = where.indexOf('?');\n      substring1 = where.substring(0, redux);\n      substring2 = where.substring(redux + 1, where.length);\n      where = substring1 + '$' + i + substring2;\n      this.dataArray.push(arguments[i]);\n    }\n  }\n  this.serverWhereString = ' WHERE ' + where;\n\n  where = '';\n  where += arguments[0];\n  for (var i = 1, count = arguments.length; i < count; i++) {\n    if (Array.isArray(arguments[i])) {\n      redux = where.indexOf('?');\n      substring1 = where.substring(0, redux);\n      substring2 = where.substring(redux + 1, where.length);\n      where = substring1 + 'IN (' + arguments[i].join(',') + ')' + substring2;\n    } else {\n      this.dataArray2.push(arguments[i]);\n    }\n  }\n  this.clientWhereString = ' WHERE ' + where;\n\n  return this;\n};\n\nminiSQL.prototype.order = function(/*arguments*/) {\n\n  var args = '';\n  if (arguments.length > 1) {\n    for (var i = 0; i < arguments.length; i++) {\n      args += arguments[i] + ', ';\n    }\n    args = args.substring(0, args.length - 2);\n  } else {\n    args = arguments[0];\n  }\n  this.orderString = ' ORDER BY ' + args;\n  return this;\n};\n\nminiSQL.prototype.limit = function(limit) {\n  this.limitString = ' LIMIT ' + limit;\n  return this;\n};\n\nminiSQL.prototype.offset = function(offset) {\n  this.offsetString = ' OFFSET ' + offset;\n  return this;\n};\n\nminiSQL.prototype.group = function(group) {\n  this.groupString = 'GROUP BY ' + group;\n  return this;\n};\n\nminiSQL.prototype.first = function(limit) {\n  limit = limit || 1;\n  this.inputString += 'SELECT * FROM ' + this.table + ' ORDER BY ' + this.table + '.id ASC LIMIT ' + limit + ';';\n  this.prevFunc = 'FIRST';\n  return this;\n};\n\nminiSQL.prototype.last = function(limit) {\n  limit = limit || 1;\n  this.inputString += 'SELECT * FROM ' + this.table + ' ORDER BY ' + this.table + '.id DESC LIMIT ' + limit + ';';\n  this.prevFunc = 'LAST';\n  return this;\n};\n\nminiSQL.prototype.take = function(limit) {\n  limit = limit || 1;\n  this.inputString += 'SELECT * FROM ' + this.table + ' LIMIT ' + limit + ';';\n  this.prevFunc = 'TAKE';\n  return this;\n};\n\nminiSQL.prototype.clearAll = function() {\n  this.inputString = '';\n  this.inputString2 = '';\n  this.autoSelectData = '';\n  this.autoSelectInput = '';\n\n  // statement starters\n  this.selectString = '';\n  this.updateString = '';\n  this.deleteString = '';\n\n  // chaining statements\n  this.joinString = '';\n  this.whereString = '';\n  this.clientWhereString = '';\n  this.serverWhereString = '';\n\n  // caboose statements\n  this.orderString = '';\n  this.limitString = '';\n  this.offsetString = '';\n  this.groupString = '';\n  this.havingString = '';\n\n  this.dataArray = [];\n  this.dataArray2 = [];\n  this.server = null;\n\n  // error logging\n  this.prevFunc = '';\n};\n\nminiSQL.prototype.fetch = function(server) {\n\n  this.reactiveData.depend();\n\n  var dataArray = this.dataArray;\n  var starter = this.updateString || this.deleteString || this.selectString;\n\n  var input = this.inputString.length > 0 ? this.inputString : starter + this.joinString + this.clientWhereString + this.orderString + this.limitString +\n  this.offsetString + this.groupString + this.havingString + ';';\n\n\n  var result = alasql(input, dataArray);\n\n  var name = this.table + 'fetch';\n  if (server === \"server\") {\n    input = this.inputString.length > 0 ? this.inputString : starter + this.joinString + this.serverWhereString + this.orderString + this.limitString +\n    this.offsetString + this.groupString + this.havingString + ';';\n    Meteor.call(this.fetchMethod, input, dataArray);\n  }\n  this.clearAll();\n  return result;\n};\n\nminiSQL.prototype.save = function(client) {\n\n  var dataArray = this.dataArray;\n  var dataArray2 = this.dataArray2;\n  var starter = this.updateString || this.deleteString || this.selectString;\n  var input = this.inputString2.length > 0 ? this.inputString2 : starter + this.joinString + this.clientWhereString + ';';\n\n  var result = alasql(input, dataArray2);\n  // postgres\n  var name = this.table + 'save';\n  if (client !== \"client\") {\n    input = this.inputString.length > 0 ? this.inputString : starter + this.joinString + this.serverWhereString + ';';\n    this.unvalidated = true;\n    Meteor.call(this.saveMethod, input, dataArray);\n  }\n  this.reactiveData.changed();\n\n  this.clearAll();\n  return result;\n};","/home/travis/build/npmtest/node-npmtest-alasql/node_modules/alasql/utils/redj/redj.js":"var fs = require('fs');\n\n// Read file\nvar s = fs.readFileSync('./src/alasqlparser.jison').toString();\n\nvar ss = s.split('/lex');\n\n// Prepare list of terminals\nvar aa = s.match(/return \\'[A-Z_]+\\'/g);\nvar aa = aa.map(function(a){return a.substr(8,a.length-1-8)});\n\n// Prepare literals\n//var bb = s.match(/;\\s+([A-Z][A-Za-z]*\\s+:)/g);\nvar bb = s.match(/\\n[A-Z][A-Za-z]*\\s+:/g);\n\nbb.forEach(function(b){\n\taa.push(b.substr(1,b.length-2).trim());\n});\n\naa.push('Literal');\n//\tvar d = s.match(new RegExp(\"\\\\s\"+c+\"\\\\s\",\"g\"));\n\n//\tconsole.log(aa.length);\n\nvar abc1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar abc2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789';\n\nfor(var i=0;i<aa.length;i++) {\n\tvar c1 = (i / abc2.length)|0;\n\tvar c2 = i% abc2.length;\n\tvar ch = abc1[c1]+abc2[c2];\t\n\tss[0] = ss[0].replace(new RegExp(\"return\\\\s+\\\\'\"+aa[i]+\"\\\\'\",\"g\"),\"return '\"+ch+\"'\");\n\tss[1] = ss[1].replace(new RegExp(\"\\\\s\"+aa[i]+\"\\\\s\",\"g\"),' '+ch+' ');\n\tss[1] = ss[1].replace(new RegExp(\"\\\\(\"+aa[i]+\"\\\\|\",\"g\"),'('+ch+'|');\n\tss[1] = ss[1].replace(new RegExp(\"\\\\|\"+aa[i]+\"\\\\|\",\"g\"),'|'+ch+'|');\n\tss[1] = ss[1].replace(new RegExp(\"\\\\|\"+aa[i]+\"\\\\)\",\"g\"),'|'+ch+')');\n\tss[1] = ss[1].replace(new RegExp(\"\\\\s\"+aa[i]+\"\\\\?\",\"g\"),' '+ch+'?');\n}\n\nvar so = ss[0]+'/lex'+ss[1];\nfs.writeFileSync('./src/alasqlparser1.jison',so);\n//console.log(s);\n\n//console.log(bb);"}